// Generated by CoffeeScript 2.7.0
var modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

import _ from 'https://cdn.skypack.dev/lodash';

import {
  ass,
  lerp,
  param,
  range,
  hexToBase64,
  enterFullscreen
} from '../js/utils.js';

import {
  Square
} from '../js/square.js';

import {
  Button,
  ClockButton
} from '../js/button.js';

import {
  coords,
  global,
  toObjectNotation,
  toUCI
} from '../js/globals.js';

import {
  dumpState
} from '../js/globals.js';

export var Board = class Board {
  constructor(nr) {
    var i, k, len, ref, x0, x1, y0, y1, y2;
    this.click = this.click.bind(this);
    this.draw = this.draw.bind(this);
    this.littera = this.littera.bind(this);
    this.resize = this.resize.bind(this);
    this.nr = nr;
    this.squares = [];
    this.clickedSquares = [];
    this.pieces = "";
    ref = range(64);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      ((i) => {
        return this.squares.push(new Square(this.nr, i, () => {
          return this.click(i);
        }));
      })(i);
    }
    this.buttons = [];
    x0 = round(global.mx() / 2);
    x1 = width - x0;
    y0 = round(0.20 * height);
    y1 = round(0.50 * height);
    y2 = round(0.80 * height);
    this.buttons.push(new ClockButton(x0, y1, this.nr, () => {
      return global.paused = !global.paused;
    }));
    this.buttons.push(new ClockButton(x1, y1, this.nr, () => {
      return global.paused = !global.paused;
    }));
  }

  calcMaterial() {
    var hash, k, len, piece, pieces, res;
    res = 0;
    hash = {
      '.': 0,
      'k': 0,
      'r': -5,
      'q': -9,
      'b': -3,
      'n': -3,
      'p': -1,
      'K': 0,
      'R': 5,
      'Q': 9,
      'B': 3,
      'N': 3,
      'P': 1,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '/': 0
    };
    pieces = global.chess.fen().split(' ')[0];
    console.log(pieces);
    for (k = 0, len = pieces.length; k < len; k++) {
      piece = pieces[k];
      res += hash[piece];
    }
    console.log(res);
    return res;
  }

  click(i) {
    var col, color, csl, g, row, sq, uci;
    g = global;
    if (g.paused) {
      return;
    }
    if (this.nr === modulo(g.chess.history().length, 2)) {
      return;
    }
    col = modulo(i, 8);
    row = 7 - Math.floor(i / 8);
    sq = g.chess.board()[row][col];
    color = "wb"[modulo(g.chess.history().length, 2)];
    csl = this.clickedSquares.length;
    if (csl === 0) {
      if (sq !== null && sq.color === color) {
        return this.clickedSquares.push(i);
      }
    } else if (csl === 1) {
      if (i === this.clickedSquares[0]) {
        return this.clickedSquares = []; // kontrollera draget
      } else {
        this.clickedSquares.push(i);
        uci = toUCI(this.clickedSquares);
        // är detta ett korrekt drag? I så fall, utför det
        if (g.chess.move({
          from: uci.slice(0, 2),
          to: uci.slice(2, 4),
          promotion: 'q'
        })) {
          g.copyPGNToClipboard();
          this.clickedSquares = [];
          console.log(g.chess);
          global.audio.play();
          g.paused = false;
          if (g.chess.game_over()) {
            g.paused = true;
          }
          g.clocks[modulo(g.chess.history().length, 2)] += g.increment;
          return global.material = this.calcMaterial();
        } else {
          return this.clickedSquares.pop();
        }
      }
    }
  }

  draw() {
    var SIZE, button, i, j, k, l, len, len1, len2, m, piece, ref, ref1, ref2, ref3, ref4, ref5, sq;
    ref = this.buttons;
    for (k = 0, len = ref.length; k < len; k++) {
      button = ref[k];
      button.draw();
    }
    fill('white');
    textSize(global.size() * 0.3);
    push();
    if (this.nr === 0) {
      translate(global.mx(), global.my());
    } else {
      translate(global.mx(), global.my() + 9 * global.size());
    }
    ref1 = range(8);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      ref2 = range(8);
      for (m = 0, len2 = ref2.length; m < len2; m++) {
        j = ref2[m];
        piece = global.chess.board()[7 - i][j];
        sq = this.squares[i * 8 + j];
        if ((ref3 = this.clickedSquares.length) === 0 || ref3 === 2) {
          sq.draw(piece, false);
        }
        if ((ref4 = this.clickedSquares.length) === 1) {
          sq.draw(piece, i * 8 + j === this.clickedSquares[0]);
        } else if ((ref5 = this.clickedSquares.length) === 3 || ref5 === 4) {
          sq.draw(piece, i * 8 + j === this.clickedSquares[2]);
        }
      }
    }
    stroke('black');
    if (global.paused || this.nr === global.chess.history().length % 2) {
      fill(128, 128, 128, 64);
    } else {
      noFill();
    }
    SIZE = global.size();
    rect(SIZE * 4, SIZE * 4, SIZE * 8, SIZE * 8);
    pop();
    if (global.clocks[0] <= 0 || global.clocks[1] <= 0) {
      return global.paused = true;
    }
  }

  littera() {
    var SIZE, digits, i, k, len, letters, ref, results;
    SIZE = global.size();
    noStroke();
    fill('black');
    textSize(SIZE * 0.3);
    letters = false ? "hgfedcba" : "abcdefgh";
    digits = false ? "12345678" : "87654321";
    ref = range(8);
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      text(letters[i], SIZE * (i + 1), SIZE * 8.8);
      results.push(text(digits[i], SIZE * 0.15, SIZE * (i + 1)));
    }
    return results;
  }

  resize() {
    var button, k, len, ref, results;
    ref = this.buttons;
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      button = ref[k];
      results.push(button.resize());
    }
    return results;
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023\026-chessx2\coffee\board.coffee