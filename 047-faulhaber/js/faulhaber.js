// Generated by CoffeeScript 2.5.1
// Läser in uttrycken från json-filen.
//   "1 3 2" <=> (n + 3n**2 + 2n**3)/6
// BigInt finns numera i Chrome.
// Fractions saknas dock.
var Button, ass, buttons, data, f, i, index, j, k, l, len, len1, m, n, ns, print, range, ref, ref1;

range = _.range;

print = console.log;

k = 1;

index = 9;

ns = [];

ref = range(6);
for (l = 0, len = ref.length; l < len; l++) {
  i = ref[l];
  ref1 = range(1, 10);
  for (m = 0, len1 = ref1.length; m < len1; m++) {
    j = ref1[m];
    ns.push(j * 10 ** i);
  }
}

ns.push(1000000);

n = ns[index];

buttons = [];

Button = class Button {
  constructor(prompt, x, y, click) {
    this.prompt = prompt;
    this.x = x;
    this.y = y;
    this.click = click;
    this.w = 80;
    this.h = 40;
  }

  draw() {
    fill('white');
    rect(this.x, this.y, this.w, this.h);
    fill('black');
    return text(this.prompt, this.x, this.y);
  }

  inside() {
    return (this.x - this.w / 2 < mouseX && mouseX < this.x + this.w / 2) && (this.y - this.h / 2 < mouseY && mouseY < this.y + this.h / 2);
  }

};

ass = function(a, b) {
  if (a !== b) {
    return log(`assert failure: ${a} != ${b}`);
  }
};

data = null;

window.preload = function() {
  return data = loadJSON("faulhaber.json");
};

window.setup = function() {
  var len2, o, ref2;
  createCanvas(600, 450);
  ref2 = range(data.a.length);
  for (o = 0, len2 = ref2.length; o < len2; o++) {
    i = ref2[o];
    data.a[i] = data.a[i].split(' ');
  }
  ass(BigInt(55), f(1, 10));
  ass(BigInt(5050), f(1, 100));
  ass(BigInt(385), f(2, 10));
  ass(BigInt(3025), f(3, 10));
  ass(BigInt(25502500), f(3, 100));
  ass(BigInt(10507499300049998500), f(9, 100));
  textAlign(CENTER, CENTER);
  rectMode(CENTER);
  textFont('Courier New');
  textSize(30);
  buttons.push(new Button("k--", 40, 20, function() {
    if (k > 0) {
      return k--;
    }
  }));
  buttons.push(new Button("k++", width - 40, 20, function() {
    if (k < data.a.length - 1) {
      return k++;
    }
  }));
  buttons.push(new Button("n--", 40, height - 20, function() {
    if (index > 0) {
      return index--;
    }
  }));
  return buttons.push(new Button("n++", width - 40, height - 20, function() {
    if (index < ns.length - 1) {
      return index++;
    }
  }));
};

window.draw = function() {
  var answer, button, len2, len3, o, p, ref2;
  background('gray');
  textAlign(CENTER, CENTER);
  textSize(30);
  for (o = 0, len2 = buttons.length; o < len2; o++) {
    button = buttons[o];
    button.draw();
  }
  answer = f(k, ns[index]).toString();
  textAlign(LEFT, BOTTOM);
  ref2 = range(0, 1 + Math.floor(answer.length / 32));
  for (p = 0, len3 = ref2.length; p < len3; p++) {
    i = ref2[p];
    text(answer.slice(32 * i, 32 * (i + 1)), 12, 100 + i * 25);
  }
  textSize(60);
  textAlign(CENTER, CENTER);
  text("Σ", width * 0.5, height - 100 + 30);
  textSize(20);
  text(ns[index], width * 0.50, height - 130 + 30);
  text("i", width * 0.55, height - 100 + 30);
  if (k > 1) {
    text(k, width * 0.58, height - 110 + 30);
  }
  return text("i=1", width * 0.50, height - 70 + 30);
};

f = function(k, n) {
  var len2, o, r, ref2, summa, value;
  n = BigInt(n);
  r = data.a[k];
  value = BigInt(0);
  summa = BigInt(0);
  ref2 = range(r.length);
  for (o = 0, len2 = ref2.length; o < len2; o++) {
    i = ref2[o];
    value += BigInt(r[i]) * n ** BigInt(i + 1);
    summa += BigInt(r[i]);
  }
  return value / BigInt(summa);
};

window.mousePressed = function() {
  var button, len2, o, results;
  results = [];
  for (o = 0, len2 = buttons.length; o < len2; o++) {
    button = buttons[o];
    if (button.inside(mouseX, mouseY)) {
      results.push(button.click());
    } else {
      results.push(void 0);
    }
  }
  return results;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023\047-faulhaber\coffee\faulhaber.coffee