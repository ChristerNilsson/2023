// Generated by CoffeeScript 2.5.1
var ALFABET, ALL, Button, N, ass, buffer, button, buttons, clickLetter, clickNew, clickSolve, clickUndo, clicks, create5040, data, evaluate, i, len, len1, m, o, prompts, range, ref, ref1, released, secret, setActiveButtons, showHelp, showSolution, showTable, skala, solution, x0, x1, xdraw, xoff, y0, y1,
  indexOf = [].indexOf;

N = 10;

ALFABET = 'ABCDEFGHIJ';

range = _.range;

ass = (a, b) => {
  if (a !== b) {
    return console.log('Assert failed', a, '!=', b);
  }
};

create5040 = function() {
  var i, j, k, l, len, len1, len2, len3, m, o, p, q, ref, ref1, ref2, ref3, res;
  res = [];
  ref = range(N);
  for (m = 0, len = ref.length; m < len; m++) {
    i = ref[m];
    ref1 = range(N);
    for (o = 0, len1 = ref1.length; o < len1; o++) {
      j = ref1[o];
      if (i === j) {
        continue;
      }
      ref2 = range(N);
      for (p = 0, len2 = ref2.length; p < len2; p++) {
        k = ref2[p];
        if (k === i || k === j) {
          continue;
        }
        ref3 = range(N);
        for (q = 0, len3 = ref3.length; q < len3; q++) {
          l = ref3[q];
          if (l === i || l === j || l === k) {
            continue;
          }
          res.push(ALFABET[i] + ALFABET[j] + ALFABET[k] + ALFABET[l]);
        }
      }
    }
  }
  return res;
};

evaluate = (guess, secret) => {
  var i, len, m, ref, ref1, res;
  res = [];
  ref = range(guess.length);
  for (m = 0, len = ref.length; m < len; m++) {
    i = ref[m];
    if (ref1 = guess[i], indexOf.call(secret, ref1) >= 0) {
      res.push(str(abs(i - secret.indexOf(guess[i]))));
    }
  }
  res = res.sort().join("");
  if (res === '') {
    return '----';
  } else {
    return res;
  }
};

ALL = create5040();

skala = 1;

xoff = 0;

data = null;

solution = [];

secret = '';

buffer = '';

showSolution = false;

window.preload = function() {
  return data = loadJSON("./data_5040.json");
};

window.setup = function() {
  var index, len, m, ref, res;
  createCanvas(windowWidth, windowHeight);
  skala = height / 100;
  textFont("Courier New");
  strokeWeight(0.5);
  data = data.data.split('*');
  res = {};
  ref = range(5040);
  for (m = 0, len = ref.length; m < len; m++) {
    index = ref[m];
    res[ALL[index]] = "ABCD" + data[index] + ALL[index];
  }
  data = res;
  clickNew();
  return xdraw(); //###
};

showHelp = function(x, y) {
  var i, len, m, ref, results, texts;
  textSize(4);
  texts = [];
  texts.push('Mastermind 5040');
  texts.push('  (10*9*8*7)');
  texts.push('Find the four');
  texts.push('  letter secret!');
  texts.push('');
  texts.push('A clue gives up');
  texts.push('  to 4 distances');
  texts.push('');
  texts.push('Max 5 guesses');
  texts.push('  necessary');
  texts.push('');
  texts.push('Example:');
  texts.push('  DHIJ (secret)');
  texts.push('  guess => clue');
  texts.push('  ABCD  => 3');
  texts.push('  AEFG  => ----');
  texts.push('  HABI  => 11');
  texts.push('  DHIJ  => 0000');
  ref = range(texts.length);
  results = [];
  for (m = 0, len = ref.length; m < len; m++) {
    i = ref[m];
    results.push(text(texts[i], x - 8, y + 5 * i));
  }
  return results;
};

showTable = function(table, x, y) { // table = 'ABCDEFGH'
  var answer, i, item, len, m, ref, results, t;
  textSize(6);
  ref = range(0, table.length, 4);
  results = [];
  for (m = 0, len = ref.length; m < len; m++) {
    i = ref[m];
    t = table.substring(i, i + 4);
    item = t;
    answer = evaluate(secret, t);
    if (answer === '0000') {
      showSolution = true;
    }
    if (t.length === 4) {
      item = t + ' ' + answer;
    }
    results.push(text(item, x - 8, y + 5 * (Math.floor(i / 4))));
  }
  return results;
};

xdraw = function() { //###
  var button, len, m;
  push(); //###
  background("lightgray");
  translate(xoff, 0);
  scale(skala);
  textAlign(CENTER, CENTER);
  for (m = 0, len = buttons.length; m < len; m++) {
    button = buttons[m];
    button.draw();
  }
  textAlign(LEFT, TOP);
  if (buffer.length === 0) {
    showHelp(x1, y0);
  } else {
    showTable(buffer, x1, y0);
  }
  if (showSolution) {
    showTable(solution, x1, y1);
  }
  return pop(); //###
};

setActiveButtons = () => {
  var antal, button, gray, i, len, m, n, ref, ref1;
  n = buffer.length;
  antal = n % 4;
  gray = buffer.substring(n - antal, n);
  ref = range(N);
  for (m = 0, len = ref.length; m < len; m++) {
    i = ref[m];
    button = buttons[i];
    button.active = (ref1 = button.prompt, indexOf.call(gray, ref1) < 0);
  }
  buttons[N + 0].active = true; //showSolution
  buttons[N + 1].active = n > 0;
  return buttons[N + 2].active = buffer.endsWith(secret);
};

Button = class Button {
  constructor(prompt, x2, y2, w, h, ts, click) {
    this.prompt = prompt;
    this.x = x2;
    this.y = y2;
    this.w = w;
    this.h = h;
    this.ts = ts;
    this.click = click;
    this.active = true;
  }

  draw() {
    push();
    textSize(this.ts);
    fill('gray');
    rect(this.x, this.y, this.w, this.h);
    fill(this.active ? 'yellow' : 'lightgray');
    text(this.prompt, this.x + this.w / 2, this.y + this.h * 0.5 + 0.5);
    return pop();
  }

  inside(mx, my) {
    return (this.x <= mx && mx <= this.x + this.w) && (this.y <= my && my <= this.y + this.h) && this.active;
  }

};

clickLetter = function(button) {
  if (!showSolution && buffer.length < 40) { // and button.active
    buffer += button.prompt;
    return setActiveButtons();
  }
};

clickNew = function() {
  buffer = '';
  secret = _.sample(ALL);
  solution = data[secret];
  showSolution = false;
  return setActiveButtons();
};

clickUndo = function() {
  if (buffer.length === 0) {
    return;
  }
  if (buffer.length === 1) {
    showSolution = false;
  }
  buffer = buffer.substring(0, buffer.length - 1);
  return setActiveButtons();
};

clickSolve = function() {
  if (buffer.length >= 20) {
    return showSolution = true;
  }
};

buttons = [];

x0 = 1; // %

x1 = 30;

y0 = 1;

y1 = 60;

ref = range(N);
for (m = 0, len = ref.length; m < len; m++) {
  i = ref[m];
  button = new Button(ALFABET[i], x0 + i % 2 * 10, y0 + Math.floor(i / 2) * 10, 10, 10, 10); //, () => clickLetter button
  button.click = () => {
    return clickLetter(button);
  };
  buttons.push(button);
}

ref1 = range(3);
for (o = 0, len1 = ref1.length; o < len1; o++) {
  i = ref1[o];
  prompts = 'new undo solve'.split(' ');
  clicks = [clickNew, clickUndo, clickSolve];
  button = new Button(prompts[i], x0 + Math.floor(i / 5) * 10, y1 + i % 5 * 10, 20, 10, 6, clicks[i]);
  button.active = false;
  buttons.push(button);
}

released = true;

window.mousePressed = function(event) {
  var len2, p;
  event.preventDefault();
  if (!released) {
    return;
  }
  released = false;
  for (p = 0, len2 = buttons.length; p < len2; p++) {
    button = buttons[p];
    if (button.inside(mouseX / skala, mouseY / skala)) {
      button.click();
    }
  }
  xdraw(); //###
  return false;
};

window.mouseReleased = function(event) {
  event.preventDefault();
  released = true;
  return false;
};

window.keyPressed = function() {
  var s;
  s = '' + key;
  s = s.toUpperCase();
  if (indexOf.call(ALFABET, s) >= 0 && buffer.length < 40) {
    buffer += s;
    setActiveButtons();
  }
  if (keyCode === BACKSPACE) {
    clickUndo();
  }
  return xdraw();
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\knuth-mastermind\coffee\sketch.coffee