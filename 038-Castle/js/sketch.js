// Generated by CoffeeScript 2.5.1
  // Vectorized Playing Cards 2.0 - http://sourceforge.net/projects/vector-cards/
  // Copyright 2015 - Chris Aguilar - conjurenation@gmail.com
  // Licensed under LGPL 3 - www.gnu.org/copyleft/lesser.html

//  4  5  6  7  8  9 10 11  0 
  //  4  5  6  7  8  9 10 11  1
  //  4  5  6  7  8  9 10 11  2 
  //  4  5  6  7  8  9 10 11  3
  //  4  5  6  7  8  9 10 11
  //  4  5  6  7  8  9 10 11
  /*
  Korten benämnes :
    abcdefghijklm hjärter
    nopqrstuvwxyz spader
    ABCDEFGHIJKLM ruter
    NOPQRSTUVWXYZ klöver
    A23456789TJQK

  Startposition:
    a n A N (fyra äss. Observera att man bara behöver lagra högsta kortet)
    egUSBy (en hög med korten h5 h7 c8 c6 d2 sQ. Åtta högar behövs)
    Totalt 52 + 11 = 63 tecken

  Slutposition:
    m z M Z + några blanka separatorer
    Totalt 4 + 11 = 15 tecken.

  Med hjälp av dessa strängar kan man förhindra att man besöker redan besökta noder.

  */
var ACES, BlackBox, General, H, HEAPS, LIMIT, LONG, N, OFFSETX, RANK, Rank, SUIT, Suit, W, aceCards, alternativeDsts, assert, backs, board, cands, cards, compress, compressOne, copyToClipboard, countAceCards, countEmptyPiles, display, done, dsts, dumpBoard, expand, faces, fakeBoard, findAllMoves, general, generalen, getCenter, getParameters, h, hash, hint, hintOne, hitGreen, infoLines, keyPressed, legalMove, makeBoard, makeLink, makeMove, menu0, menu1, menu2, mousePressed, mouseReleased, myRandom, myShuffle, newGame, oneClick, originalBoard, pack, preload, prettyCard, prettyCard2, prettyMove, prettyUndoMove, print, printAutomaticSolution, printManualSolution, range, readBoard, recurse, released, restart, setup, showDialogue, showHeap, showInfo, srcs, startCompetition, text3, undoMove, undoMoveOne, unpack, w,
  indexOf = [].indexOf;

ACES = [0, 1, 2, 3];

HEAPS = [4, 5, 6, 7, 8, 9, 10, 11];

//comeFrom = {}
Suit = 'chsd';

Rank = "A23456789TJQK";

SUIT = "club heart spade diamond".split(' ');

RANK = "A23456789TJQK";

LONG = " Ace Two Three Four Five Six Seven Eight Nine Ten Jack Queen King".split(' ');

// Konstanter för cards.png
OFFSETX = 468;

W = 263.25;

H = 352;

w = null;

h = null;

LIMIT = 1000; // Maximum steps considered before giving up. 1000 is too low, hint fails sometimes.

faces = null;

backs = null;

board = null;

cards = null;

cands = null;

hash = null;

aceCards = 4;

originalBoard = null;

startCompetition = null;

N = 13;

srcs = null;

dsts = null;

alternativeDsts = [];

infoLines = [];

general = null;

released = true;

print = console.log;

range = _.range;

Array.prototype.clear = function() {
  return this.length = 0;
};

assert = function(a, b, msg = 'Assert failure') {
  if (!_.isEqual(a, b)) {
    print(msg);
    print("  ", a);
    return print("  ", b);
  }
};

getParameters = function(h = window.location.href) {
  var arr, f, s;
  h = decodeURI(h);
  arr = h.split('?');
  if (arr.length !== 2) {
    return {};
  }
  s = arr[1];
  if (s === '') {
    return {};
  }
  return _.fromPairs((function() {
    var l, len, ref, results;
    ref = s.split('&');
    results = [];
    for (l = 0, len = ref.length; l < len; l++) {
      f = ref[l];
      results.push(f.split('='));
    }
    return results;
  })());
};

myRandom = function(a, b) {
  var r, x;
  x = 10000 * Math.sin(general.fastSeed++);
  r = x - Math.floor(x);
  return a + Math.floor((b - a) * r);
};

myShuffle = function(array) {
  var i, j, l, len, n, ref, results, value;
  n = array.length;
  ref = range(n);
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    //j = myRandom i, n
    j = _.random(i, n - 1, false);
    //print j
    value = array[i];
    array[i] = array[j];
    results.push(array[j] = value);
  }
  return results;
};

copyToClipboard = function(txt) {
  var copyText;
  copyText = document.getElementById("myClipboard");
  copyText.value = txt;
  copyText.select();
  return document.execCommand("copy");
};

makeLink = function() {
  var index, url;
  url = window.location.href + '?';
  index = url.indexOf('?');
  url = url.substring(0, index);
  return url + '?cards=' + general.slowSeed;
};

BlackBox = class BlackBox { // Avgör om man lyckats eller ej. Man får tillgodogöra sig tidigare drag.
  constructor() {
    this.clr();
  }

  clr() {
    this.total = [
      0,
      0,
      0 // [time,computer,human]
    ];
    return this.count = 0;
  }

  //@success = false 
  show() {} // print 'BlackBox',@count,@total

};

General = class General {
  constructor() {
    this.slowSeed = 1; // stored externally
    this.fastSeed = 1; // used internally
    this.start = null;
    this.maxMoves = null;
    this.hist = null;
    this.hintsUsed = 0;
    this.blackBox = new BlackBox();
    this.clr();
    this.getLocalStorage();
  }

  success() {
    return this.blackBox.total[2] + this.hist.length <= this.blackBox.total[1] + this.maxMoves;
  }

  probe(time) {
    var total;
    if (!this.success()) {
      return false;
    }
    total = this.blackBox.total;
    total[0] += time;
    total[1] += this.maxMoves;
    total[2] += this.hist.length;
    return true;
  }

  getLocalStorage() {
    print('direct', localStorage.Generalen);
    if (localStorage.Generalen != null) {
      hash = JSON.parse(localStorage.Generalen);
    } else {
      hash = {};
    }
    if (5 !== _.size(hash)) {
      hash = {
        slowSeed: 1,
        fastSeed: 1,
        total: [0, 0, 0],
        hintsUsed: 0
      };
    }
    print('hash', JSON.stringify(hash));
    this.slowSeed = hash.slowSeed;
    this.fastSeed = hash.fastSeed;
    this.blackBox.total = hash.total;
    this.hintsUsed = hash.hintsUsed;
    return print('get', JSON.stringify(hash));
  }

  putLocalStorage() {
    var s;
    s = JSON.stringify({
      slowSeed: this.slowSeed,
      fastSeed: this.fastSeed,
      total: this.blackBox.total,
      hintsUsed: this.hintsUsed
    });
    localStorage.Generalen = s;
    return print('put', s);
  }

  clr() {
    this.blackBox.clr();
    return this.timeUsed = 0;
  }

  //@putLocalStorage()
  totalRestart() {
    this.slowSeed = int(random(65536));
    return this.clr();
  }

  handle(mx, my) {
    var heap, marked, timeUsed;
    marked = [mx + (my >= 3 ? 12 : 4), my];
    heap = oneClick(marked, board, true);
    if (this.timeUsed === 0 && 4 * N === countAceCards(board)) {
      timeUsed = Math.floor((millis() - this.start) / 1000);
      if (this.probe(timeUsed)) {
        this.timeUsed = timeUsed;
        this.blackBox.show();
      }
      this.putLocalStorage();
      return printManualSolution();
    }
  }

};

preload = function() {
  faces = loadImage('cards/Color_52_Faces_v.2.0.png');
  return backs = loadImage('cards/Playing_Card_Backs.png');
};

pack = function(suit, rank) {
  return Suit[suit] + RANK[rank];
};

assert('cA', pack(0, 0));

assert('dA', pack(3, 0));

assert('d2', pack(3, 1));

assert('hQ', pack(1, 11));

assert('hJ', pack(1, 10));

//print 'pack ok'
unpack = function(n) {
  var rank, suit;
  suit = Suit.indexOf(n[0]);
  rank = RANK.indexOf(n[1]);
  return [suit, rank];
};

assert([0, 0], unpack('cA'));

assert([3, 0], unpack('dA'));

assert([1, 11], unpack('hQ'));

assert([1, 10], unpack('hJ'));

//print 'unpack ok'
compress = function(board) {
  var heap, l, len, results;
  results = [];
  for (l = 0, len = HEAPS.length; l < len; l++) {
    heap = HEAPS[l];
    results.push(board[heap] = compressOne(board[heap]));
  }
  return results;
};

compressOne = function(cards) {
  return cards;
};

countAceCards = function(b) {
  var heap, l, len, res;
  res = 0;
  for (l = 0, len = ACES.length; l < len; l++) {
    heap = ACES[l];
    res += b[heap].length;
  }
  return res;
};

countEmptyPiles = function(b) {
  var heap, l, len, res;
  res = 0;
  for (l = 0, len = HEAPS.length; l < len; l++) {
    heap = HEAPS[l];
    if (b[heap].length === 0) {
      res++;
    }
  }
  return res;
};

dumpBoard = function(board) {
  var heap;
  return ((function() {
    var l, len, results;
    results = [];
    for (l = 0, len = board.length; l < len; l++) {
      heap = board[l];
      results.push(heap.join(' '));
    }
    return results;
  })()).join('|');
};

makeBoard = function() {
  var card, heap, i, l, len, len1, len2, len3, len4, m, o, p, q, rank, ref, ref1, ref2, ref3, suit;
  N = 13;
  cards = [];
  ref = range(4);
  for (l = 0, len = ref.length; l < len; l++) {
    suit = ref[l];
    ref1 = range(1, N);
    // 2..K
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      rank = ref1[m];
      cards.push(pack(suit, rank));
    }
  }
  //print cards

  //general.fastSeed++ # nödvändig?
  myShuffle(cards);
  board = [];
  ref2 = range(4 + 8);
  for (o = 0, len2 = ref2.length; o < len2; o++) {
    i = ref2[o];
    board.push([]);
  }
  ref3 = range(4);
  for (heap = p = 0, len3 = ref3.length; p < len3; heap = ++p) {
    suit = ref3[heap];
    board[heap].push(pack(suit, 0)); // Ess
  }
  for (i = q = 0, len4 = cards.length; q < len4; i = ++q) {
    card = cards[i];
    heap = 4 + i % 8;
    board[heap].push(card);
  }
  //print board
  return board;
};

readBoard = function(b) {
  var heap, l, len, ref, results;
  ref = b.split('|');
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    heap = ref[l];
    results.push(heap === '' ? [] : heap.split(' '));
  }
  return results;
};

fakeBoard = function() {
  //board = readBoard "cA|hA|sA|dA|hT c3 s4 c4 h2 s2|c5 s9 hJ cT sQ|dQ h4 cK s8 c2 sJ|h6 cQ s3 d8 h5 s7|c6 d3 s5 h7 h3 d5|h9 d7 dK hQ d6 sK|h8 d9 c8 c9 c7 d4|cJ hK s6 dJ sT dT" # 111418466
  board = readBoard("cA|hA|sA|dA|c4 dJ c6 h2 h3 sJ|hQ c8 s5 sT h8 h4|c7 s7 h6 s9 s2 dK|d8 sK cT h7 cK d3|cQ d2 c5 d5 cJ s4|d6 hK h5 dQ c2 hT|c3 c9 hJ d7 sQ d4|h9 d9 s3 dT s6 s8"); // 452200020
  return print(board);
};

done = {};

recurse = function(b, level = 0) {
  var c, card, dst, key, l, len, move, moves, res, src;
  //print 'recurse',level, _.map b, (pile) -> pile.length
  key = dumpBoard(b);
  if (key in done) {
    return;
  }
  done[key] = true;
  if (b[0].length + b[1].length + b[2].length + b[3].length === 52) {
    print('52!', level, _.size(done));
    return true;
  }
  moves = findAllMoves(b);
  for (l = 0, len = moves.length; l < len; l++) {
    move = moves[l];
    [src, dst] = move;
    //print {src,dst}
    if (src === 0 || src === 1 || src === 2 || src === 3) {
      continue;
    }
    if (b[src].length === 0) {
      continue;
    }
    c = _.cloneDeep(b);
    card = c[src].pop();
    c[dst].push(card);
    res = recurse(c, level + 1);
    if (res) {
      return true;
    }
  }
  return false;
};

newGame = function() {
  var cand, cands2, emptyPiles, i, increment, l, len, len1, level, m, nr, ref, start;
  general.start = millis();
  general.hist = [];
  fakeBoard();
  print(board);
  start = new Date();
  recurse(board);
  print(new Date() - start);
  return;
  ref = range(1);
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    fakeBoard();
    general.hintsUsed = 0;
    originalBoard = _.cloneDeep(board);
    aceCards = countAceCards(board);
    cands = [];
    cands.push([
      aceCards,
      0,
      board, // antal kort på ässen, antal drag, boa
      []
    ]);
    hash = {};
    nr = 0;
    cand = null;
    print('newGame', nr, LIMIT, cands.length, aceCards, N);
    level = 0;
    while (aceCards !== N * 4 && cands.length > 0 && level < 200) {
      level++;
      cands2 = [];
      for (m = 0, len1 = cands.length; m < len1; m++) {
        cand = cands[m];
        aceCards = cand[0];
        emptyPiles = cand[1];
        if (aceCards === N * 4) {
          break;
        }
        increment = expand(cand);
        cands2 = cands2.concat(increment);
      }
      cands = cands2;
      cands.sort(function(a, b) {
        return b[0] - a[0];
      });
      cands = cands.slice(0, 2000); // större ger längre körning och kortare lösning.
      if (cands.length > 0) {
        print('candsx', level, cands.length, cands[0][0]);
      }
    }
    //for cand in cands
    //	print JSON.stringify cand
    if (aceCards === N * 4) {
      print(JSON.stringify(dumpBoard(originalBoard)));
      board = cand[2];
      print(makeLink());
      printAutomaticSolution(hash, board);
      board = _.cloneDeep(originalBoard);
      print(`${int(millis() - general.start)} ms`);
      general.start = millis();
      general.maxMoves = int(cand[1]);
      return;
    }
  }
};

setup = function() {
  var canvas, params;
  canvas = createCanvas(innerWidth - 0.5, innerHeight - 0.5);
  canvas.position(0, 0); // hides text field used for clipboard copy.
  general = new General();
  w = width / 9;
  h = height / 4;
  angleMode(DEGREES);
  params = getParameters();
  if ('cards' in params) {
    general.slowSeed = parseInt(params.cards);
  }
  startCompetition = millis();
  infoLines.push('Moves Bonus Cards   Time Hints'.split(' '));
  infoLines.push('0 0 0   0 0'.split(' '));
  newGame();
  return display(board);
};

keyPressed = function() {
  if (key === 'X') {
    N = 7;
    board = "cA7|hA4|sA3|dA2||h6|s5 d6||h5 d5||s4 s6|d34||d7|s7|h7||||";
    general.hist = [[12, 0, 1], [5, 1, 1], [8, 3, 1], [9, 1, 1], [11, 1, 1], [16, 2, 1], [17, 0, 1], [10, 0, 1], [9, 0, 1], [18, 2, 1], [19, 0, 1], [7, 0, 1]];
    board = readBoard(board);
    print(board);
  }
  return display(board);
};

// returnerar övre, vänstra koordinaten för översta kortet i högen som [x,y]
getCenter = function(heap) {
  var dy, n;
  if (indexOf.call(ACES, heap) >= 0) {
    return [int(8 * w), int(heap * h)];
  }
  //	if heap in PANEL then return [int((heap-12)*w), int(3*h)]
  if (indexOf.call(HEAPS, heap) >= 0) {
    n = board[heap].length;
    dy = n === 0 ? 0 : min(h / 4, 2 * h / (n - 1));
    return [int((heap - 4) * w), int((n - 1) * dy)];
  }
};

menu0 = function(src, dst, col) {
  var dialogue, r, x, y;
  dialogue = new Dialogue(0, int(w / 2), int(h / 2), int(0.10 * h), col);
  r = int(0.05 * height);
  [x, y] = getCenter(src);
  dialogue.add(new Button('From', x, y, r, function() {
    return dialogues.pop();
  }));
  [x, y] = getCenter(dst);
  return dialogue.add(new Button('To', x, y, r, function() {
    return dialogues.pop();
  }));
};

menu1 = function() {
  var dialogue, r1, r2;
  dialogue = new Dialogue(1, int(4 * w), int(1.5 * h), int(0.15 * h));
  r1 = 0.25 * height;
  r2 = 0.085 * height;
  dialogue.clock(' ', 6, r1, r2, 90 + 360 / 12);
  dialogue.buttons[0].info('Undo', general.hist.length > 0, function() {
    var antal, dst, src;
    if (general.hist.length > 0) {
      [src, dst, antal] = _.last(general.hist);
      dialogues.pop();
      undoMove(general.hist.pop());
      return menu0(src, dst, '#ff0');
    } else {
      return dialogues.pop();
    }
  });
  dialogue.buttons[1].info('Hint', true, function() {
    dialogues.pop();
    return hint(); // Lägger till menu0
  });
  dialogue.buttons[2].info('Cycle Move', alternativeDsts.length > 1, function() {
    var antal, dst, heap, src;
    alternativeDsts.push(alternativeDsts.shift());
    [src, dst, antal] = general.hist.pop();
    undoMove([src, dst, antal]);
    heap = alternativeDsts[0];
    return makeMove(board, src, heap, true);
  });
  // dialogues.pop() # do not pop!
  dialogue.buttons[3].info('Next', general.success(), function() {
    newGame();
    general.timeUsed = 0;
    general.putLocalStorage();
    return dialogues.pop();
  });
  dialogue.buttons[4].info('Help', true, function() {
    return window.open("https://github.com/ChristerNilsson/Lab/tree/master/2018/056-GeneralensTidsf%C3%B6rdriv#generalens-tidsf%C3%B6rdriv");
  });
  return dialogue.buttons[5].info('More...', true, function() {
    return menu2();
  });
};

menu2 = function() {
  var dialogue, r1, r2;
  dialogue = new Dialogue(2, int(4 * w), int(1.5 * h), int(0.15 * h));
  r1 = 0.25 * height;
  r2 = 0.11 * height;
  dialogue.clock(' ', 3, r1, r2, 90 + 360 / 6);
  dialogue.buttons[0].info('Restart', true, function() {
    restart();
    return dialogues.clear();
  });
  dialogue.buttons[1].info('Total Restart', true, function() {
    general.totalRestart();
    newGame(); // 0
    return dialogues.clear();
  });
  return dialogue.buttons[2].info('Link', true, function() {
    var link;
    link = makeLink();
    copyToClipboard(link);
    //msg = 'Link copied to clipboard'
    return dialogues.clear();
  });
};

showHeap = function(board, heap, x, y, dy) { // dy kan vara både pos och neg
  var card, k, l, len, n, rank, ref, suit;
  n = board[heap].length;
  x = x * w;
  if (n > 0) {
    y = y * h + y * dy;
    ref = board[heap];
    for (k = l = 0, len = ref.length; l < len; k = ++l) {
      card = ref[k];
      [suit, rank] = unpack(card);
      //dr = if under < over then 1 else -1
      //for rank in range under,over+dr,dr
      noFill();
      stroke(0);
      image(faces, x, y, w, h * 1.1, OFFSETX + W * rank, 1092 + H * suit, 225, H - 1);
      y += dy;
    }
    // visa eventuellt baksidan
    card = _.last(board[heap]);
    [suit, rank] = unpack(card);
    if (indexOf.call(ACES, heap) >= 0 && rank === N - 1) {
      return image(backs, x, y, w, h * 1.1, OFFSETX + 860, 1092 + 622, 225, H - 1);
    }
  }
};

display = function(board) {
  var dy, heap, l, len, len1, m, n, x, y;
  print('display', board);
  background(0, 128, 0);
  generalen();
  textAlign(CENTER, TOP);
  for (y = l = 0, len = ACES.length; l < len; y = ++l) {
    heap = ACES[y];
    showHeap(board, heap, 8, y, 0);
  }
  for (x = m = 0, len1 = HEAPS.length; m < len1; x = ++m) {
    heap = HEAPS[x];
    n = board[heap].length;
    dy = n === 0 ? 0 : min(h / 4, 2 * h / (n - 1));
    showHeap(board, heap, x, 0, dy);
  }
  //for heap,x in PANEL
  //	showHeap board, heap, x, 3, 0
  showInfo();
  noStroke();
  return showDialogue();
};

text3 = function(a, b, c, y) {};

showInfo = function() {
  var i, j, l, len, ref, results, total, x, y;
  fill(64);
  print('textSize');
  textSize(0.1 * (w + h));
  total = general.blackBox.total;
  infoLines[1][1 - 1] = general.maxMoves - general.hist.length;
  infoLines[1][2 - 1] = total[1] - total[2];
  infoLines[1][3 - 1] = 4 * N - countAceCards(board); // cards
  infoLines[1][6 - 1] = total[0];
  infoLines[1][7 - 1] = general.hintsUsed; // hints
  fill(255, 255, 0, 128);
  stroke(0, 128, 0);
  textAlign(CENTER, BOTTOM);
  ref = range(7);
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    x = w * (i + 0.5);
    results.push((function() {
      var len1, m, ref1, results1;
      ref1 = range(2);
      results1 = [];
      for (m = 0, len1 = ref1.length; m < len1; m++) {
        j = ref1[m];
        y = h * (2.8 + 0.2 * j);
        results1.push(text(infoLines[j][i], x, y));
      }
      return results1;
    })());
  }
  return results;
};

generalen = function() {
  textAlign(CENTER, CENTER);
  textSize(0.5 * (w + h));
  stroke(0, 64, 0);
  noFill();
  text('Generalens', 4 * w, 0.5 * h);
  return text('Tidsfördriv', 4 * w, 1.5 * h);
};

showDialogue = function() {
  if (dialogues.length > 0) {
    return (_.last(dialogues)).show();
  }
};

legalMove = function(board, src, dst) {
  var rank1, rank2, suit1, suit2;
  if (indexOf.call(ACES, src) >= 0) {
    return false;
  }
  if (board[src].length === 0) {
    return false;
  }
  if (board[dst].length === 0) {
    return true;
  }
  [suit1, rank1] = unpack(_.last(board[src]));
  [suit2, rank2] = unpack(_.last(board[dst]));
  if (dst === 0 || dst === 1 || dst === 2 || dst === 3) {
    return rank2 + 1 === rank1 && suit1 === suit2;
  } else {
    return rank2 === 1 + rank1;
  }
};

makeMove = function(board, src, dst, record) {
  var rank, suit;
  [suit, rank] = unpack(board[src].pop());
  if (record) {
    general.hist.push([src, dst, 1 + rank]);
  }
  return board[dst].push(pack(suit, rank));
};

// returns text move
undoMove = function([src, dst, antal]) {
  var res;
  res = prettyUndoMove(src, dst, board, antal);
  [board[src], board[dst]] = undoMoveOne(board[src], board[dst], antal);
  return res;
};

undoMoveOne = function(a, b, antal) {
  var rank, suit;
  [suit, rank] = b.pop();
  a.push([suit, rank]);
  return [a, b];
};

//assert [['d9T'],['dJ']], undoMoveOne [],['dJ9'],2
//assert [['d9'],['dJT']], undoMoveOne [],['dJ9'],1
prettyUndoMove = function(src, dst, b, antal) {
  var c1, c2;
  c2 = _.last(b[dst]);
  if (b[src].length > 0) {
    c1 = _.last(b[src]);
    return `${prettyCard2(c2, antal)} to ${prettyCard(c1)}`;
  } else {
    if (indexOf.call(HEAPS, src) >= 0) {
      return `${prettyCard2(c2, antal)} to hole`;
    }
  }
};

// returns destination
oneClick = function(marked, board, sharp = false) {
  var found, heap, holes, l, len, len1, m;
  holes = [];
  found = false;
  alternativeDsts = []; // för att kunna välja mellan flera via Cycle Moves
  for (l = 0, len = ACES.length; l < len; l++) {
    heap = ACES[l];
    if (legalMove(board, marked[0], heap)) {
      if (sharp) {
        makeMove(board, marked[0], heap, true);
      }
      found = true;
      return heap;
    }
  }
  if (!found) { // Går ej att flytta till något ess.
    for (m = 0, len1 = HEAPS.length; m < len1; m++) {
      heap = HEAPS[m];
      if (board[heap].length === 0) {
        if (board[marked[0]].length > 1) { // marked[0] in PANEL or
          holes.push(heap);
        }
      } else {
        if (legalMove(board, marked[0], heap)) {
          alternativeDsts.push(heap);
        }
      }
    }
    if (holes.length > 0) {
      alternativeDsts.push(holes[0]);
    }
    if (alternativeDsts.length > 0) {
      heap = alternativeDsts[0];
      if (sharp) {
        makeMove(board, marked[0], heap, true);
      }
      return heap;
    }
  }
  return marked[0];
};

hitGreen = function(mx, my, mouseX, mouseY) {
  var n, seqs;
  if (my === 3) {
    return false;
  }
  seqs = board[mx + 4];
  n = seqs.length;
  if (n === 0) {
    return true;
  }
  return mouseY > h * (1 + 1 / 4 * (n - 1));
};

mouseReleased = function() {
  released = true;
  return false;
};

mousePressed = function() {
  var dialogue, mx, my;
  if (!released) {
    return false;
  }
  released = false;
  if (!((0 < mouseX && mouseX < width))) {
    return false;
  }
  if (!((0 < mouseY && mouseY < height))) {
    return false;
  }
  mx = Math.floor(mouseX / w);
  my = Math.floor(mouseY / h);
  if (dialogues.length === 1 && dialogues[0].number === 0) {
    dialogues.pop(); // dölj indikatorer
  }
  dialogue = _.last(dialogues);
  if (dialogues.length === 0 || !dialogue.execute(mouseX, mouseY)) {
    if (mx === 8 || hitGreen(mx, my, mouseX, mouseY)) {
      if (dialogues.length === 0) {
        menu1();
      } else {
        dialogues.pop();
      }
      display(board);
      return false;
    }
    dialogues.clear();
    general.handle(mx, my);
  }
  display(board);
  return false;
};

//###### AI-section ########
findAllMoves = function(b) {
  var dst, holeUsed, l, len, len1, m, res, src;
  //print 'findAllMoves',{b}
  srcs = HEAPS.concat([]);
  dsts = ACES.concat(HEAPS);
  res = [];
  for (l = 0, len = srcs.length; l < len; l++) {
    src = srcs[l];
    if (b[src].length === 0) {
      continue;
    }
    holeUsed = false;
    for (m = 0, len1 = dsts.length; m < len1; m++) {
      dst = dsts[m];
      if (src === dst) {
        continue;
      }
      if (!legalMove(b, src, dst)) {
        continue;
      }
      if (b[dst].length === 0) {
        if (holeUsed) {
          continue;
        }
        holeUsed = true;
        res.push([src, dst]);
        continue;
      }
      res.push([src, dst]);
    }
  }
  //print res
  return res;
};

expand = function([aceCards, emptyPiles, b, path]) {
  var b1, dst, key, l, len, move, moves, newPath, res, src;
  //print 'expand',{aceCards,b,path}
  res = [];
  moves = findAllMoves(b);
//comeFrom = {}
  for (l = 0, len = moves.length; l < len; l++) {
    move = moves[l];
    [src, dst] = move;
    b1 = _.cloneDeep(b);
    makeMove(b1, src, dst);
    key = dumpBoard(b1);
    // console.log key
    if (!(key in hash)) {
      newPath = path.concat([move]);
      hash[key] = [newPath, b];
      res.push([countAceCards(b1), countEmptyPiles(b1), b1, path.concat([move])]);
    }
  }
  //print {src,dst,position}
  return res;
};

hint = function() {
  var antal, dst, res, src;
  if (4 * N === countAceCards(board)) {
    return;
  }
  general.hintsUsed++;
  //dialogues.pop()
  res = hintOne();
  if (res || general.hist.length === 0) {
    return;
  }
  // Gick ej att gå framåt, gå bakåt
  [src, dst, antal] = _.last(general.hist);
  menu0(src, dst, '#f00');
  return print('red', dialogues.length);
};

hintOne = function() {
  var cand, dst, hintTime, increment, key, nr, origBoard, path, src;
  hintTime = millis();
  aceCards = countAceCards(board);
  if (aceCards === N * 4) {
    return true;
  }
  cands = [];
  cands.push([
    aceCards,
    general.hist.length,
    board, // antal kort på ässen, antal drag, board
    []
  ]);
  hash = {};
  key = dumpBoard(board);
  path = [];
  hash[key] = [path, board];
  nr = 0;
  cand = null;
  origBoard = _.cloneDeep(board);
  while (nr < 10000 && cands.length > 0 && aceCards < N * 4) {
    nr++;
    cand = cands.pop();
    aceCards = cand[0];
    if (aceCards < N * 4) {
      increment = expand(cand);
      cands = cands.concat(increment);
    }
  }
  //			cands.sort (a,b) -> if a[0] == b[0] then b[1]-a[1] else a[0]-b[0]
  //cands.sort (a,b) -> a[0]-b[0]
  //print cands
  //print N,nr,cands.length,aceCards
  if (aceCards === N * 4) {
    board = cand[2];
    //printAutomaticSolution hash, board
    path = cand[3];
    board = origBoard;
    [src, dst] = path[0];
    //makeMove board,src,dst,true
    //dialogues.pop()
    menu0(src, dst, '#0f0');
    //print "hint: #{int millis()-hintTime} ms"
    return true;
  } else {
    print('hint failed. Should never happen!');
    //print N,nr,cands.length,aceCards,_.size hash
    board = origBoard;
    return false;
  }
};

restart = function() {
  general.hist = [];
  return board = _.cloneDeep(originalBoard);
};

prettyCard2 = function(card, antal) {
  var over, suit, under;
  [suit, under, over] = unpack(card);
  if (antal === 1) {
    return `${SUIT[suit]} ${RANK[over]}`;
  } else {
    if (under < over) {
      return `${SUIT[suit]} ${RANK[over]}..${RANK[over - antal + 1]}`;
    } else {
      return `${SUIT[suit]} ${RANK[over]}..${RANK[over + antal - 1]}`;
    }
  }
};

prettyCard = function(card, antal = 2) {
  var rank, suit;
  [suit, rank] = unpack(card);
  if (antal === 1) {
    return `${RANK[rank]}`;
  } else {
    return `${SUIT[suit]} ${RANK[rank]}`;
  }
};

assert("club A", prettyCard(pack(0, 0)));

assert("club T", prettyCard(pack(0, 9)));

assert("heart J", prettyCard(pack(1, 10)));

assert("spade Q", prettyCard(pack(2, 11)));

assert("diamond K", prettyCard(pack(3, 12)));

assert("3", prettyCard(pack(3, 2), 1));

//print 'prettyCard ok'
prettyMove = function(src, dst, b) {
  var c1, c2;
  c1 = _.last(b[src]);
  if (b[dst].length > 0) {
    c2 = _.last(b[dst]);
    return `${prettyCard(c1)} to ${prettyCard(c2, 1)}`;
  } else {
    if (indexOf.call(HEAPS, dst) >= 0) {
      return `${prettyCard(c1)} to hole`;
    } else {
      return `${prettyCard(c1)} to panel`;
    }
  }
};

printAutomaticSolution = function(hash, b) {
  var dst, index, key, l, len, path, s, solution, src;
  key = dumpBoard(b);
  solution = [];
  while (key in hash) {
    [path, b] = hash[key];
    solution.push(hash[key]);
    key = dumpBoard(b);
  }
  solution.reverse();
  s = 'Automatic Solution:';
  for (index = l = 0, len = solution.length; l < len; index = ++l) {
    [path, b] = solution[index];
    [src, dst] = _.last(path);
    s += `\n${index}: ${prettyMove(src, dst, b)} (${src} to ${dst})`;
  }
  return print(s);
};

printManualSolution = function() {
  var antal, b, dst, index, l, len, ref, s, src;
  b = _.cloneDeep(originalBoard);
  s = 'Manual Solution:';
  ref = general.hist;
  for (index = l = 0, len = ref.length; l < len; index = ++l) {
    [src, dst, antal] = ref[index];
    s += `\n${index}: ${prettyMove(src, dst, b)}`;
    makeMove(b, src, dst, false);
  }
  return print(s);
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023\038-Castle\coffee\sketch.coffee