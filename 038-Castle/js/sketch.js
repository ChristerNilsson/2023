// Generated by CoffeeScript 2.5.1
  // Vectorized Playing Cards 2.0 - http://sourceforge.net/projects/vector-cards/
  // Copyright 2015 - Chris Aguilar - conjurenation@gmail.com
  // Licensed under LGPL 3 - www.gnu.org/copyleft/lesser.html

//  4  5  6  7  8  9 10 11  0 
  //  4  5  6  7  8  9 10 11  1
  //  4  5  6  7  8  9 10 11  2 
  //  4  5  6  7  8  9 10 11  3
  //  4  5  6  7  8  9 10 11
  //  4  5  6  7  8  9 10 11
  /*
  Korten benämnes :
    abcdefghijklm hjärter
    nopqrstuvwxyz spader
    ABCDEFGHIJKLM ruter
    NOPQRSTUVWXYZ klöver
    A23456789TJQK

  Startposition:
    a n A N (fyra äss. Observera att man bara behöver lagra högsta kortet)
    egUSBy (en hög med korten h5 h7 c8 c6 d2 sQ. Åtta högar behövs)
    Totalt 52 + 11 = 63 tecken

  Slutposition:
    m z M Z + några blanka separatorer
    Totalt 4 + 11 = 15 tecken.

  Med hjälp av dessa strängar kan man förhindra att man besöker redan besökta noder.

  */
var ACES, BlackBox, GREEN, General, H, HEAPS, LIMIT, LONG, N, OFFSETX, RANK, RED, Rank, SUIT, Suit, W, YELLOW, aceCards, alternativeDsts, assert, backs, board, calcVip, cands, cards, compress, compressOne, copyToClipboard, countAceCards, countEmptyPiles, display, done, dsts, dumpBoard, expand, faces, fakeBoard, findAllMoves, general, generalen, getCenter, getParameters, h, hash, hint, hintOne, hitGreen, infoLines, keyPressed, legalMove, makeBoard, makeLink, makeMove, menu0, menu1, menu2, mousePressed, mouseReleased, myRandom, myShuffle, newGame, oneClick, originalBoard, pack, packAll, preload, prettyCard, prettyCard2, prettyMove, prettyUndoMove, prnt, prntAutomaticprnt, prntManualprnt, range, readBoard, recurse, released, restart, searchStart, setup, showDialogue, showHeap, showInfo, srcs, startCompetition, text3, undoMove, undoMoveOne, unpack, unpackAll, vip, w,
  indexOf = [].indexOf;

N = 13;

ACES = [0, 1, 2, 3];

HEAPS = [4, 5, 6, 7, 8, 9, 10, 11];

//comeFrom = {}
Suit = 'chsd';

Rank = "A23456789TJQK";

SUIT = "club heart spade diamond".split(' ');

RANK = "A23456789TJQK";

LONG = " Ace Two Three Four Five Six Seven Eight Nine Ten Jack Queen King".split(' ');

done = [];

RED = 'RED'; // timeout

YELLOW = 'YELLOW'; // in process

GREEN = 'GREEN'; // solution found


// Konstanter för cards.png
OFFSETX = 468;

W = 263.25;

H = 352;

w = null;

h = null;

LIMIT = 1000; // Maximum steps considered before giving up. 1000 is too low, hint fails sometimes.

searchStart = null;

faces = null;

backs = null;

board = null;

cards = null;

cands = null;

hash = null;

aceCards = 4;

originalBoard = null;

startCompetition = null;

srcs = null;

dsts = null;

vip = [];

alternativeDsts = [];

infoLines = [];

general = null;

released = true;

prnt = console.log;

range = _.range;

Array.prototype.clear = function() {
  return this.length = 0;
};

assert = function(a, b, msg = 'Assert failure') {
  if (!_.isEqual(a, b)) {
    prnt(msg);
    prnt("  ", a);
    return prnt("  ", b);
  }
};

getParameters = function(h = window.location.href) {
  var arr, f, s;
  h = decodeURI(h);
  arr = h.split('?');
  if (arr.length !== 2) {
    return {};
  }
  s = arr[1];
  if (s === '') {
    return {};
  }
  return _.fromPairs((function() {
    var l, len, ref, results;
    ref = s.split('&');
    results = [];
    for (l = 0, len = ref.length; l < len; l++) {
      f = ref[l];
      results.push(f.split('='));
    }
    return results;
  })());
};

myRandom = function(a, b) {
  var r, x;
  x = 10000 * Math.sin(general.fastSeed++);
  r = x - Math.floor(x);
  return a + Math.floor((b - a) * r);
};

myShuffle = function(array) {
  var i, j, l, len, n, ref, results, value;
  n = array.length;
  ref = range(n);
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    //j = myRandom i, n
    j = _.random(i, n - 1, false);
    //prnt j
    value = array[i];
    array[i] = array[j];
    results.push(array[j] = value);
  }
  return results;
};

copyToClipboard = function(txt) {
  var copyText;
  copyText = document.getElementById("myClipboard");
  copyText.value = txt;
  copyText.select();
  return document.execCommand("copy");
};

makeLink = function() {
  var index, url;
  url = window.location.href + '?';
  index = url.indexOf('?');
  url = url.substring(0, index);
  return url + '?cards=' + general.slowSeed;
};

BlackBox = class BlackBox { // Avgör om man lyckats eller ej. Man får tillgodogöra sig tidigare drag.
  constructor() {
    this.clr();
  }

  clr() {
    this.total = [
      0,
      0,
      0 // [time,computer,human]
    ];
    return this.count = 0;
  }

  //@success = false 
  show() {} // prnt 'BlackBox',@count,@total

};

General = class General {
  constructor() {
    this.slowSeed = 1; // stored externally
    this.fastSeed = 1; // used internally
    this.start = null;
    this.maxMoves = null;
    this.hist = null;
    this.hintsUsed = 0;
    this.blackBox = new BlackBox();
    this.clr();
    this.getLocalStorage();
  }

  success() {
    return this.blackBox.total[2] + this.hist.length <= this.blackBox.total[1] + this.maxMoves;
  }

  probe(time) {
    var total;
    if (!this.success()) {
      return false;
    }
    total = this.blackBox.total;
    total[0] += time;
    total[1] += this.maxMoves;
    total[2] += this.hist.length;
    return true;
  }

  getLocalStorage() {
    //prnt 'direct',localStorage.Generalen
    if (localStorage.Generalen != null) {
      hash = JSON.parse(localStorage.Generalen);
    } else {
      hash = {};
    }
    if (5 !== _.size(hash)) {
      hash = {
        slowSeed: 1,
        fastSeed: 1,
        total: [0, 0, 0],
        hintsUsed: 0
      };
    }
    
    //prnt 'hash',JSON.stringify hash
    this.slowSeed = hash.slowSeed;
    this.fastSeed = hash.fastSeed;
    this.blackBox.total = hash.total;
    return this.hintsUsed = hash.hintsUsed;
  }

  //prnt 'get', JSON.stringify hash
  putLocalStorage() {
    var s;
    s = JSON.stringify({
      slowSeed: this.slowSeed,
      fastSeed: this.fastSeed,
      total: this.blackBox.total,
      hintsUsed: this.hintsUsed
    });
    localStorage.Generalen = s;
    return prnt('put', s);
  }

  clr() {
    this.blackBox.clr();
    return this.timeUsed = 0;
  }

  //@putLocalStorage()
  totalRestart() {
    this.slowSeed = int(random(65536));
    return this.clr();
  }

  handle(mx, my) {
    var heap, marked, timeUsed;
    marked = [mx + (my >= 3 ? 12 : 4), my];
    heap = oneClick(marked, board, true);
    if (this.timeUsed === 0 && 4 * N === countAceCards(board)) {
      timeUsed = Math.floor((millis() - this.start) / 1000);
      if (this.probe(timeUsed)) {
        this.timeUsed = timeUsed;
        this.blackBox.show();
      }
      this.putLocalStorage();
      return prntManualprnt();
    }
  }

};

preload = function() {
  faces = loadImage('cards/Color_52_Faces_v.2.0.png');
  return backs = loadImage('cards/Playing_Card_Backs.png');
};

pack = function(suit, rank) {
  return Suit[suit] + RANK[rank];
};

assert('cA', pack(0, 0));

assert('dA', pack(3, 0));

assert('d2', pack(3, 1));

assert('hQ', pack(1, 11));

assert('hJ', pack(1, 10));

//prnt 'pack ok'
packAll = function(cards) {
  return _.map(cards, function(card) {
    return pack(card[0], card[1]);
  });
};

unpack = function(n) {
  var rank, suit;
  suit = Suit.indexOf(n[0]);
  rank = RANK.indexOf(n[1]);
  return [suit, rank];
};

assert([0, 0], unpack('cA'));

assert([3, 0], unpack('dA'));

assert([1, 11], unpack('hQ'));

assert([1, 10], unpack('hJ'));

//prnt 'unpack ok'
unpackAll = function(cards) {
  return _.map(cards.split(' '), function(card) {
    return unpack(card);
  });
};

assert([[0, 0], [3, 1]], unpackAll('cA d2'));

compress = function(board) {
  var heap, l, len, results;
  results = [];
  for (l = 0, len = HEAPS.length; l < len; l++) {
    heap = HEAPS[l];
    results.push(board[heap] = compressOne(board[heap]));
  }
  return results;
};

compressOne = function(cards) {
  return cards;
};

countAceCards = function(b) {
  var heap, l, len, res;
  res = 0;
  for (l = 0, len = ACES.length; l < len; l++) {
    heap = ACES[l];
    res += b[heap].length;
  }
  return res;
};

countEmptyPiles = function(b) {
  var heap, l, len, res;
  res = 0;
  for (l = 0, len = HEAPS.length; l < len; l++) {
    heap = HEAPS[l];
    if (b[heap].length === 0) {
      res++;
    }
  }
  return res;
};

dumpBoard = function(board) {
  var heap;
  return ((function() {
    var l, len, results;
    results = [];
    for (l = 0, len = board.length; l < len; l++) {
      heap = board[l];
      results.push(heap.join(' '));
    }
    return results;
  })()).join('|');
};

makeBoard = function() {
  var card, heap, i, l, len, len1, len2, len3, len4, m, o, p, q, rank, ref, ref1, ref2, ref3, suit;
  //N = 13
  cards = [];
  ref = range(4);
  for (l = 0, len = ref.length; l < len; l++) {
    suit = ref[l];
    ref1 = range(1, N);
    // 2..K
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      rank = ref1[m];
      cards.push(pack(suit, rank));
    }
  }
  //prnt cards

  //general.fastSeed++ # nödvändig?
  myShuffle(cards);
  board = [];
  ref2 = range(4 + 8);
  for (o = 0, len2 = ref2.length; o < len2; o++) {
    i = ref2[o];
    board.push([]);
  }
  ref3 = range(4);
  for (heap = p = 0, len3 = ref3.length; p < len3; heap = ++p) {
    suit = ref3[heap];
    board[heap].push(pack(suit, 0)); // Ess
  }
  for (i = q = 0, len4 = cards.length; q < len4; i = ++q) {
    card = cards[i];
    heap = 4 + i % 8;
    board[heap].push(card);
  }
  //prnt board
  return board;
};

readBoard = function(b) {
  var heap, l, len, ref, results;
  ref = b.split('|');
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    heap = ref[l];
    results.push(heap === '' ? [] : heap.split(' '));
  }
  return results;
};

fakeBoard = function() {
  board = readBoard("cA|hA|sA|dA|hT c3 s4 c4 h2 s2|c5 s9 hJ cT sQ d2|dQ h4 cK s8 c2 sJ|h6 cQ s3 d8 h5 s7|c6 d3 s5 h7 h3 d5|h9 d7 dK hQ d6 sK|h8 d9 c8 c9 c7 d4|cJ hK s6 dJ sT dT"); // 111418466
  
  //N = 13
  //board =  readBoard "cA|hA|sA|dA|c4 dJ c6 h2 h3 sJ|hQ c8 s5 sT h8 h4|c7 s7 h6 s9 s2 dK|d8 sK cT h7 cK d3|cQ d2 c5 d5 cJ s4|d6 hK h5 dQ c2 hT|c3 c9 hJ d7 sQ d4|h9 d9 s3 dT s6 s8" # 452200020
  //vip = '4 c6 4 h3 5 sT 6 s9 7 cK 8 d5 8 cJ 9 dQ 9 hT 10 c9 11 dT 11 s6 11 s8'

  //board =  readBoard "cA|hA|sA|dA|c2 c3|c4 c5|d2 d3|d4 d5|s2 s3|s4 s5|h2 h3|h4 h5" # ingen lösning
  //board =  readBoard "cA|hA|sA|dA|c3 c2|c5 c4|d3 d2|d5 d4|s3 s2|s5 s4|h3 h2|h5 h4" # lösning direkt

  // N = 5
  // board =  readBoard "cA|hA|sA|dA|s4 c4|s3 d5|h5 c3|s5 c5|d4 d3|h4 d2|h2 h3|s2 c2" # ett VIP card
  // vip = '10 h3'

  // N = 9
  // board =  readBoard "cA|hA|sA|dA|h8 c8 s2 c4|d4 d8 s6 c2|c3 d9 h6 s5|s8 c6 c7 s7|h7 s4 d3 c5|s3 d6 h2 s9|d2 h3 h4 d5|d7 h5 h9 c9"
  // vip = []

  // N = 9
  // board =  readBoard "cA|hA|sA|dA|d6 s9 s4 c6|c8 s5 h7 c3|s2 d7 h4 s8|h6 h8 d3 s7|s3 d4 d2 h5|c9 c7 c2 h2|c5 c4 d9 d5|h9 d8 s6 h3"
  // vip = []

  // N = 7
  // board =  readBoard "cA|hA|sA|dA|s5 d2 d7|h7 c6 c4|h6 s2 c2|c7 d3 d5|d4 s6 s7|c3 s3 h3|c5 s4 h4|d6 h5 h2"
  // vip = []

  // N = 5 # 104 drag. Dock manuellt 20 drag
  // board =  readBoard "cA|hA|sA|dA|c3 c5|h5 h2|d5 d4|s4 d2|c4 c2|s2 s5|d3 s3|h3 h4"
  // vip = []

  // N = 10
  // board =  readBoard "cA|hA|sA|dA|d2 d3 c7 s6 s9|s2 d5 c5 s8 d6|c4 h8 hT d9 h3|d4 sT s5 s4 d8|s3 cT h5 h7|h9 c6 c2 s7|dT c3 c8 h6|h2 d7 h4 c9"
  // vip = []

  // N=11
  // board =  readBoard "cA|hA|sA|dA|d7 s5 sT h8 dT|cT c5 sJ h7 h9|h3 h4 dJ d2 cJ|h2 c9 c4 h6 d9|d8 s7 s9 c2 c8|s8 c3 c7 s3 d6|s2 s6 s4 d3 hJ|d5 h5 d4 c6 hT"
  // vip = []

  // N=13 # lösbar
  // board =  readBoard "cA|hA|sA|dA|h7 c5 d4 d8 c8 h6|h3 h2 c3 h8 s2 cT|h4 sJ h9 d6 cK c7|dJ d5 sQ c6 s4 d9|hQ d7 sK d3 h5 dQ|c4 dT cQ s7 hT cJ|c2 s5 s8 sT s6 d2|s9 hJ s3 hK dK c9"
  // vip = []
  N = 13;
  board = readBoard("cA|hA|sA s2|dA d2 d3 d4||h3 h2 c3 h8 c7 h6 c5|h4 sJ h9 d6 cK|dJ d5 sQ c6 s4 d9 c8 h7|hQ d7 sK dQ|c4 dT cQ s7 hT cJ cT|c2 s5 s8 sT s6 h5|s9 hJ s3 hK dK c9 d8");
  vip = [];
  return prnt(board);
};

recurse = function(b, target, level = 10, done = []) {
  var dst, dt, key, l, len, moves, res, solution, src;
  console.log('recurse', target, level, dumpBoard(b));
  dt = new Date() - searchStart;
  if (dt > 1000) {
    console.log('timeout', dt);
    return RED;
  }
  if (level === 0) {
    return YELLOW;
  }
  //if level > 10 then console.log level
  key = dumpBoard(b);
  // if key in done then return false
  //done = done.concat key

  //prnt 'recurse',level,done.length,  _.map b, (pile) -> pile.length
  //prnt key
  if (b[0].length + b[1].length + b[2].length + b[3].length === target) {
    solution = _.cloneDeep(done);
    //console.log dumpBoard b
    res = _.cloneDeep(b);
    //console.log 'xxx',res
    return res;
  }
  moves = findAllMoves(b, level);
  for (l = 0, len = moves.length; l < len; l++) {
    [src, dst] = moves[l];
    //prnt src,dst
    b[dst].push(b[src].pop());
    done.push(key);
    if (!done.includes(dumpBoard(b))) {
      res = recurse(b, target, level - 1, done);
    }
    done.pop();
    b[src].push(b[dst].pop());
    //console.log 'yyy',res
    if (res === RED) {
      return res;
    }
    if (res !== YELLOW && res !== void 0) {
      console.log('GREEN', dt);
      return res;
    }
  }
  //console.log YELLOW
  return YELLOW;
};

newGame = function() {
  var cand, cands2, depth, emptyPiles, i, increment, l, len, len1, len2, level, m, nr, o, origBoard, ref, ref1, res, start, startTotal, target;
  general.start = millis();
  general.hist = [];
  done = [];
  fakeBoard();
  origBoard = _.cloneDeep(board);
  prnt(dumpBoard(board));
  startTotal = new Date();
  //return
  aceCards = countAceCards(board) - 4;
  ref = range(aceCards + 0, 4 * (N - 1));
  for (l = 0, len = ref.length; l < len; l++) {
    target = ref[l];
    start = new Date();
    depth = 0;
    res = YELLOW;
    while (res === YELLOW) {
      //console.log res
      depth++;
      searchStart = new Date();
      res = recurse(board, 5 + target, depth);
      //console.log 'newGame',res
      if (res === RED || depth > 100) {
        console.log('uppgivet', res, depth);
        console.log(board);
        board = origBoard;
        return;
      }
      if (res !== RED && res !== YELLOW) {
        //console.log 'res',res
        board = _.cloneDeep(res);
        break;
      }
    }
    prnt(target, new Date() - start);
  }
  //prnt dumpBoard board
  console.log('N:', N, 'Total time:', new Date() - startTotal, 'ms');
  board = origBoard;
  return;
  ref1 = range(1);
  for (m = 0, len1 = ref1.length; m < len1; m++) {
    i = ref1[m];
    fakeBoard();
    general.hintsUsed = 0;
    originalBoard = _.cloneDeep(board);
    aceCards = countAceCards(board);
    cands = [];
    cands.push([
      aceCards,
      0,
      board, // antal kort på ässen, antal drag, boa
      []
    ]);
    hash = {};
    nr = 0;
    cand = null;
    prnt('newGame', nr, LIMIT, cands.length, aceCards, N);
    level = 0;
    while (aceCards !== N * 4 && cands.length > 0 && level < 200) {
      level++;
      cands2 = [];
      for (o = 0, len2 = cands.length; o < len2; o++) {
        cand = cands[o];
        aceCards = cand[0];
        emptyPiles = cand[1];
        if (aceCards === N * 4) {
          break;
        }
        increment = expand(cand);
        cands2 = cands2.concat(increment);
      }
      cands = cands2;
      cands.sort(function(a, b) {
        return b[0] - a[0];
      });
      cands = cands.slice(0, 2000); // större ger längre körning och kortare lösning.
      if (cands.length > 0) {
        prnt('candsx', level, cands.length, cands[0][0]);
      }
    }
    //for cand in cands
    //	prnt JSON.stringify cand
    if (aceCards === N * 4) {
      prnt(JSON.stringify(dumpBoard(originalBoard)));
      board = cand[2];
      prnt(makeLink());
      prntAutomaticprnt(hash, board);
      board = _.cloneDeep(originalBoard);
      prnt(`${int(millis() - general.start)} ms`);
      general.start = millis();
      general.maxMoves = int(cand[1]);
      return;
    }
  }
};

setup = function() {
  var canvas, params;
  canvas = createCanvas(innerWidth - 0.5, innerHeight - 0.5);
  canvas.position(0, 0); // hides text field used for clipboard copy.
  general = new General();
  w = width / 9;
  h = height / 4;
  angleMode(DEGREES);
  params = getParameters();
  if ('cards' in params) {
    general.slowSeed = parseInt(params.cards);
  }
  startCompetition = millis();
  infoLines.push('Moves Bonus Cards   Time Hints'.split(' '));
  infoLines.push('0 0 0   0 0'.split(' '));
  newGame();
  return display(board);
};

keyPressed = function() {
  if (key === 'X') {
    N = 7;
    board = "cA7|hA4|sA3|dA2||h6|s5 d6||h5 d5||s4 s6|d34||d7|s7|h7||||";
    general.hist = [[12, 0, 1], [5, 1, 1], [8, 3, 1], [9, 1, 1], [11, 1, 1], [16, 2, 1], [17, 0, 1], [10, 0, 1], [9, 0, 1], [18, 2, 1], [19, 0, 1], [7, 0, 1]];
    board = readBoard(board);
    prnt(board);
  }
  return display(board);
};

// returnerar övre, vänstra koordinaten för översta kortet i högen som [x,y]
getCenter = function(heap) {
  var dy, n;
  if (indexOf.call(ACES, heap) >= 0) {
    return [int(8 * w), int(heap * h)];
  }
  //	if heap in PANEL then return [int((heap-12)*w), int(3*h)]
  if (indexOf.call(HEAPS, heap) >= 0) {
    n = board[heap].length;
    dy = n === 0 ? 0 : min(h / 4, 2 * h / (n - 1));
    return [int((heap - 4) * w), int((n - 1) * dy)];
  }
};

menu0 = function(src, dst, col) {
  var dialogue, r, x, y;
  dialogue = new Dialogue(0, int(w / 2), int(h / 2), int(0.10 * h), col);
  r = int(0.05 * height);
  [x, y] = getCenter(src);
  dialogue.add(new Button('From', x, y, r, function() {
    return dialogues.pop();
  }));
  [x, y] = getCenter(dst);
  return dialogue.add(new Button('To', x, y, r, function() {
    return dialogues.pop();
  }));
};

menu1 = function() {
  var dialogue, r1, r2;
  dialogue = new Dialogue(1, int(4 * w), int(1.5 * h), int(0.15 * h));
  r1 = 0.25 * height;
  r2 = 0.085 * height;
  dialogue.clock(' ', 6, r1, r2, 90 + 360 / 12);
  dialogue.buttons[0].info('Undo', general.hist.length > 0, function() {
    var antal, dst, src;
    if (general.hist.length > 0) {
      [src, dst, antal] = _.last(general.hist);
      dialogues.pop();
      undoMove(general.hist.pop());
      return menu0(src, dst, '#ff0');
    } else {
      return dialogues.pop();
    }
  });
  dialogue.buttons[1].info('Hint', true, function() {
    dialogues.pop();
    return hint(); // Lägger till menu0
  });
  dialogue.buttons[2].info('Cycle Move', alternativeDsts.length > 1, function() {
    var antal, dst, heap, src;
    alternativeDsts.push(alternativeDsts.shift());
    [src, dst, antal] = general.hist.pop();
    undoMove([src, dst, antal]);
    heap = alternativeDsts[0];
    return makeMove(board, src, heap, true);
  });
  // dialogues.pop() # do not pop!
  dialogue.buttons[3].info('Next', general.success(), function() {
    newGame();
    general.timeUsed = 0;
    general.putLocalStorage();
    return dialogues.pop();
  });
  dialogue.buttons[4].info('Help', true, function() {
    return window.open("https://github.com/ChristerNilsson/Lab/tree/master/2018/056-GeneralensTidsf%C3%B6rdriv#generalens-tidsf%C3%B6rdriv");
  });
  return dialogue.buttons[5].info('More...', true, function() {
    return menu2();
  });
};

menu2 = function() {
  var dialogue, r1, r2;
  dialogue = new Dialogue(2, int(4 * w), int(1.5 * h), int(0.15 * h));
  r1 = 0.25 * height;
  r2 = 0.11 * height;
  dialogue.clock(' ', 3, r1, r2, 90 + 360 / 6);
  dialogue.buttons[0].info('Restart', true, function() {
    restart();
    return dialogues.clear();
  });
  dialogue.buttons[1].info('Total Restart', true, function() {
    general.totalRestart();
    newGame(); // 0
    return dialogues.clear();
  });
  return dialogue.buttons[2].info('Link', true, function() {
    var link;
    link = makeLink();
    copyToClipboard(link);
    //msg = 'Link copied to clipboard'
    return dialogues.clear();
  });
};

showHeap = function(board, heap, x, y, dy) { // dy kan vara både pos och neg
  var card, k, l, len, n, rank, ref, suit;
  n = board[heap].length;
  x = x * w;
  if (n > 0) {
    y = y * h + y * dy;
    ref = board[heap];
    for (k = l = 0, len = ref.length; l < len; k = ++l) {
      card = ref[k];
      [suit, rank] = unpack(card);
      //dr = if under < over then 1 else -1
      //for rank in range under,over+dr,dr
      noFill();
      stroke(0);
      image(faces, x, y, w, h * 1.1, OFFSETX + W * rank, 1092 + H * suit, 225, H - 1);
      y += dy;
    }
    // visa eventuellt baksidan
    card = _.last(board[heap]);
    [suit, rank] = unpack(card);
    if (indexOf.call(ACES, heap) >= 0 && rank === N - 1) {
      return image(backs, x, y, w, h * 1.1, OFFSETX + 860, 1092 + 622, 225, H - 1);
    }
  }
};

display = function(board) {
  var dy, heap, l, len, len1, m, n, x, y;
  //prnt 'display',board
  background(0, 128, 0);
  generalen();
  textAlign(CENTER, TOP);
  for (y = l = 0, len = ACES.length; l < len; y = ++l) {
    heap = ACES[y];
    showHeap(board, heap, 8, y, 0);
  }
  for (x = m = 0, len1 = HEAPS.length; m < len1; x = ++m) {
    heap = HEAPS[x];
    n = board[heap].length;
    dy = n === 0 ? 0 : min(h / 4, 2 * h / (n - 1));
    showHeap(board, heap, x, 0, dy);
  }
  //for heap,x in PANEL
  //	showHeap board, heap, x, 3, 0
  showInfo();
  noStroke();
  return showDialogue();
};

text3 = function(a, b, c, y) {};

showInfo = function() {
  var i, j, l, len, ref, results, total, x, y;
  fill(64);
  prnt('textSize');
  textSize(0.1 * (w + h));
  total = general.blackBox.total;
  infoLines[1][1 - 1] = general.maxMoves - general.hist.length;
  infoLines[1][2 - 1] = total[1] - total[2];
  infoLines[1][3 - 1] = 4 * N - countAceCards(board); // cards
  infoLines[1][6 - 1] = total[0];
  infoLines[1][7 - 1] = general.hintsUsed; // hints
  fill(255, 255, 0, 128);
  stroke(0, 128, 0);
  textAlign(CENTER, BOTTOM);
  ref = range(7);
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    x = w * (i + 0.5);
    results.push((function() {
      var len1, m, ref1, results1;
      ref1 = range(2);
      results1 = [];
      for (m = 0, len1 = ref1.length; m < len1; m++) {
        j = ref1[m];
        y = h * (2.8 + 0.2 * j);
        results1.push(text(infoLines[j][i], x, y));
      }
      return results1;
    })());
  }
  return results;
};

generalen = function() {
  textAlign(CENTER, CENTER);
  textSize(0.5 * (w + h));
  stroke(0, 64, 0);
  noFill();
  text('Generalens', 4 * w, 0.5 * h);
  return text('Tidsfördriv', 4 * w, 1.5 * h);
};

showDialogue = function() {
  if (dialogues.length > 0) {
    return (_.last(dialogues)).show();
  }
};

legalMove = function(board, src, dst) {
  var rank1, rank2, suit1, suit2;
  if (indexOf.call(ACES, src) >= 0) {
    return false;
  }
  if (board[src].length === 0) {
    return false;
  }
  if (board[dst].length === 0) {
    return true;
  }
  [suit1, rank1] = unpack(_.last(board[src]));
  [suit2, rank2] = unpack(_.last(board[dst]));
  if (dst === 0 || dst === 1 || dst === 2 || dst === 3) {
    return rank2 + 1 === rank1 && suit1 === suit2;
  } else {
    return rank2 === 1 + rank1;
  }
};

makeMove = function(board, src, dst, record) {
  var rank, suit;
  [suit, rank] = unpack(board[src].pop());
  if (record) {
    general.hist.push([src, dst, 1 + rank]);
  }
  return board[dst].push(pack(suit, rank));
};

// returns text move
undoMove = function([src, dst, antal]) {
  var res;
  res = prettyUndoMove(src, dst, board, antal);
  [board[src], board[dst]] = undoMoveOne(board[src], board[dst], antal);
  return res;
};

undoMoveOne = function(a, b, antal) {
  var rank, suit;
  [suit, rank] = b.pop();
  a.push([suit, rank]);
  return [a, b];
};

//assert [['d9T'],['dJ']], undoMoveOne [],['dJ9'],2
//assert [['d9'],['dJT']], undoMoveOne [],['dJ9'],1
prettyUndoMove = function(src, dst, b, antal) {
  var c1, c2;
  c2 = _.last(b[dst]);
  if (b[src].length > 0) {
    c1 = _.last(b[src]);
    return `${prettyCard2(c2, antal)} to ${prettyCard(c1)}`;
  } else {
    if (indexOf.call(HEAPS, src) >= 0) {
      return `${prettyCard2(c2, antal)} to hole`;
    }
  }
};

// returns destination
oneClick = function(marked, board, sharp = false) {
  var found, heap, holes, l, len, len1, m;
  holes = [];
  found = false;
  alternativeDsts = []; // för att kunna välja mellan flera via Cycle Moves
  for (l = 0, len = ACES.length; l < len; l++) {
    heap = ACES[l];
    if (legalMove(board, marked[0], heap)) {
      if (sharp) {
        makeMove(board, marked[0], heap, true);
      }
      found = true;
      return heap;
    }
  }
  if (!found) { // Går ej att flytta till något ess.
    for (m = 0, len1 = HEAPS.length; m < len1; m++) {
      heap = HEAPS[m];
      if (board[heap].length === 0) {
        if (board[marked[0]].length > 1) { // marked[0] in PANEL or
          holes.push(heap);
        }
      } else {
        if (legalMove(board, marked[0], heap)) {
          alternativeDsts.push(heap);
        }
      }
    }
    if (holes.length > 0) {
      alternativeDsts.push(holes[0]);
    }
    if (alternativeDsts.length > 0) {
      heap = alternativeDsts[0];
      if (sharp) {
        makeMove(board, marked[0], heap, true);
      }
      return heap;
    }
  }
  return marked[0];
};

hitGreen = function(mx, my, mouseX, mouseY) {
  var n, seqs;
  if (my === 3) {
    return false;
  }
  seqs = board[mx + 4];
  n = seqs.length;
  if (n === 0) {
    return true;
  }
  return mouseY > h * (1 + 1 / 4 * (n - 1));
};

mouseReleased = function() {
  released = true;
  return false;
};

mousePressed = function() {
  var dialogue, mx, my;
  if (!released) {
    return false;
  }
  released = false;
  if (!((0 < mouseX && mouseX < width))) {
    return false;
  }
  if (!((0 < mouseY && mouseY < height))) {
    return false;
  }
  mx = Math.floor(mouseX / w);
  my = Math.floor(mouseY / h);
  if (dialogues.length === 1 && dialogues[0].number === 0) {
    dialogues.pop(); // dölj indikatorer
  }
  dialogue = _.last(dialogues);
  if (dialogues.length === 0 || !dialogue.execute(mouseX, mouseY)) {
    if (mx === 8 || hitGreen(mx, my, mouseX, mouseY)) {
      if (dialogues.length === 0) {
        menu1();
      } else {
        dialogues.pop();
      }
      display(board);
      return false;
    }
    dialogues.clear();
    general.handle(mx, my);
  }
  display(board);
  return false;
};

//###### AI-section ########
calcVip = function(cards) {
  var highest, l, len, rank, suit;
  highest = [0, 0, 0, 0];
  for (l = 0, len = cards.length; l < len; l++) {
    [suit, rank] = cards[l];
    if (highest[suit] !== 0 && rank > highest[suit]) {
      //prnt 'calcVip',packAll(cards),true
      return true;
    }
    highest[suit] = rank;
  }
  //prnt 'calcVip',packAll(cards),false
  return false;
};

assert(true, calcVip(unpackAll('s5 d2 d7')));

assert(false, calcVip(unpackAll('s5 d6 s4')));

// Börja med längsta kön
// Prioritera viphögar. Ex d7 blockar d2
// beräkna vip on the fly
// jämför med ässhögens översta kort
findAllMoves = function(b, level) {
  var dst, l, len, len1, m, prio, src;
  //prnt 'findAllMoves',{b}
  srcs = HEAPS.concat([]);
  dsts = ACES.concat(HEAPS);
  //res = []
  prio = [];
  for (l = 0, len = srcs.length; l < len; l++) {
    src = srcs[l];
    if (b[src].length === 0) {
      continue;
    }
    vip = calcVip(b[src]);
// prioCard = false # vip.includes src + ' ' + _.last(b[src])
//prnt prioCard, src + ' ' + _.last(b[src]), vip
    for (m = 0, len1 = dsts.length; m < len1; m++) {
      dst = dsts[m];
      if (src === dst) {
        continue;
      }
      if (!legalMove(b, src, dst)) {
        continue;
      }
      if (b[src].length === 1 && b[dst].length === 0) {
        continue;
      }
      if (dst === 0 || dst === 1 || dst === 2 || dst === 3) {
        prio.push([src, dst, 999]);
      } else {
        if (vip) {
          prio.push([src, dst, b[src].length * 10]);
        } else {
          prio.push([src, dst, b[src].length]);
        }
      }
    }
  }
  prio = prio.sort(function(a, b) {
    return b[2] - a[2];
  });
  // prnt JSON.stringify prio
  prio = _.map(prio, function(item) {
    return item.slice(0, 2);
  });
  // prnt JSON.stringify prio
  return prio;
};

// findAllMoves = (b,level) ->
// 	# undertrycker inte flytt till ointressanta hål just nu.
// 	# endast ett hål är intressant
// 	#prnt 'findAllMoves',{b}
// 	srcs = HEAPS.concat []
// 	dsts = ACES.concat HEAPS
// 	#res = []

// 	prio = []

// 	for src in srcs
// 		if b[src].length == 0 then continue
// 		prioCard = false # vip.includes src + ' ' + _.last(b[src])
// 		#prnt prioCard, src + ' ' + _.last(b[src]), vip
// 		for dst in dsts
// 			if src == dst then continue
// 			if not legalMove b,src,dst then continue
// 			if dst in [0,1,2,3]
// 				prio.push [src,dst,0]
// 			else if b[dst].length > 0
// 				if prioCard then prio.push [src,dst,1] else prio.push [src,dst,2]
// 			else 
// 				if prioCard then prio.push [src,dst,3] else prio.push [src,dst,4]

// 	prio = prio.sort (a,b) -> a[2] - b[2]
// 	#prnt JSON.stringify prio
// 	prio = _.map prio, (item) -> item.slice 0,2
// 	#prnt JSON.stringify prio
// 	prio
// 	#prnt 'res',level, JSON.stringify res
expand = function([aceCards, emptyPiles, b, path]) {
  var b1, dst, key, l, len, move, moves, newPath, res, src;
  //prnt 'expand',{aceCards,b,path}
  res = [];
  moves = findAllMoves(b);
//comeFrom = {}
  for (l = 0, len = moves.length; l < len; l++) {
    move = moves[l];
    [src, dst] = move;
    b1 = _.cloneDeep(b);
    makeMove(b1, src, dst);
    key = dumpBoard(b1);
    // console.log key
    if (!(key in hash)) {
      newPath = path.concat([move]);
      hash[key] = [newPath, b];
      res.push([countAceCards(b1), countEmptyPiles(b1), b1, path.concat([move])]);
    }
  }
  //prnt {src,dst,position}
  return res;
};

hint = function() {
  var antal, dst, res, src;
  if (4 * N === countAceCards(board)) {
    return;
  }
  general.hintsUsed++;
  //dialogues.pop()
  res = hintOne();
  if (res || general.hist.length === 0) {
    return;
  }
  // Gick ej att gå framåt, gå bakåt
  [src, dst, antal] = _.last(general.hist);
  menu0(src, dst, '#f00');
  return prnt('red', dialogues.length);
};

hintOne = function() {
  var cand, dst, hintTime, increment, key, nr, origBoard, path, src;
  hintTime = millis();
  aceCards = countAceCards(board);
  if (aceCards === N * 4) {
    return true;
  }
  cands = [];
  cands.push([
    aceCards,
    general.hist.length,
    board, // antal kort på ässen, antal drag, board
    []
  ]);
  hash = {};
  key = dumpBoard(board);
  path = [];
  hash[key] = [path, board];
  nr = 0;
  cand = null;
  origBoard = _.cloneDeep(board);
  while (nr < 10000 && cands.length > 0 && aceCards < N * 4) {
    nr++;
    cand = cands.pop();
    aceCards = cand[0];
    if (aceCards < N * 4) {
      increment = expand(cand);
      cands = cands.concat(increment);
    }
  }
  //			cands.sort (a,b) -> if a[0] == b[0] then b[1]-a[1] else a[0]-b[0]
  //cands.sort (a,b) -> a[0]-b[0]
  //prnt cands
  //prnt N,nr,cands.length,aceCards
  if (aceCards === N * 4) {
    board = cand[2];
    //prntAutomaticprnt hash, board
    path = cand[3];
    board = origBoard;
    [src, dst] = path[0];
    //makeMove board,src,dst,true
    //dialogues.pop()
    menu0(src, dst, '#0f0');
    //prnt "hint: #{int millis()-hintTime} ms"
    return true;
  } else {
    prnt('hint failed. Should never happen!');
    //prnt N,nr,cands.length,aceCards,_.size hash
    board = origBoard;
    return false;
  }
};

restart = function() {
  general.hist = [];
  return board = _.cloneDeep(originalBoard);
};

prettyCard2 = function(card, antal) {
  var over, suit, under;
  [suit, under, over] = unpack(card);
  if (antal === 1) {
    return `${SUIT[suit]} ${RANK[over]}`;
  } else {
    if (under < over) {
      return `${SUIT[suit]} ${RANK[over]}..${RANK[over - antal + 1]}`;
    } else {
      return `${SUIT[suit]} ${RANK[over]}..${RANK[over + antal - 1]}`;
    }
  }
};

prettyCard = function(card, antal = 2) {
  var rank, suit;
  [suit, rank] = unpack(card);
  if (antal === 1) {
    return `${RANK[rank]}`;
  } else {
    return `${SUIT[suit]} ${RANK[rank]}`;
  }
};

assert("club A", prettyCard(pack(0, 0)));

assert("club T", prettyCard(pack(0, 9)));

assert("heart J", prettyCard(pack(1, 10)));

assert("spade Q", prettyCard(pack(2, 11)));

assert("diamond K", prettyCard(pack(3, 12)));

assert("3", prettyCard(pack(3, 2), 1));

//prnt 'prettyCard ok'
prettyMove = function(src, dst, b) {
  var c1, c2;
  prnt('prettyMove', src, dst, b);
  c1 = _.last(b[src]);
  if (b[dst].length > 0) {
    c2 = _.last(b[dst]);
    return `${prettyCard(c1)} to ${prettyCard(c2, 1)}`;
  } else {
    if (indexOf.call(HEAPS, dst) >= 0) {
      return `${prettyCard(c1)} to hole`;
    } else {
      return `${prettyCard(c1)} to panel`;
    }
  }
};

prntAutomaticprnt = function(hash, b) {
  var dst, index, key, l, len, path, s, src;
  key = dumpBoard(b);
  prnt = [];
  while (key in hash) {
    [path, b] = hash[key];
    prnt.push(hash[key]);
    key = dumpBoard(b);
  }
  prnt.reverse();
  s = 'Automatic prnt:';
  for (index = l = 0, len = prnt.length; l < len; index = ++l) {
    [path, b] = prnt[index];
    [src, dst] = _.last(path);
    s += `\n${index}: ${prettyMove(src, dst, b)} (${src} to ${dst})`;
  }
  return prnt(s);
};

prntManualprnt = function() {
  var antal, b, dst, index, l, len, ref, s, src;
  b = _.cloneDeep(originalBoard);
  s = 'Manual prnt:';
  ref = general.hist;
  for (index = l = 0, len = ref.length; l < len; index = ++l) {
    [src, dst, antal] = ref[index];
    s += `\n${index}: ${prettyMove(src, dst, b)}`;
    makeMove(b, src, dst, false);
  }
  return prnt(s);
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023\038-Castle\coffee\sketch.coffee