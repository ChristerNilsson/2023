// Generated by CoffeeScript 2.5.1
  // Vectorized Playing Cards 2.0 - http://sourceforge.net/projects/vector-cards/
  // Copyright 2015 - Chris Aguilar - conjurenation@gmail.com
  // Licensed under LGPL 3 - www.gnu.org/copyleft/lesser.html

//  4  5  6  7  8  9 10 11  0 
  //  4  5  6  7  8  9 10 11  1
  //  4  5  6  7  8  9 10 11  2 
  //  4  5  6  7  8  9 10 11  3
  //  4  5  6  7  8  9 10 11
  //  4  5  6  7  8  9 10 11
  /*
  Korten benämnes :
    abcdefghijklm hjärter
    nopqrstuvwxyz spader
    ABCDEFGHIJKLM ruter
    NOPQRSTUVWXYZ klöver
    A23456789TJQK

  Startposition:
    a n A N (fyra äss. Observera att man bara behöver lagra högsta kortet)
    egUSBy (en hög med korten h5 h7 c8 c6 d2 sQ. Åtta högar behövs)
    Totalt 52 + 11 = 63 tecken

  Slutposition:
    m z M Z + några blanka separatorer
    Totalt 4 + 11 = 15 tecken.

  Med hjälp av dessa strängar kan man förhindra att man besöker redan besökta noder.

  */
var ACES, BlackBox, General, H, HEAPS, LIMIT, LONG, N, OFFSETX, RANK, Rank, SUIT, Suit, W, aceCards, alternativeDsts, assert, backs, board, cands, cards, compress, compressOne, copyToClipboard, countAceCards, countEmptyPiles, display, dsts, dumpBoard, expand, faces, fakeBoard, findAllMoves, general, generalen, getCenter, getParameters, h, hash, hint, hintOne, hitGreen, infoLines, keyPressed, legalMove, makeBoard, makeLink, makeMove, menu0, menu1, menu2, mousePressed, mouseReleased, myRandom, myShuffle, newGame, oneClick, originalBoard, pack, preload, prettyCard, prettyCard2, prettyMove, prettyUndoMove, print, printAutomaticSolution, printManualSolution, range, readBoard, released, restart, setup, showDialogue, showHeap, showInfo, srcs, startCompetition, text3, undoMove, undoMoveOne, unpack, w,
  indexOf = [].indexOf;

ACES = [0, 1, 2, 3];

HEAPS = [4, 5, 6, 7, 8, 9, 10, 11];

//comeFrom = {}
Suit = 'chsd';

Rank = "A23456789TJQK";

SUIT = "club heart spade diamond".split(' ');

RANK = "A23456789TJQK";

LONG = " Ace Two Three Four Five Six Seven Eight Nine Ten Jack Queen King".split(' ');

// Konstanter för cards.png
OFFSETX = 468;

W = 263.25;

H = 352;

w = null;

h = null;

LIMIT = 1000; // Maximum steps considered before giving up. 1000 is too low, hint fails sometimes.

faces = null;

backs = null;

board = null;

cards = null;

cands = null;

hash = null;

aceCards = 4;

originalBoard = null;

startCompetition = null;

N = 13;

srcs = null;

dsts = null;

alternativeDsts = [];

infoLines = [];

general = null;

released = true;

print = console.log;

range = _.range;

Array.prototype.clear = function() {
  return this.length = 0;
};

assert = function(a, b, msg = 'Assert failure') {
  if (!_.isEqual(a, b)) {
    print(msg);
    print("  ", a);
    return print("  ", b);
  }
};

getParameters = function(h = window.location.href) {
  var arr, f, s;
  h = decodeURI(h);
  arr = h.split('?');
  if (arr.length !== 2) {
    return {};
  }
  s = arr[1];
  if (s === '') {
    return {};
  }
  return _.fromPairs((function() {
    var l, len, ref, results;
    ref = s.split('&');
    results = [];
    for (l = 0, len = ref.length; l < len; l++) {
      f = ref[l];
      results.push(f.split('='));
    }
    return results;
  })());
};

myRandom = function(a, b) {
  var r, x;
  x = 10000 * Math.sin(general.fastSeed++);
  r = x - Math.floor(x);
  return a + Math.floor((b - a) * r);
};

myShuffle = function(array) {
  var i, j, l, len, n, ref, results, value;
  n = array.length;
  ref = range(n);
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    //j = myRandom i, n
    j = _.random(i, n - 1, false);
    //print j
    value = array[i];
    array[i] = array[j];
    results.push(array[j] = value);
  }
  return results;
};

copyToClipboard = function(txt) {
  var copyText;
  copyText = document.getElementById("myClipboard");
  copyText.value = txt;
  copyText.select();
  return document.execCommand("copy");
};

makeLink = function() {
  var index, url;
  url = window.location.href + '?';
  index = url.indexOf('?');
  url = url.substring(0, index);
  return url + '?cards=' + general.slowSeed;
};

BlackBox = class BlackBox { // Avgör om man lyckats eller ej. Man får tillgodogöra sig tidigare drag.
  constructor() {
    this.clr();
  }

  clr() {
    this.total = [
      0,
      0,
      0 // [time,computer,human]
    ];
    return this.count = 0;
  }

  //@success = false 
  show() {} // print 'BlackBox',@count,@total

};

General = class General {
  constructor() {
    this.slowSeed = 1; // stored externally
    this.fastSeed = 1; // used internally
    this.start = null;
    this.maxMoves = null;
    this.hist = null;
    this.hintsUsed = 0;
    this.blackBox = new BlackBox();
    this.clr();
    this.getLocalStorage();
  }

  success() {
    return this.blackBox.total[2] + this.hist.length <= this.blackBox.total[1] + this.maxMoves;
  }

  probe(time) {
    var total;
    if (!this.success()) {
      return false;
    }
    total = this.blackBox.total;
    total[0] += time;
    total[1] += this.maxMoves;
    total[2] += this.hist.length;
    return true;
  }

  getLocalStorage() {
    print('direct', localStorage.Generalen);
    if (localStorage.Generalen != null) {
      hash = JSON.parse(localStorage.Generalen);
    } else {
      hash = {};
    }
    if (5 !== _.size(hash)) {
      hash = {
        slowSeed: 1,
        fastSeed: 1,
        total: [0, 0, 0],
        hintsUsed: 0
      };
    }
    print('hash', JSON.stringify(hash));
    this.slowSeed = hash.slowSeed;
    this.fastSeed = hash.fastSeed;
    this.blackBox.total = hash.total;
    this.hintsUsed = hash.hintsUsed;
    return print('get', JSON.stringify(hash));
  }

  putLocalStorage() {
    var s;
    s = JSON.stringify({
      slowSeed: this.slowSeed,
      fastSeed: this.fastSeed,
      total: this.blackBox.total,
      hintsUsed: this.hintsUsed
    });
    localStorage.Generalen = s;
    return print('put', s);
  }

  clr() {
    this.blackBox.clr();
    return this.timeUsed = 0;
  }

  //@putLocalStorage()
  totalRestart() {
    this.slowSeed = int(random(65536));
    return this.clr();
  }

  handle(mx, my) {
    var heap, marked, timeUsed;
    marked = [mx + (my >= 3 ? 12 : 4), my];
    heap = oneClick(marked, board, true);
    if (this.timeUsed === 0 && 4 * N === countAceCards(board)) {
      timeUsed = Math.floor((millis() - this.start) / 1000);
      if (this.probe(timeUsed)) {
        this.timeUsed = timeUsed;
        this.blackBox.show();
      }
      this.putLocalStorage();
      return printManualSolution();
    }
  }

};

preload = function() {
  faces = loadImage('cards/Color_52_Faces_v.2.0.png');
  return backs = loadImage('cards/Playing_Card_Backs.png');
};

pack = function(suit, rank) {
  return Suit[suit] + RANK[rank];
};

assert('cA', pack(0, 0));

assert('dA', pack(3, 0));

assert('d2', pack(3, 1));

assert('hQ', pack(1, 11));

assert('hJ', pack(1, 10));

//print 'pack ok'
unpack = function(n) {
  var rank, suit;
  suit = Suit.indexOf(n[0]);
  rank = RANK.indexOf(n[1]);
  return [suit, rank];
};

assert([0, 0], unpack('cA'));

assert([3, 0], unpack('dA'));

assert([1, 11], unpack('hQ'));

assert([1, 10], unpack('hJ'));

//print 'unpack ok'
compress = function(board) {
  var heap, l, len, results;
  results = [];
  for (l = 0, len = HEAPS.length; l < len; l++) {
    heap = HEAPS[l];
    results.push(board[heap] = compressOne(board[heap]));
  }
  return results;
};

compressOne = function(cards) {
  return cards;
};

countAceCards = function(b) {
  var heap, l, len, res;
  res = 0;
  for (l = 0, len = ACES.length; l < len; l++) {
    heap = ACES[l];
    res += b[heap].length;
  }
  return res;
};

countEmptyPiles = function(b) {
  var heap, l, len, res;
  res = 0;
  for (l = 0, len = HEAPS.length; l < len; l++) {
    heap = HEAPS[l];
    if (b[heap].length === 0) {
      res++;
    }
  }
  return res;
};

dumpBoard = function(board) {
  var heap;
  return ((function() {
    var l, len, results;
    results = [];
    for (l = 0, len = board.length; l < len; l++) {
      heap = board[l];
      results.push(heap.join(' '));
    }
    return results;
  })()).join('|');
};

makeBoard = function() {
  var card, heap, i, l, len, len1, len2, len3, len4, m, o, p, q, rank, ref, ref1, ref2, ref3, suit;
  N = 13;
  cards = [];
  ref = range(4);
  for (l = 0, len = ref.length; l < len; l++) {
    suit = ref[l];
    ref1 = range(1, N);
    // 2..K
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      rank = ref1[m];
      cards.push(pack(suit, rank));
    }
  }
  //print cards

  //general.fastSeed++ # nödvändig?
  myShuffle(cards);
  board = [];
  ref2 = range(4 + 8);
  for (o = 0, len2 = ref2.length; o < len2; o++) {
    i = ref2[o];
    board.push([]);
  }
  ref3 = range(4);
  for (heap = p = 0, len3 = ref3.length; p < len3; heap = ++p) {
    suit = ref3[heap];
    board[heap].push(pack(suit, 0)); // Ess
  }
  for (i = q = 0, len4 = cards.length; q < len4; i = ++q) {
    card = cards[i];
    heap = 4 + i % 8;
    board[heap].push(card);
  }
  //print board
  return board;
};

readBoard = function(b) {
  var heap, l, len, ref, results;
  ref = b.split('|');
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    heap = ref[l];
    results.push(heap === '' ? [] : heap.split(' '));
  }
  return results;
};

fakeBoard = function() {
  //board = readBoard "cA|hA|sA|dA|hT c3 s4 c4 h2 s2|c5 s9 hJ cT sQ|dQ h4 cK s8 c2 sJ|h6 cQ s3 d8 h5 s7|c6 d3 s5 h7 h3 d5|h9 d7 dK hQ d6 sK|h8 d9 c8 c9 c7 d4|cJ hK s6 dJ sT dT" # 111418466
  board = readBoard("cA|hA|sA|dA|c4 dJ c6 h2 h3 sJ|hQ c8 s5 sT h8 h4|c7 s7 h6 s9 s2 dK|d8 sK cT h7 cK d3|cQ d2 c5 d5 cJ s4|d6 hK h5 dQ c2 hT|c3 c9 hJ d7 sQ d4|h9 d9 s3 dT s6 s8"); // 452200020
  return print(board);
};

newGame = function() {
  var cand, cands2, emptyPiles, i, increment, l, len, len1, level, m, nr, ref;
  general.start = millis();
  general.hist = [];
  ref = range(100);
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    makeBoard();
    general.hintsUsed = 0;
    originalBoard = _.cloneDeep(board);
    aceCards = countAceCards(board);
    cands = [];
    cands.push([
      aceCards,
      0,
      board, // antal kort på ässen, antal drag, boa
      []
    ]);
    hash = {};
    nr = 0;
    cand = null;
    print('newGame', nr, LIMIT, cands.length, aceCards, N);
    level = 0;
    while (aceCards !== N * 4 && cands.length > 0 && level < 200) {
      level++;
      cands2 = [];
      for (m = 0, len1 = cands.length; m < len1; m++) {
        cand = cands[m];
        aceCards = cand[0];
        emptyPiles = cand[1];
        if (aceCards === N * 4) {
          break;
        }
        increment = expand(cand);
        cands2 = cands2.concat(increment);
      }
      cands = cands2;
      cands.sort(function(a, b) {
        return b[0] - a[0];
      });
      cands = cands.slice(0, 20); // större ger längre körning och kortare lösning.
      print('candsx', cands.length);
      if (cands.length > 0) {
        print(_.map(cands, function(cand) {
          return cand[0];
        }));
      }
    }
    // for cand in cands
    // 	print JSON.stringify cands[0][0]
    if (aceCards === N * 4) {
      print(JSON.stringify(dumpBoard(originalBoard)));
      board = cand[2];
      print(makeLink());
      printAutomaticSolution(hash, board);
      board = _.cloneDeep(originalBoard);
      print(`${int(millis() - general.start)} ms`);
      general.start = millis();
      general.maxMoves = int(cand[1]);
      return;
    }
  }
};

setup = function() {
  var canvas, params;
  canvas = createCanvas(innerWidth - 0.5, innerHeight - 0.5);
  canvas.position(0, 0); // hides text field used for clipboard copy.
  general = new General();
  w = width / 9;
  h = height / 4;
  angleMode(DEGREES);
  params = getParameters();
  if ('cards' in params) {
    general.slowSeed = parseInt(params.cards);
  }
  startCompetition = millis();
  infoLines.push('Moves Bonus Cards   Time Hints'.split(' '));
  infoLines.push('0 0 0   0 0'.split(' '));
  newGame();
  return display(board);
};

keyPressed = function() {
  if (key === 'X') {
    N = 7;
    board = "cA7|hA4|sA3|dA2||h6|s5 d6||h5 d5||s4 s6|d34||d7|s7|h7||||";
    general.hist = [[12, 0, 1], [5, 1, 1], [8, 3, 1], [9, 1, 1], [11, 1, 1], [16, 2, 1], [17, 0, 1], [10, 0, 1], [9, 0, 1], [18, 2, 1], [19, 0, 1], [7, 0, 1]];
    board = readBoard(board);
    print(board);
  }
  return display(board);
};

// returnerar övre, vänstra koordinaten för översta kortet i högen som [x,y]
getCenter = function(heap) {
  var dy, n;
  if (indexOf.call(ACES, heap) >= 0) {
    return [int(8 * w), int(heap * h)];
  }
  //	if heap in PANEL then return [int((heap-12)*w), int(3*h)]
  if (indexOf.call(HEAPS, heap) >= 0) {
    n = board[heap].length;
    dy = n === 0 ? 0 : min(h / 4, 2 * h / (n - 1));
    return [int((heap - 4) * w), int((n - 1) * dy)];
  }
};

menu0 = function(src, dst, col) {
  var dialogue, r, x, y;
  dialogue = new Dialogue(0, int(w / 2), int(h / 2), int(0.10 * h), col);
  r = int(0.05 * height);
  [x, y] = getCenter(src);
  dialogue.add(new Button('From', x, y, r, function() {
    return dialogues.pop();
  }));
  [x, y] = getCenter(dst);
  return dialogue.add(new Button('To', x, y, r, function() {
    return dialogues.pop();
  }));
};

menu1 = function() {
  var dialogue, r1, r2;
  dialogue = new Dialogue(1, int(4 * w), int(1.5 * h), int(0.15 * h));
  r1 = 0.25 * height;
  r2 = 0.085 * height;
  dialogue.clock(' ', 6, r1, r2, 90 + 360 / 12);
  dialogue.buttons[0].info('Undo', general.hist.length > 0, function() {
    var antal, dst, src;
    if (general.hist.length > 0) {
      [src, dst, antal] = _.last(general.hist);
      dialogues.pop();
      undoMove(general.hist.pop());
      return menu0(src, dst, '#ff0');
    } else {
      return dialogues.pop();
    }
  });
  dialogue.buttons[1].info('Hint', true, function() {
    dialogues.pop();
    return hint(); // Lägger till menu0
  });
  dialogue.buttons[2].info('Cycle Move', alternativeDsts.length > 1, function() {
    var antal, dst, heap, src;
    alternativeDsts.push(alternativeDsts.shift());
    [src, dst, antal] = general.hist.pop();
    undoMove([src, dst, antal]);
    heap = alternativeDsts[0];
    return makeMove(board, src, heap, true);
  });
  // dialogues.pop() # do not pop!
  dialogue.buttons[3].info('Next', general.success(), function() {
    newGame();
    general.timeUsed = 0;
    general.putLocalStorage();
    return dialogues.pop();
  });
  dialogue.buttons[4].info('Help', true, function() {
    return window.open("https://github.com/ChristerNilsson/Lab/tree/master/2018/056-GeneralensTidsf%C3%B6rdriv#generalens-tidsf%C3%B6rdriv");
  });
  return dialogue.buttons[5].info('More...', true, function() {
    return menu2();
  });
};

menu2 = function() {
  var dialogue, r1, r2;
  dialogue = new Dialogue(2, int(4 * w), int(1.5 * h), int(0.15 * h));
  r1 = 0.25 * height;
  r2 = 0.11 * height;
  dialogue.clock(' ', 3, r1, r2, 90 + 360 / 6);
  dialogue.buttons[0].info('Restart', true, function() {
    restart();
    return dialogues.clear();
  });
  dialogue.buttons[1].info('Total Restart', true, function() {
    general.totalRestart();
    newGame(); // 0
    return dialogues.clear();
  });
  return dialogue.buttons[2].info('Link', true, function() {
    var link;
    link = makeLink();
    copyToClipboard(link);
    //msg = 'Link copied to clipboard'
    return dialogues.clear();
  });
};

showHeap = function(board, heap, x, y, dy) { // dy kan vara både pos och neg
  var card, k, l, len, n, rank, ref, suit;
  n = board[heap].length;
  x = x * w;
  if (n > 0) {
    y = y * h + y * dy;
    ref = board[heap];
    for (k = l = 0, len = ref.length; l < len; k = ++l) {
      card = ref[k];
      [suit, rank] = unpack(card);
      //dr = if under < over then 1 else -1
      //for rank in range under,over+dr,dr
      noFill();
      stroke(0);
      image(faces, x, y, w, h * 1.1, OFFSETX + W * rank, 1092 + H * suit, 225, H - 1);
      y += dy;
    }
    // visa eventuellt baksidan
    card = _.last(board[heap]);
    [suit, rank] = unpack(card);
    if (indexOf.call(ACES, heap) >= 0 && rank === N - 1) {
      return image(backs, x, y, w, h * 1.1, OFFSETX + 860, 1092 + 622, 225, H - 1);
    }
  }
};

display = function(board) {
  var dy, heap, l, len, len1, m, n, x, y;
  print('display', board);
  background(0, 128, 0);
  generalen();
  textAlign(CENTER, TOP);
  for (y = l = 0, len = ACES.length; l < len; y = ++l) {
    heap = ACES[y];
    showHeap(board, heap, 8, y, 0);
  }
  for (x = m = 0, len1 = HEAPS.length; m < len1; x = ++m) {
    heap = HEAPS[x];
    n = board[heap].length;
    dy = n === 0 ? 0 : min(h / 4, 2 * h / (n - 1));
    showHeap(board, heap, x, 0, dy);
  }
  //for heap,x in PANEL
  //	showHeap board, heap, x, 3, 0
  showInfo();
  noStroke();
  return showDialogue();
};

text3 = function(a, b, c, y) {};

showInfo = function() {
  var i, j, l, len, ref, results, total, x, y;
  fill(64);
  print('textSize');
  textSize(0.1 * (w + h));
  total = general.blackBox.total;
  infoLines[1][1 - 1] = general.maxMoves - general.hist.length;
  infoLines[1][2 - 1] = total[1] - total[2];
  infoLines[1][3 - 1] = 4 * N - countAceCards(board); // cards
  infoLines[1][6 - 1] = total[0];
  infoLines[1][7 - 1] = general.hintsUsed; // hints
  fill(255, 255, 0, 128);
  stroke(0, 128, 0);
  textAlign(CENTER, BOTTOM);
  ref = range(7);
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    x = w * (i + 0.5);
    results.push((function() {
      var len1, m, ref1, results1;
      ref1 = range(2);
      results1 = [];
      for (m = 0, len1 = ref1.length; m < len1; m++) {
        j = ref1[m];
        y = h * (2.8 + 0.2 * j);
        results1.push(text(infoLines[j][i], x, y));
      }
      return results1;
    })());
  }
  return results;
};

generalen = function() {
  textAlign(CENTER, CENTER);
  textSize(0.5 * (w + h));
  stroke(0, 64, 0);
  noFill();
  text('Generalens', 4 * w, 0.5 * h);
  return text('Tidsfördriv', 4 * w, 1.5 * h);
};

showDialogue = function() {
  if (dialogues.length > 0) {
    return (_.last(dialogues)).show();
  }
};

legalMove = function(board, src, dst) {
  var rank1, rank2, suit1, suit2;
  if (indexOf.call(ACES, src) >= 0) {
    return false;
  }
  if (board[src].length === 0) {
    return false;
  }
  if (board[dst].length === 0) {
    return true;
  }
  [suit1, rank1] = unpack(_.last(board[src]));
  [suit2, rank2] = unpack(_.last(board[dst]));
  if (dst === 0 || dst === 1 || dst === 2 || dst === 3) {
    return rank2 + 1 === rank1 && suit1 === suit2;
  } else {
    return rank2 === 1 + rank1;
  }
};

makeMove = function(board, src, dst, record) {
  var rank, suit;
  [suit, rank] = unpack(board[src].pop());
  if (record) {
    general.hist.push([src, dst, 1 + rank]);
  }
  return board[dst].push(pack(suit, rank));
};

// returns text move
undoMove = function([src, dst, antal]) {
  var res;
  res = prettyUndoMove(src, dst, board, antal);
  [board[src], board[dst]] = undoMoveOne(board[src], board[dst], antal);
  return res;
};

undoMoveOne = function(a, b, antal) {
  var rank, suit;
  [suit, rank] = b.pop();
  a.push([suit, rank]);
  return [a, b];
};

//assert [['d9T'],['dJ']], undoMoveOne [],['dJ9'],2
//assert [['d9'],['dJT']], undoMoveOne [],['dJ9'],1
prettyUndoMove = function(src, dst, b, antal) {
  var c1, c2;
  c2 = _.last(b[dst]);
  if (b[src].length > 0) {
    c1 = _.last(b[src]);
    return `${prettyCard2(c2, antal)} to ${prettyCard(c1)}`;
  } else {
    if (indexOf.call(HEAPS, src) >= 0) {
      return `${prettyCard2(c2, antal)} to hole`;
    }
  }
};

// returns destination
oneClick = function(marked, board, sharp = false) {
  var found, heap, holes, l, len, len1, m;
  holes = [];
  found = false;
  alternativeDsts = []; // för att kunna välja mellan flera via Cycle Moves
  for (l = 0, len = ACES.length; l < len; l++) {
    heap = ACES[l];
    if (legalMove(board, marked[0], heap)) {
      if (sharp) {
        makeMove(board, marked[0], heap, true);
      }
      found = true;
      return heap;
    }
  }
  if (!found) { // Går ej att flytta till något ess.
    for (m = 0, len1 = HEAPS.length; m < len1; m++) {
      heap = HEAPS[m];
      if (board[heap].length === 0) {
        if (board[marked[0]].length > 1) { // marked[0] in PANEL or
          holes.push(heap);
        }
      } else {
        if (legalMove(board, marked[0], heap)) {
          alternativeDsts.push(heap);
        }
      }
    }
    if (holes.length > 0) {
      alternativeDsts.push(holes[0]);
    }
    if (alternativeDsts.length > 0) {
      heap = alternativeDsts[0];
      if (sharp) {
        makeMove(board, marked[0], heap, true);
      }
      return heap;
    }
  }
  return marked[0];
};

hitGreen = function(mx, my, mouseX, mouseY) {
  var n, seqs;
  if (my === 3) {
    return false;
  }
  seqs = board[mx + 4];
  n = seqs.length;
  if (n === 0) {
    return true;
  }
  return mouseY > h * (1 + 1 / 4 * (n - 1));
};

mouseReleased = function() {
  released = true;
  return false;
};

mousePressed = function() {
  var dialogue, mx, my;
  if (!released) {
    return false;
  }
  released = false;
  if (!((0 < mouseX && mouseX < width))) {
    return false;
  }
  if (!((0 < mouseY && mouseY < height))) {
    return false;
  }
  mx = Math.floor(mouseX / w);
  my = Math.floor(mouseY / h);
  if (dialogues.length === 1 && dialogues[0].number === 0) {
    dialogues.pop(); // dölj indikatorer
  }
  dialogue = _.last(dialogues);
  if (dialogues.length === 0 || !dialogue.execute(mouseX, mouseY)) {
    if (mx === 8 || hitGreen(mx, my, mouseX, mouseY)) {
      if (dialogues.length === 0) {
        menu1();
      } else {
        dialogues.pop();
      }
      display(board);
      return false;
    }
    dialogues.clear();
    general.handle(mx, my);
  }
  display(board);
  return false;
};

//###### AI-section ########
findAllMoves = function(b) {
  var dst, holeUsed, l, len, len1, m, res, src;
  //print 'findAllMoves',{b}
  srcs = HEAPS.concat([]); //PANEL
  dsts = ACES.concat(HEAPS);
  res = [];
  for (l = 0, len = srcs.length; l < len; l++) {
    src = srcs[l];
    holeUsed = false;
    for (m = 0, len1 = dsts.length; m < len1; m++) {
      dst = dsts[m];
      if (src !== dst) {
        if (legalMove(b, src, dst)) {
          if (b[dst].length === 0) {
            if (holeUsed) {
              continue;
            }
            holeUsed = true;
          }
          res.push([src, dst]);
        }
      }
    }
  }
  //print res
  return res;
};

expand = function([aceCards, emptyPiles, b, path]) {
  var b1, dst, key, l, len, move, moves, newPath, res, src;
  //print 'expand',{aceCards,b,path}
  res = [];
  moves = findAllMoves(b);
//comeFrom = {}
  for (l = 0, len = moves.length; l < len; l++) {
    move = moves[l];
    [src, dst] = move;
    b1 = _.cloneDeep(b);
    makeMove(b1, src, dst);
    key = dumpBoard(b1);
    // console.log key
    if (!(key in hash)) {
      newPath = path.concat([move]);
      hash[key] = [newPath, b];
      res.push([countAceCards(b1), countEmptyPiles(b1), b1, path.concat([move])]);
    }
  }
  //print JSON.stringify res
  return res;
};

hint = function() {
  var antal, dst, res, src;
  if (4 * N === countAceCards(board)) {
    return;
  }
  general.hintsUsed++;
  //dialogues.pop()
  res = hintOne();
  if (res || general.hist.length === 0) {
    return;
  }
  // Gick ej att gå framåt, gå bakåt
  [src, dst, antal] = _.last(general.hist);
  menu0(src, dst, '#f00');
  return print('red', dialogues.length);
};

hintOne = function() {
  var cand, dst, hintTime, increment, key, nr, origBoard, path, src;
  hintTime = millis();
  aceCards = countAceCards(board);
  if (aceCards === N * 4) {
    return true;
  }
  cands = [];
  cands.push([
    aceCards,
    general.hist.length,
    board, // antal kort på ässen, antal drag, board
    []
  ]);
  hash = {};
  key = dumpBoard(board);
  path = [];
  hash[key] = [path, board];
  nr = 0;
  cand = null;
  origBoard = _.cloneDeep(board);
  while (nr < 10000 && cands.length > 0 && aceCards < N * 4) {
    nr++;
    cand = cands.pop();
    aceCards = cand[0];
    if (aceCards < N * 4) {
      increment = expand(cand);
      cands = cands.concat(increment);
    }
  }
  //			cands.sort (a,b) -> if a[0] == b[0] then b[1]-a[1] else a[0]-b[0]
  //cands.sort (a,b) -> a[0]-b[0]
  //print cands
  //print N,nr,cands.length,aceCards
  if (aceCards === N * 4) {
    board = cand[2];
    //printAutomaticSolution hash, board
    path = cand[3];
    board = origBoard;
    [src, dst] = path[0];
    //makeMove board,src,dst,true
    //dialogues.pop()
    menu0(src, dst, '#0f0');
    //print "hint: #{int millis()-hintTime} ms"
    return true;
  } else {
    print('hint failed. Should never happen!');
    //print N,nr,cands.length,aceCards,_.size hash
    board = origBoard;
    return false;
  }
};

restart = function() {
  general.hist = [];
  return board = _.cloneDeep(originalBoard);
};

prettyCard2 = function(card, antal) {
  var over, suit, under;
  [suit, under, over] = unpack(card);
  if (antal === 1) {
    return `${SUIT[suit]} ${RANK[over]}`;
  } else {
    if (under < over) {
      return `${SUIT[suit]} ${RANK[over]}..${RANK[over - antal + 1]}`;
    } else {
      return `${SUIT[suit]} ${RANK[over]}..${RANK[over + antal - 1]}`;
    }
  }
};

prettyCard = function(card, antal = 2) {
  var rank, suit;
  [suit, rank] = unpack(card);
  if (antal === 1) {
    return `${RANK[rank]}`;
  } else {
    return `${SUIT[suit]} ${RANK[rank]}`;
  }
};

assert("club A", prettyCard(pack(0, 0)));

assert("club T", prettyCard(pack(0, 9)));

assert("heart J", prettyCard(pack(1, 10)));

assert("spade Q", prettyCard(pack(2, 11)));

assert("diamond K", prettyCard(pack(3, 12)));

assert("3", prettyCard(pack(3, 2), 1));

//print 'prettyCard ok'
prettyMove = function(src, dst, b) {
  var c1, c2;
  c1 = _.last(b[src]);
  if (b[dst].length > 0) {
    c2 = _.last(b[dst]);
    return `${prettyCard(c1)} to ${prettyCard(c2, 1)}`;
  } else {
    if (indexOf.call(HEAPS, dst) >= 0) {
      return `${prettyCard(c1)} to hole`;
    } else {
      return `${prettyCard(c1)} to panel`;
    }
  }
};

printAutomaticSolution = function(hash, b) {
  var dst, index, key, l, len, path, s, solution, src;
  key = dumpBoard(b);
  solution = [];
  while (key in hash) {
    [path, b] = hash[key];
    solution.push(hash[key]);
    key = dumpBoard(b);
  }
  solution.reverse();
  s = 'Automatic Solution:';
  for (index = l = 0, len = solution.length; l < len; index = ++l) {
    [path, b] = solution[index];
    [src, dst] = _.last(path);
    s += `\n${index}: ${prettyMove(src, dst, b)} (${src} to ${dst})`;
  }
  return print(s);
};

printManualSolution = function() {
  var antal, b, dst, index, l, len, ref, s, src;
  b = _.cloneDeep(originalBoard);
  s = 'Manual Solution:';
  ref = general.hist;
  for (index = l = 0, len = ref.length; l < len; index = ++l) {
    [src, dst, antal] = ref[index];
    s += `\n${index}: ${prettyMove(src, dst, b)}`;
    makeMove(b, src, dst, false);
  }
  return print(s);
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQVN5Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQSxJQUFBLEVBQUEsUUFBQSxFQUFBLE9BQUEsRUFBQSxDQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLE9BQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLFFBQUEsRUFBQSxlQUFBLEVBQUEsTUFBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxRQUFBLEVBQUEsV0FBQSxFQUFBLGVBQUEsRUFBQSxhQUFBLEVBQUEsZUFBQSxFQUFBLE9BQUEsRUFBQSxJQUFBLEVBQUEsU0FBQSxFQUFBLE1BQUEsRUFBQSxLQUFBLEVBQUEsU0FBQSxFQUFBLFlBQUEsRUFBQSxPQUFBLEVBQUEsU0FBQSxFQUFBLFNBQUEsRUFBQSxhQUFBLEVBQUEsQ0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsT0FBQSxFQUFBLFFBQUEsRUFBQSxTQUFBLEVBQUEsVUFBQSxFQUFBLFNBQUEsRUFBQSxTQUFBLEVBQUEsUUFBQSxFQUFBLFFBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxZQUFBLEVBQUEsYUFBQSxFQUFBLFFBQUEsRUFBQSxTQUFBLEVBQUEsT0FBQSxFQUFBLFFBQUEsRUFBQSxhQUFBLEVBQUEsSUFBQSxFQUFBLE9BQUEsRUFBQSxVQUFBLEVBQUEsV0FBQSxFQUFBLFVBQUEsRUFBQSxjQUFBLEVBQUEsS0FBQSxFQUFBLHNCQUFBLEVBQUEsbUJBQUEsRUFBQSxLQUFBLEVBQUEsU0FBQSxFQUFBLFFBQUEsRUFBQSxPQUFBLEVBQUEsS0FBQSxFQUFBLFlBQUEsRUFBQSxRQUFBLEVBQUEsUUFB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QUFlLFVBQUEsQ0FBVyxHQUFYLEVBQWUsR0FBZixFQUFtQixDQUFuQixDQUFmLENBQUE7SUFDTCxRQUFBLENBQVMsQ0FBVCxFQUFXLEdBQVgsRUFBZSxHQUFmLEVBQW1CLEtBQW5CO0VBRkQ7U0FHQSxLQUFBLENBQU0sQ0FBTjtBQU5xQiIsInNvdXJjZXNDb250ZW50IjpbIiMgVmVjdG9yaXplZCBQbGF5aW5nIENhcmRzIDIuMCAtIGh0dHA6Ly9zb3VyY2Vmb3JnZS5uZXQvcHJvamVjdHMvdmVjdG9yLWNhcmRzL1xyXG4jIENvcHlyaWdodCAyMDE1IC0gQ2hyaXMgQWd1aWxhciAtIGNvbmp1cmVuYXRpb25AZ21haWwuY29tXHJcbiMgTGljZW5zZWQgdW5kZXIgTEdQTCAzIC0gd3d3LmdudS5vcmcvY29weWxlZnQvbGVzc2VyLmh0bWxcclxuXHJcbiMgIDQgIDUgIDYgIDcgIDggIDkgMTAgMTEgIDAgXHJcbiMgIDQgIDUgIDYgIDcgIDggIDkgMTAgMTEgIDFcclxuIyAgNCAgNSAgNiAgNyAgOCAgOSAxMCAxMSAgMiBcclxuIyAgNCAgNSAgNiAgNyAgOCAgOSAxMCAxMSAgM1xyXG4jICA0ICA1ICA2ICA3ICA4ICA5IDEwIDExXHJcbiMgIDQgIDUgIDYgIDcgIDggIDkgMTAgMTFcclxuXHJcbiMjI1xyXG5Lb3J0ZW4gYmVuw6RtbmVzIDpcclxuICBhYmNkZWZnaGlqa2xtIGhqw6RydGVyXHJcbiAgbm9wcXJzdHV2d3h5eiBzcGFkZXJcclxuICBBQkNERUZHSElKS0xNIHJ1dGVyXHJcbiAgTk9QUVJTVFVWV1hZWiBrbMO2dmVyXHJcbiAgQTIzNDU2Nzg5VEpRS1xyXG5cclxuU3RhcnRwb3NpdGlvbjpcclxuICBhIG4gQSBOIChmeXJhIMOkc3MuIE9ic2VydmVyYSBhdHQgbWFuIGJhcmEgYmVow7Z2ZXIgbGFncmEgaMO2Z3N0YSBrb3J0ZXQpXHJcbiAgZWdVU0J5IChlbiBow7ZnIG1lZCBrb3J0ZW4gaDUgaDcgYzggYzYgZDIgc1EuIMOFdHRhIGjDtmdhciBiZWjDtnZzKVxyXG4gIFRvdGFsdCA1MiArIDExID0gNjMgdGVja2VuXHJcblxyXG5TbHV0cG9zaXRpb246XHJcbiAgbSB6IE0gWiArIG7DpWdyYSBibGFua2Egc2VwYXJhdG9yZXJcclxuICBUb3RhbHQgNCArIDExID0gMTUgdGVja2VuLlxyXG5cclxuTWVkIGhqw6RscCBhdiBkZXNzYSBzdHLDpG5nYXIga2FuIG1hbiBmw7ZyaGluZHJhIGF0dCBtYW4gYmVzw7ZrZXIgcmVkYW4gYmVzw7ZrdGEgbm9kZXIuXHJcblxyXG4jIyNcclxuQUNFUyAgPSBbMCwxLDIsM11cclxuSEVBUFMgPSBbNCw1LDYsNyw4LDksMTAsMTFdXHJcbiNjb21lRnJvbSA9IHt9XHJcblxyXG5TdWl0ID0gJ2Noc2QnXHJcblJhbmsgPSBcIkEyMzQ1Njc4OVRKUUtcIlxyXG5TVUlUID0gXCJjbHViIGhlYXJ0IHNwYWRlIGRpYW1vbmRcIi5zcGxpdCAnICdcclxuUkFOSyA9IFwiQTIzNDU2Nzg5VEpRS1wiIFxyXG5MT05HID0gXCIgQWNlIFR3byBUaHJlZSBGb3VyIEZpdmUgU2l4IFNldmVuIEVpZ2h0IE5pbmUgVGVuIEphY2sgUXVlZW4gS2luZ1wiLnNwbGl0ICcgJ1xyXG5cclxuIyBLb25zdGFudGVyIGbDtnIgY2FyZHMucG5nXHJcbk9GRlNFVFggPSA0NjhcclxuVyA9IDI2My4yNVxyXG5IID0gMzUyXHJcblxyXG53ID0gbnVsbFxyXG5oID0gbnVsbFxyXG5MSU1JVCA9IDEwMDAgIyBNYXhpbXVtIHN0ZXBzIGNvbnNpZGVyZWQgYmVmb3JlIGdpdmluZyB1cC4gMTAwMCBpcyB0b28gbG93LCBoaW50IGZhaWxzIHNvbWV0aW1lcy5cclxuXHJcbmZhY2VzID0gbnVsbFxyXG5iYWNrcyA9IG51bGxcclxuXHJcbmJvYXJkID0gbnVsbFxyXG5jYXJkcyA9IG51bGxcclxuY2FuZHMgPSBudWxsXHJcbmhhc2ggPSBudWxsXHJcbmFjZUNhcmRzID0gNFxyXG5vcmlnaW5hbEJvYXJkID0gbnVsbFxyXG5cclxuc3RhcnRDb21wZXRpdGlvbiA9IG51bGxcclxuTiA9IDEzXHJcbnNyY3MgPSBudWxsXHJcbmRzdHMgPSBudWxsXHJcblxyXG5hbHRlcm5hdGl2ZURzdHMgPSBbXVxyXG5cclxuaW5mb0xpbmVzID0gW11cclxuZ2VuZXJhbCA9IG51bGxcclxuXHJcbnJlbGVhc2VkID0gdHJ1ZSBcclxuXHJcbnByaW50ID0gY29uc29sZS5sb2dcclxucmFuZ2UgPSBfLnJhbmdlXHJcbkFycmF5LnByb3RvdHlwZS5jbGVhciA9IC0+IEBsZW5ndGggPSAwXHJcbmFzc2VydCA9IChhLCBiLCBtc2c9J0Fzc2VydCBmYWlsdXJlJykgLT5cclxuXHRpZiBub3QgXy5pc0VxdWFsIGEsYlxyXG5cdFx0cHJpbnQgbXNnXHJcblx0XHRwcmludCBcIiAgXCIsYVxyXG5cdFx0cHJpbnQgXCIgIFwiLGJcclxuXHJcbmdldFBhcmFtZXRlcnMgPSAoaCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmKSAtPiBcclxuXHRoID0gZGVjb2RlVVJJIGhcclxuXHRhcnIgPSBoLnNwbGl0ICc/J1xyXG5cdGlmIGFyci5sZW5ndGggIT0gMiB0aGVuIHJldHVybiB7fVxyXG5cdHMgPSBhcnJbMV1cclxuXHRpZiBzPT0nJyB0aGVuIHJldHVybiB7fVxyXG5cdF8uZnJvbVBhaXJzIChmLnNwbGl0ICc9JyBmb3IgZiBpbiBzLnNwbGl0KCcmJykpXHJcblxyXG5teVJhbmRvbSA9IChhLGIpIC0+IFxyXG5cdHggPSAxMDAwMCAqIE1hdGguc2luIGdlbmVyYWwuZmFzdFNlZWQrK1xyXG5cdHIgPSB4IC0gTWF0aC5mbG9vciB4XHJcblx0YSArIE1hdGguZmxvb3IgKGItYSkgKiByXHJcblxyXG5teVNodWZmbGUgPSAoYXJyYXkpIC0+XHJcblx0biA9IGFycmF5Lmxlbmd0aCBcclxuXHRmb3IgaSBpbiByYW5nZSBuXHJcblx0XHQjaiA9IG15UmFuZG9tIGksIG5cclxuXHRcdGogPSBfLnJhbmRvbSBpLCBuLTEsIGZhbHNlXHJcblx0XHQjcHJpbnQgalxyXG5cdFx0dmFsdWUgPSBhcnJheVtpXVxyXG5cdFx0YXJyYXlbaV0gPSBhcnJheVtqXVxyXG5cdFx0YXJyYXlbal0gPSB2YWx1ZVxyXG5cclxuY29weVRvQ2xpcGJvYXJkID0gKHR4dCkgLT5cclxuXHRjb3B5VGV4dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkIFwibXlDbGlwYm9hcmRcIlxyXG5cdGNvcHlUZXh0LnZhbHVlID0gdHh0IFxyXG5cdGNvcHlUZXh0LnNlbGVjdCgpXHJcblx0ZG9jdW1lbnQuZXhlY0NvbW1hbmQgXCJjb3B5XCJcclxuXHJcbm1ha2VMaW5rID0gLT4gXHJcblx0dXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWYgKyAnPydcclxuXHRpbmRleCA9IHVybC5pbmRleE9mICc/J1xyXG5cdHVybCA9IHVybC5zdWJzdHJpbmcgMCxpbmRleFxyXG5cdHVybCArICc/Y2FyZHM9JyArIGdlbmVyYWwuc2xvd1NlZWRcclxuXHJcbmNsYXNzIEJsYWNrQm94ICMgQXZnw7ZyIG9tIG1hbiBseWNrYXRzIGVsbGVyIGVqLiBNYW4gZsOlciB0aWxsZ29kb2fDtnJhIHNpZyB0aWRpZ2FyZSBkcmFnLlxyXG5cdGNvbnN0cnVjdG9yIDogLT4gQGNscigpXHJcblx0Y2xyIDogLT5cclxuXHRcdEB0b3RhbCA9IFswLDAsMF0gIyBbdGltZSxjb21wdXRlcixodW1hbl1cclxuXHRcdEBjb3VudCA9IDBcclxuXHRcdCNAc3VjY2VzcyA9IGZhbHNlIFxyXG5cdHNob3cgOiAtPiAjIHByaW50ICdCbGFja0JveCcsQGNvdW50LEB0b3RhbFxyXG5cclxuY2xhc3MgR2VuZXJhbFxyXG5cdGNvbnN0cnVjdG9yIDogLT5cclxuXHRcdEBzbG93U2VlZCA9IDEgIyBzdG9yZWQgZXh0ZXJuYWxseVxyXG5cdFx0QGZhc3RTZWVkID0gMSAjIHVzZWQgaW50ZXJuYWxseVxyXG5cdFx0QHN0YXJ0ID0gbnVsbFxyXG5cdFx0QG1heE1vdmVzID0gbnVsbFxyXG5cdFx0QGhpc3QgPSBudWxsXHJcblx0XHRAaGludHNVc2VkID0gMFxyXG5cdFx0QGJsYWNrQm94ID0gbmV3IEJsYWNrQm94KClcclxuXHRcdEBjbHIoKVxyXG5cdFx0QGdldExvY2FsU3RvcmFnZSgpXHJcblxyXG5cdHN1Y2Nlc3MgOiAtPiBAYmxhY2tCb3gudG90YWxbMl0gKyBAaGlzdC5sZW5ndGggPD0gQGJsYWNrQm94LnRvdGFsWzFdICsgQG1heE1vdmVzIFxyXG5cclxuXHRwcm9iZSA6ICh0aW1lKSAtPlxyXG5cdFx0aWYgbm90IEBzdWNjZXNzKCkgdGhlbiByZXR1cm4gZmFsc2UgXHJcblx0XHR0b3RhbCA9IEBibGFja0JveC50b3RhbFxyXG5cdFx0dG90YWxbMF0gKz0gdGltZVxyXG5cdFx0dG90YWxbMV0gKz0gQG1heE1vdmVzXHJcblx0XHR0b3RhbFsyXSArPSBAaGlzdC5sZW5ndGhcclxuXHRcdHRydWVcclxuXHJcblx0Z2V0TG9jYWxTdG9yYWdlIDogLT5cclxuXHRcdHByaW50ICdkaXJlY3QnLGxvY2FsU3RvcmFnZS5HZW5lcmFsZW5cclxuXHRcdGlmIGxvY2FsU3RvcmFnZS5HZW5lcmFsZW4/IHRoZW4gaGFzaCA9IEpTT04ucGFyc2UgbG9jYWxTdG9yYWdlLkdlbmVyYWxlbiBlbHNlIGhhc2ggPSB7fVxyXG5cdFx0aWYgNSAhPSBfLnNpemUgaGFzaCB0aGVuIGhhc2ggPSB7c2xvd1NlZWQ6MSwgZmFzdFNlZWQ6MSwgdG90YWw6WzAsMCwwXSwgaGludHNVc2VkOjB9IFxyXG5cdFx0cHJpbnQgJ2hhc2gnLEpTT04uc3RyaW5naWZ5IGhhc2hcclxuXHRcdEBzbG93U2VlZCA9IGhhc2guc2xvd1NlZWRcclxuXHRcdEBmYXN0U2VlZCA9IGhhc2guZmFzdFNlZWRcclxuXHRcdEBibGFja0JveC50b3RhbCA9IGhhc2gudG90YWxcclxuXHRcdEBoaW50c1VzZWQgPSBoYXNoLmhpbnRzVXNlZFxyXG5cdFx0cHJpbnQgJ2dldCcsIEpTT04uc3RyaW5naWZ5IGhhc2hcclxuXHJcblx0cHV0TG9jYWxTdG9yYWdlIDogLT5cclxuXHRcdHMgPSBKU09OLnN0cmluZ2lmeSB7c2xvd1NlZWQ6QHNsb3dTZWVkLCBmYXN0U2VlZDpAZmFzdFNlZWQsIHRvdGFsOkBibGFja0JveC50b3RhbCwgaGludHNVc2VkOkBoaW50c1VzZWR9IFxyXG5cdFx0bG9jYWxTdG9yYWdlLkdlbmVyYWxlbiA9IHMgXHJcblx0XHRwcmludCAncHV0JyxzXHJcblxyXG5cdGNsciA6IC0+XHJcblx0XHRAYmxhY2tCb3guY2xyKClcclxuXHRcdEB0aW1lVXNlZCA9IDBcclxuXHRcdCNAcHV0TG9jYWxTdG9yYWdlKClcclxuXHJcblx0dG90YWxSZXN0YXJ0IDogLT5cclxuXHRcdEBzbG93U2VlZCA9IGludCByYW5kb20gNjU1MzZcclxuXHRcdEBjbHIoKVxyXG5cclxuXHRoYW5kbGUgOiAobXgsbXkpIC0+XHJcblx0XHRtYXJrZWQgPSBbKG14ICsgaWYgbXkgPj0gMyB0aGVuIDEyIGVsc2UgNCksbXldXHJcblx0XHRoZWFwID0gb25lQ2xpY2sgbWFya2VkLGJvYXJkLHRydWVcclxuXHJcblx0XHRpZiBAdGltZVVzZWQgPT0gMCBhbmQgNCpOID09IGNvdW50QWNlQ2FyZHMgYm9hcmRcclxuXHRcdFx0dGltZVVzZWQgPSAobWlsbGlzKCkgLSBAc3RhcnQpIC8vIDEwMDBcclxuXHRcdFx0aWYgQHByb2JlIHRpbWVVc2VkXHJcblx0XHRcdFx0QHRpbWVVc2VkID0gdGltZVVzZWRcclxuXHRcdFx0XHRAYmxhY2tCb3guc2hvdygpXHJcblx0XHRcdEBwdXRMb2NhbFN0b3JhZ2UoKVxyXG5cdFx0XHRwcmludE1hbnVhbFNvbHV0aW9uKClcclxuXHJcbnByZWxvYWQgPSAtPiBcclxuXHRmYWNlcyA9IGxvYWRJbWFnZSAnY2FyZHMvQ29sb3JfNTJfRmFjZXNfdi4yLjAucG5nJ1xyXG5cdGJhY2tzID0gbG9hZEltYWdlICdjYXJkcy9QbGF5aW5nX0NhcmRfQmFja3MucG5nJ1xyXG5cclxucGFjayA9IChzdWl0LHJhbmspIC0+IFN1aXRbc3VpdF0gKyBSQU5LW3JhbmtdICMgKyBpZiB1bmRlcj09b3ZlciB0aGVuICcnIGVsc2UgUkFOS1tvdmVyXVxyXG5hc3NlcnQgJ2NBJywgcGFjayAwLDBcclxuYXNzZXJ0ICdkQScsIHBhY2sgMywwXHJcbmFzc2VydCAnZDInLCBwYWNrIDMsMVxyXG5hc3NlcnQgJ2hRJywgcGFjayAxLDExXHJcbmFzc2VydCAnaEonLCBwYWNrIDEsMTBcclxuI3ByaW50ICdwYWNrIG9rJ1xyXG5cclxudW5wYWNrID0gKG4pIC0+IFxyXG5cdHN1aXQgPSBTdWl0LmluZGV4T2YgblswXVxyXG5cdHJhbmsgPSBSQU5LLmluZGV4T2YgblsxXVxyXG5cdFtzdWl0LHJhbmtdXHJcbmFzc2VydCBbMCwwXSwgdW5wYWNrICdjQSdcclxuYXNzZXJ0IFszLDBdLCB1bnBhY2sgJ2RBJ1xyXG5hc3NlcnQgWzEsMTFdLCB1bnBhY2sgJ2hRJ1xyXG5hc3NlcnQgWzEsMTBdLCB1bnBhY2sgJ2hKJ1xyXG4jcHJpbnQgJ3VucGFjayBvaydcclxuXHJcbmNvbXByZXNzID0gKGJvYXJkKSAtPlxyXG5cdGZvciBoZWFwIGluIEhFQVBTXHJcblx0XHRib2FyZFtoZWFwXSA9IGNvbXByZXNzT25lIGJvYXJkW2hlYXBdXHJcblxyXG5jb21wcmVzc09uZSA9IChjYXJkcykgLT4gY2FyZHNcclxuXHJcbmNvdW50QWNlQ2FyZHMgPSAoYikgLT5cclxuXHRyZXMgPSAwXHJcblx0Zm9yIGhlYXAgaW4gQUNFU1xyXG5cdFx0cmVzICs9IGJbaGVhcF0ubGVuZ3RoXHJcblx0cmVzXHJcblxyXG5jb3VudEVtcHR5UGlsZXMgPSAoYikgLT5cclxuXHRyZXMgPSAwXHJcblx0Zm9yIGhlYXAgaW4gSEVBUFNcclxuXHRcdGlmIGJbaGVhcF0ubGVuZ3RoID09IDAgdGhlbiByZXMrK1xyXG5cdHJlc1xyXG5cclxuZHVtcEJvYXJkID0gKGJvYXJkKSAtPiAoaGVhcC5qb2luICcgJyBmb3IgaGVhcCBpbiBib2FyZCkuam9pbiAnfCdcclxuXHJcbm1ha2VCb2FyZCA9IC0+XHJcblx0TiA9IDEzXHJcblxyXG5cdGNhcmRzID0gW11cclxuXHRmb3Igc3VpdCBpbiByYW5nZSA0XHJcblx0XHRmb3IgcmFuayBpbiByYW5nZSAxLE4gIyAyLi5LXHJcblx0XHRcdGNhcmRzLnB1c2ggcGFjayBzdWl0LHJhbmtcclxuXHQjcHJpbnQgY2FyZHNcclxuXHJcblx0I2dlbmVyYWwuZmFzdFNlZWQrKyAjIG7DtmR2w6RuZGlnP1xyXG5cdG15U2h1ZmZsZSBjYXJkc1xyXG5cclxuXHRib2FyZCA9IFtdXHJcblx0Zm9yIGkgaW4gcmFuZ2UgNCs4XHJcblx0XHRib2FyZC5wdXNoIFtdXHJcblxyXG5cdGZvciBzdWl0LGhlYXAgaW4gcmFuZ2UgNCBcclxuXHRcdGJvYXJkW2hlYXBdLnB1c2ggcGFjayBzdWl0LDAgIyBFc3NcclxuXHJcblx0Zm9yIGNhcmQsaSBpbiBjYXJkc1xyXG5cdFx0aGVhcCA9IDQraSU4XHJcblx0XHRib2FyZFtoZWFwXS5wdXNoIGNhcmRcclxuXHJcblx0I3ByaW50IGJvYXJkXHJcblx0Ym9hcmRcclxuXHJcbnJlYWRCb2FyZCA9IChiKSAtPiAoaWYgaGVhcD09JycgdGhlbiBbXSBlbHNlIGhlYXAuc3BsaXQgJyAnKSBmb3IgaGVhcCBpbiBiLnNwbGl0ICd8J1xyXG5cclxuZmFrZUJvYXJkID0gLT5cclxuXHQjYm9hcmQgPSByZWFkQm9hcmQgXCJjQXxoQXxzQXxkQXxoVCBjMyBzNCBjNCBoMiBzMnxjNSBzOSBoSiBjVCBzUXxkUSBoNCBjSyBzOCBjMiBzSnxoNiBjUSBzMyBkOCBoNSBzN3xjNiBkMyBzNSBoNyBoMyBkNXxoOSBkNyBkSyBoUSBkNiBzS3xoOCBkOSBjOCBjOSBjNyBkNHxjSiBoSyBzNiBkSiBzVCBkVFwiICMgMTExNDE4NDY2XHJcblx0Ym9hcmQgPSAgcmVhZEJvYXJkIFwiY0F8aEF8c0F8ZEF8YzQgZEogYzYgaDIgaDMgc0p8aFEgYzggczUgc1QgaDggaDR8YzcgczcgaDYgczkgczIgZEt8ZDggc0sgY1QgaDcgY0sgZDN8Y1EgZDIgYzUgZDUgY0ogczR8ZDYgaEsgaDUgZFEgYzIgaFR8YzMgYzkgaEogZDcgc1EgZDR8aDkgZDkgczMgZFQgczYgczhcIiAjIDQ1MjIwMDAyMFxyXG5cdHByaW50IGJvYXJkXHJcblxyXG5uZXdHYW1lID0gLT5cclxuXHRnZW5lcmFsLnN0YXJ0ID0gbWlsbGlzKClcclxuXHRnZW5lcmFsLmhpc3QgPSBbXVxyXG5cdGZvciBpIGluIHJhbmdlIDEwMFxyXG5cclxuXHRcdG1ha2VCb2FyZCgpXHJcblxyXG5cdFx0Z2VuZXJhbC5oaW50c1VzZWQgPSAwXHJcblx0XHRvcmlnaW5hbEJvYXJkID0gXy5jbG9uZURlZXAgYm9hcmRcclxuXHJcblx0XHRhY2VDYXJkcyA9IGNvdW50QWNlQ2FyZHMgYm9hcmRcclxuXHJcblx0XHRjYW5kcyA9IFtdXHJcblx0XHRjYW5kcy5wdXNoIFthY2VDYXJkcywwLGJvYXJkLFtdXSAjIGFudGFsIGtvcnQgcMOlIMOkc3NlbiwgYW50YWwgZHJhZywgYm9hXHJcblx0XHRoYXNoID0ge31cclxuXHRcdG5yID0gMFxyXG5cdFx0Y2FuZCA9IG51bGxcclxuXHRcdHByaW50ICduZXdHYW1lJyxucixMSU1JVCxjYW5kcy5sZW5ndGgsYWNlQ2FyZHMsTlxyXG5cclxuXHRcdGxldmVsID0gMFxyXG5cdFx0d2hpbGUgYWNlQ2FyZHMgIT0gTio0IGFuZCBjYW5kcy5sZW5ndGggPiAwIGFuZCBsZXZlbCA8IDIwMFxyXG5cdFx0XHRsZXZlbCsrXHJcblx0XHRcdGNhbmRzMiA9IFtdXHJcblx0XHRcdGZvciBjYW5kIGluIGNhbmRzXHJcblx0XHRcdFx0YWNlQ2FyZHMgPSBjYW5kWzBdXHJcblx0XHRcdFx0ZW1wdHlQaWxlcyA9IGNhbmRbMV1cclxuXHRcdFx0XHRpZiBhY2VDYXJkcyA9PSBOKjQgdGhlbiBicmVha1xyXG5cdFx0XHRcdGluY3JlbWVudCA9IGV4cGFuZCBjYW5kXHJcblx0XHRcdFx0Y2FuZHMyID0gY2FuZHMyLmNvbmNhdCBpbmNyZW1lbnRcclxuXHRcdFx0Y2FuZHMgPSBjYW5kczJcclxuXHRcdFx0Y2FuZHMuc29ydCAoYSxiKSAtPiBiWzBdLWFbMF0gIyBpZiBiWzBdPT1hWzBdIHRoZW4gYlsxXS1hWzFdIGVsc2UgYlswXS1hWzBdXHJcblx0XHRcdGNhbmRzID0gY2FuZHMuc2xpY2UgMCwyMCAjIHN0w7ZycmUgZ2VyIGzDpG5ncmUga8O2cm5pbmcgb2NoIGtvcnRhcmUgbMO2c25pbmcuXHJcblx0XHRcdHByaW50ICdjYW5kc3gnLCBjYW5kcy5sZW5ndGhcclxuXHRcdFx0aWYgY2FuZHMubGVuZ3RoID4gMFxyXG5cdFx0XHRcdHByaW50IF8ubWFwIGNhbmRzLCAoY2FuZCkgLT4gY2FuZFswXVxyXG5cdFx0XHQjIGZvciBjYW5kIGluIGNhbmRzXHJcblx0XHRcdCMgXHRwcmludCBKU09OLnN0cmluZ2lmeSBjYW5kc1swXVswXVxyXG5cdFx0aWYgYWNlQ2FyZHMgPT0gTio0XHJcblx0XHRcdHByaW50IEpTT04uc3RyaW5naWZ5IGR1bXBCb2FyZCBvcmlnaW5hbEJvYXJkXHJcblx0XHRcdGJvYXJkID0gY2FuZFsyXVxyXG5cdFx0XHRwcmludCBtYWtlTGluaygpXHJcblx0XHRcdHByaW50QXV0b21hdGljU29sdXRpb24gaGFzaCxib2FyZFxyXG5cdFx0XHRib2FyZCA9IF8uY2xvbmVEZWVwIG9yaWdpbmFsQm9hcmRcclxuXHRcdFx0cHJpbnQgXCIje2ludCBtaWxsaXMoKS1nZW5lcmFsLnN0YXJ0fSBtc1wiXHJcblx0XHRcdGdlbmVyYWwuc3RhcnQgPSBtaWxsaXMoKVxyXG5cdFx0XHRnZW5lcmFsLm1heE1vdmVzID0gaW50IGNhbmRbMV1cclxuXHRcdFx0cmV0dXJuXHJcblxyXG5zZXR1cCA9IC0+XHJcblx0Y2FudmFzID0gY3JlYXRlQ2FudmFzIGlubmVyV2lkdGgtMC41LCBpbm5lckhlaWdodC0wLjVcclxuXHRjYW52YXMucG9zaXRpb24gMCwwICMgaGlkZXMgdGV4dCBmaWVsZCB1c2VkIGZvciBjbGlwYm9hcmQgY29weS5cclxuXHJcblx0Z2VuZXJhbCA9IG5ldyBHZW5lcmFsKClcclxuXHJcblx0dyA9IHdpZHRoLzlcclxuXHRoID0gaGVpZ2h0LzRcclxuXHRhbmdsZU1vZGUgREVHUkVFU1xyXG5cclxuXHRwYXJhbXMgPSBnZXRQYXJhbWV0ZXJzKClcclxuXHRpZiAnY2FyZHMnIG9mIHBhcmFtc1xyXG5cdFx0Z2VuZXJhbC5zbG93U2VlZCA9IHBhcnNlSW50IHBhcmFtcy5jYXJkc1xyXG5cclxuXHRzdGFydENvbXBldGl0aW9uID0gbWlsbGlzKClcclxuXHRpbmZvTGluZXMucHVzaCAnTW92ZXMgQm9udXMgQ2FyZHMgICBUaW1lIEhpbnRzJy5zcGxpdCAnICdcclxuXHRpbmZvTGluZXMucHVzaCAnMCAwIDAgICAwIDAnLnNwbGl0ICcgJ1xyXG5cclxuXHRuZXdHYW1lKClcclxuXHRkaXNwbGF5IGJvYXJkXHJcblxyXG5rZXlQcmVzc2VkID0gLT5cclxuXHRpZiBrZXkgPT0gJ1gnXHJcblx0XHROID0gN1xyXG5cdFx0Ym9hcmQgPSBcImNBN3xoQTR8c0EzfGRBMnx8aDZ8czUgZDZ8fGg1IGQ1fHxzNCBzNnxkMzR8fGQ3fHM3fGg3fHx8fFwiXHJcblx0XHRnZW5lcmFsLmhpc3QgPSBbWzEyLDAsMV0sWzUsMSwxXSxbOCwzLDFdLFs5LDEsMV0sWzExLDEsMV0sWzE2LDIsMV0sWzE3LDAsMV0sWzEwLDAsMV0sWzksMCwxXSxbMTgsMiwxXSxbMTksMCwxXSxbNywwLDFdXVx0XHRcclxuXHRcdGJvYXJkID0gcmVhZEJvYXJkIGJvYXJkXHJcblx0XHRwcmludCBib2FyZFxyXG5cdGRpc3BsYXkgYm9hcmRcclxuXHJcbiMgcmV0dXJuZXJhciDDtnZyZSwgdsOkbnN0cmEga29vcmRpbmF0ZW4gZsO2ciDDtnZlcnN0YSBrb3J0ZXQgaSBow7ZnZW4gc29tIFt4LHldXHJcbmdldENlbnRlciA9IChoZWFwKSAtPlxyXG5cdGlmIGhlYXAgaW4gQUNFUyB0aGVuIHJldHVybiBbaW50KDgqdyksIGludChoZWFwKmgpXVxyXG4jXHRpZiBoZWFwIGluIFBBTkVMIHRoZW4gcmV0dXJuIFtpbnQoKGhlYXAtMTIpKncpLCBpbnQoMypoKV1cclxuXHRpZiBoZWFwIGluIEhFQVBTXHJcblx0XHRuID0gYm9hcmRbaGVhcF0ubGVuZ3RoXHJcblx0XHRkeSA9IGlmIG4gPT0gMCB0aGVuIDAgZWxzZSBtaW4gaC80LDIqaC8obi0xKVxyXG5cdFx0cmV0dXJuIFtpbnQoKGhlYXAtNCkqdyksIGludCgobi0xKSpkeSldXHJcblxyXG5tZW51MCA9IChzcmMsZHN0LGNvbCkgLT5cclxuXHRkaWFsb2d1ZSA9IG5ldyBEaWFsb2d1ZSAwLGludCh3LzIpLGludChoLzIpLGludCgwLjEwKmgpLGNvbFxyXG5cdHIgPSBpbnQgMC4wNSAqIGhlaWdodFxyXG5cdFt4LHldID0gZ2V0Q2VudGVyIHNyY1xyXG5cdGRpYWxvZ3VlLmFkZCBuZXcgQnV0dG9uICdGcm9tJywgeCx5LHIsIC0+IGRpYWxvZ3Vlcy5wb3AoKVxyXG5cdFt4LHldID0gZ2V0Q2VudGVyIGRzdFxyXG5cdGRpYWxvZ3VlLmFkZCBuZXcgQnV0dG9uICdUbycsICAgeCx5LHIsIC0+IGRpYWxvZ3Vlcy5wb3AoKVxyXG5cclxubWVudTEgPSAtPlxyXG5cdGRpYWxvZ3VlID0gbmV3IERpYWxvZ3VlIDEsaW50KDQqdyksaW50KDEuNSpoKSxpbnQoMC4xNSpoKSBcclxuXHJcblx0cjEgPSAwLjI1ICogaGVpZ2h0XHJcblx0cjIgPSAwLjA4NSAqIGhlaWdodFxyXG5cdGRpYWxvZ3VlLmNsb2NrICcgJyw2LHIxLHIyLDkwKzM2MC8xMlxyXG5cclxuXHRkaWFsb2d1ZS5idXR0b25zWzBdLmluZm8gJ1VuZG8nLCBnZW5lcmFsLmhpc3QubGVuZ3RoID4gMCwgLT5cclxuXHRcdGlmIGdlbmVyYWwuaGlzdC5sZW5ndGggPiAwIFxyXG5cdFx0XHRbc3JjLGRzdCxhbnRhbF0gPSBfLmxhc3QgZ2VuZXJhbC5oaXN0XHJcblx0XHRcdGRpYWxvZ3Vlcy5wb3AoKVxyXG5cdFx0XHR1bmRvTW92ZSBnZW5lcmFsLmhpc3QucG9wKClcclxuXHRcdFx0bWVudTAgc3JjLGRzdCwnI2ZmMCdcclxuXHRcdGVsc2VcclxuXHRcdFx0ZGlhbG9ndWVzLnBvcCgpXHJcblxyXG5cdGRpYWxvZ3VlLmJ1dHRvbnNbMV0uaW5mbyAnSGludCcsIHRydWUsIC0+XHJcblx0XHRkaWFsb2d1ZXMucG9wKClcclxuXHRcdGhpbnQoKSAjIEzDpGdnZXIgdGlsbCBtZW51MFxyXG5cclxuXHRkaWFsb2d1ZS5idXR0b25zWzJdLmluZm8gJ0N5Y2xlIE1vdmUnLCBhbHRlcm5hdGl2ZURzdHMubGVuZ3RoID4gMSwgLT5cclxuXHRcdGFsdGVybmF0aXZlRHN0cy5wdXNoIGFsdGVybmF0aXZlRHN0cy5zaGlmdCgpXHJcblx0XHRbc3JjLGRzdCxhbnRhbF0gPSBnZW5lcmFsLmhpc3QucG9wKClcclxuXHRcdHVuZG9Nb3ZlIFtzcmMsZHN0LGFudGFsXVxyXG5cdFx0aGVhcCA9IGFsdGVybmF0aXZlRHN0c1swXVxyXG5cdFx0bWFrZU1vdmUgYm9hcmQsc3JjLGhlYXAsdHJ1ZVxyXG5cdFx0IyBkaWFsb2d1ZXMucG9wKCkgIyBkbyBub3QgcG9wIVxyXG5cclxuXHRkaWFsb2d1ZS5idXR0b25zWzNdLmluZm8gJ05leHQnLCBnZW5lcmFsLnN1Y2Nlc3MoKSwgLT5cclxuXHRcdG5ld0dhbWUoKVxyXG5cdFx0Z2VuZXJhbC50aW1lVXNlZCA9IDBcclxuXHRcdGdlbmVyYWwucHV0TG9jYWxTdG9yYWdlKClcclxuXHRcdGRpYWxvZ3Vlcy5wb3AoKVxyXG5cclxuXHRkaWFsb2d1ZS5idXR0b25zWzRdLmluZm8gJ0hlbHAnLCB0cnVlLCAtPlxyXG5cdFx0d2luZG93Lm9wZW4gXCJodHRwczovL2dpdGh1Yi5jb20vQ2hyaXN0ZXJOaWxzc29uL0xhYi90cmVlL21hc3Rlci8yMDE4LzA1Ni1HZW5lcmFsZW5zVGlkc2YlQzMlQjZyZHJpdiNnZW5lcmFsZW5zLXRpZHNmJUMzJUI2cmRyaXZcIlxyXG5cclxuXHRkaWFsb2d1ZS5idXR0b25zWzVdLmluZm8gJ01vcmUuLi4nLCB0cnVlLCAtPlxyXG5cdFx0bWVudTIoKVxyXG5cclxubWVudTIgPSAtPlxyXG5cdGRpYWxvZ3VlID0gbmV3IERpYWxvZ3VlIDIsaW50KDQqdyksaW50KDEuNSpoKSxpbnQoMC4xNSpoKVxyXG5cclxuXHRyMSA9IDAuMjUgKiBoZWlnaHRcclxuXHRyMiA9IDAuMTEgKiBoZWlnaHRcclxuXHRkaWFsb2d1ZS5jbG9jayAnICcsMyxyMSxyMiw5MCszNjAvNlxyXG5cclxuXHRkaWFsb2d1ZS5idXR0b25zWzBdLmluZm8gJ1Jlc3RhcnQnLCB0cnVlLCAtPlxyXG5cdFx0cmVzdGFydCgpXHJcblx0XHRkaWFsb2d1ZXMuY2xlYXIoKVxyXG5cclxuXHRkaWFsb2d1ZS5idXR0b25zWzFdLmluZm8gJ1RvdGFsIFJlc3RhcnQnLCB0cnVlLCAtPlxyXG5cdFx0Z2VuZXJhbC50b3RhbFJlc3RhcnQoKVxyXG5cdFx0bmV3R2FtZSgpICMgMFxyXG5cdFx0ZGlhbG9ndWVzLmNsZWFyKClcclxuXHJcblx0ZGlhbG9ndWUuYnV0dG9uc1syXS5pbmZvICdMaW5rJywgdHJ1ZSwgLT5cclxuXHRcdGxpbmsgPSBtYWtlTGluaygpXHJcblx0XHRjb3B5VG9DbGlwYm9hcmQgbGlua1xyXG5cdFx0I21zZyA9ICdMaW5rIGNvcGllZCB0byBjbGlwYm9hcmQnXHJcblx0XHRkaWFsb2d1ZXMuY2xlYXIoKVxyXG5cclxuc2hvd0hlYXAgPSAoYm9hcmQsaGVhcCx4LHksZHkpIC0+ICMgZHkga2FuIHZhcmEgYsOlZGUgcG9zIG9jaCBuZWdcclxuXHRuID0gYm9hcmRbaGVhcF0ubGVuZ3RoXHJcblx0eCA9IHggKiB3XHJcblx0aWYgbiA+IDBcclxuXHRcdHkgPSB5ICogaCArIHkgKiBkeVxyXG5cdFx0Zm9yIGNhcmQsayBpbiBib2FyZFtoZWFwXVxyXG5cdFx0XHRbc3VpdCxyYW5rXSA9IHVucGFjayBjYXJkXHJcblx0XHRcdCNkciA9IGlmIHVuZGVyIDwgb3ZlciB0aGVuIDEgZWxzZSAtMVxyXG5cdFx0XHQjZm9yIHJhbmsgaW4gcmFuZ2UgdW5kZXIsb3ZlcitkcixkclxyXG5cdFx0XHRub0ZpbGwoKVxyXG5cdFx0XHRzdHJva2UgMFxyXG5cdFx0XHRpbWFnZSBmYWNlcywgeCwgeSwgdyxoKjEuMSwgT0ZGU0VUWCtXKnJhbmssMTA5MitIKnN1aXQsMjI1LEgtMVxyXG5cdFx0XHR5ICs9IGR5XHJcblxyXG5cdFx0IyB2aXNhIGV2ZW50dWVsbHQgYmFrc2lkYW5cclxuXHRcdGNhcmQgPSBfLmxhc3QgYm9hcmRbaGVhcF1cclxuXHRcdFtzdWl0LHJhbmtdID0gdW5wYWNrIGNhcmRcclxuXHRcdGlmIGhlYXAgaW4gQUNFUyBhbmQgcmFuayA9PSBOLTFcclxuXHRcdFx0aW1hZ2UgYmFja3MsIHgsIHksIHcsaCoxLjEsIE9GRlNFVFgrODYwLDEwOTIrNjIyLDIyNSxILTFcclxuXHJcbmRpc3BsYXkgPSAoYm9hcmQpIC0+XHJcblx0cHJpbnQgJ2Rpc3BsYXknLGJvYXJkXHJcblx0YmFja2dyb3VuZCAwLDEyOCwwXHJcblxyXG5cdGdlbmVyYWxlbigpXHJcblxyXG5cdHRleHRBbGlnbiBDRU5URVIsVE9QXHJcblx0Zm9yIGhlYXAseSBpbiBBQ0VTXHJcblx0XHRzaG93SGVhcCBib2FyZCwgaGVhcCwgOCwgeSwgMFxyXG5cdGZvciBoZWFwLHggaW4gSEVBUFNcclxuXHRcdG4gPSBib2FyZFtoZWFwXS5sZW5ndGhcclxuXHRcdGR5ID0gaWYgbiA9PSAwIHRoZW4gMCBlbHNlIG1pbiBoLzQsMipoLyhuLTEpXHJcblx0XHRzaG93SGVhcCBib2FyZCwgaGVhcCwgeCwgMCwgZHlcclxuXHQjZm9yIGhlYXAseCBpbiBQQU5FTFxyXG5cdCNcdHNob3dIZWFwIGJvYXJkLCBoZWFwLCB4LCAzLCAwXHJcblxyXG5cdHNob3dJbmZvKClcclxuXHJcblx0bm9TdHJva2UoKVxyXG5cdHNob3dEaWFsb2d1ZSgpXHJcblxyXG50ZXh0MyA9IChhLGIsYyx5KSAtPlxyXG5cclxuc2hvd0luZm8gPSAtPlxyXG5cdGZpbGwgNjRcclxuXHRwcmludCAndGV4dFNpemUnXHJcblx0dGV4dFNpemUgMC4xKih3K2gpXHJcblxyXG5cdHRvdGFsID0gZ2VuZXJhbC5ibGFja0JveC50b3RhbFxyXG5cclxuXHRpbmZvTGluZXNbMV1bMS0xXSA9IGdlbmVyYWwubWF4TW92ZXMgLSBnZW5lcmFsLmhpc3QubGVuZ3RoXHJcblx0aW5mb0xpbmVzWzFdWzItMV0gPSB0b3RhbFsxXSAtIHRvdGFsWzJdICMgYm9udXNcclxuXHRpbmZvTGluZXNbMV1bMy0xXSA9IDQqTiAtIGNvdW50QWNlQ2FyZHMoYm9hcmQpICMgY2FyZHNcclxuXHRpbmZvTGluZXNbMV1bNi0xXSA9IHRvdGFsWzBdICMgdGltZSBcclxuXHRpbmZvTGluZXNbMV1bNy0xXSA9IGdlbmVyYWwuaGludHNVc2VkICMgaGludHNcclxuXHJcblx0ZmlsbCAyNTUsMjU1LDAsMTI4XHJcblx0c3Ryb2tlIDAsMTI4LDBcclxuXHJcblx0dGV4dEFsaWduIENFTlRFUixCT1RUT01cclxuXHRmb3IgaSBpbiByYW5nZSA3XHJcblx0XHR4ID0gdyooaSswLjUpXHJcblx0XHRmb3IgaiBpbiByYW5nZSAyXHJcblx0XHRcdHkgPSBoKigyLjggKyAwLjIqailcclxuXHRcdFx0dGV4dCBpbmZvTGluZXNbal1baV0sIHgseVxyXG5cclxuZ2VuZXJhbGVuID0gLT5cclxuXHR0ZXh0QWxpZ24gQ0VOVEVSLENFTlRFUlxyXG5cdHRleHRTaXplIDAuNSoodytoKVxyXG5cdHN0cm9rZSAwLDY0LDBcclxuXHRub0ZpbGwoKVxyXG5cdHRleHQgJ0dlbmVyYWxlbnMnLCAgNCp3LDAuNSpoXHJcblx0dGV4dCAnVGlkc2bDtnJkcml2JywgNCp3LDEuNSpoXHJcblxyXG5zaG93RGlhbG9ndWUgPSAtPiBpZiBkaWFsb2d1ZXMubGVuZ3RoID4gMCB0aGVuIChfLmxhc3QgZGlhbG9ndWVzKS5zaG93KClcclxuXHJcbmxlZ2FsTW92ZSA9IChib2FyZCxzcmMsZHN0KSAtPlxyXG5cdGlmIHNyYyBpbiBBQ0VTIHRoZW4gcmV0dXJuIGZhbHNlXHJcblx0aWYgYm9hcmRbc3JjXS5sZW5ndGg9PTAgdGhlbiByZXR1cm4gZmFsc2VcclxuXHRpZiBib2FyZFtkc3RdLmxlbmd0aD09MCB0aGVuIHJldHVybiB0cnVlXHJcblx0W3N1aXQxLHJhbmsxXSA9IHVucGFjayBfLmxhc3QgYm9hcmRbc3JjXVxyXG5cdFtzdWl0MixyYW5rMl0gPSB1bnBhY2sgXy5sYXN0IGJvYXJkW2RzdF1cclxuXHRpZiBkc3QgaW4gWzAsMSwyLDNdXHJcblx0XHRyYW5rMiArIDEgPT0gcmFuazEgYW5kIHN1aXQxID09IHN1aXQyXHJcblx0ZWxzZVxyXG5cdFx0cmFuazIgPT0gMSArIHJhbmsxXHJcblxyXG5tYWtlTW92ZSA9IChib2FyZCxzcmMsZHN0LHJlY29yZCkgLT5cclxuXHRbc3VpdCxyYW5rXSA9IHVucGFjayBib2FyZFtzcmNdLnBvcCgpXHJcblx0aWYgcmVjb3JkIHRoZW4gZ2VuZXJhbC5oaXN0LnB1c2ggW3NyYywgZHN0LCAxICsgcmFua11cclxuXHRib2FyZFtkc3RdLnB1c2ggcGFjayBzdWl0LHJhbmtcclxuXHJcbiMgcmV0dXJucyB0ZXh0IG1vdmVcclxudW5kb01vdmUgPSAoW3NyYyxkc3QsYW50YWxdKSAtPlxyXG5cdHJlcyA9IHByZXR0eVVuZG9Nb3ZlIHNyYyxkc3QsYm9hcmQsYW50YWxcclxuXHRbYm9hcmRbc3JjXSxib2FyZFtkc3RdXSA9IHVuZG9Nb3ZlT25lIGJvYXJkW3NyY10sYm9hcmRbZHN0XSxhbnRhbFxyXG5cdHJlc1xyXG5cclxudW5kb01vdmVPbmUgPSAoYSxiLGFudGFsKSAtPlxyXG5cdFtzdWl0LCByYW5rXSA9IGIucG9wKClcclxuXHRhLnB1c2ggW3N1aXQscmFua11cclxuXHRbYSxiXVxyXG4jYXNzZXJ0IFtbJ2Q5VCddLFsnZEonXV0sIHVuZG9Nb3ZlT25lIFtdLFsnZEo5J10sMlxyXG4jYXNzZXJ0IFtbJ2Q5J10sWydkSlQnXV0sIHVuZG9Nb3ZlT25lIFtdLFsnZEo5J10sMVxyXG5cclxucHJldHR5VW5kb01vdmUgPSAoc3JjLGRzdCxiLGFudGFsKSAtPlxyXG5cdGMyID0gXy5sYXN0IGJbZHN0XVxyXG5cdGlmIGJbc3JjXS5sZW5ndGggPiAwXHJcblx0XHRjMSA9IF8ubGFzdCBiW3NyY11cclxuXHRcdFwiI3twcmV0dHlDYXJkMiBjMixhbnRhbH0gdG8gI3twcmV0dHlDYXJkIGMxfVwiXHJcblx0ZWxzZVxyXG5cdFx0aWYgc3JjIGluIEhFQVBTIHRoZW4gXCIje3ByZXR0eUNhcmQyIGMyLGFudGFsfSB0byBob2xlXCJcclxuXHJcbiMgcmV0dXJucyBkZXN0aW5hdGlvblxyXG5vbmVDbGljayA9IChtYXJrZWQsYm9hcmQsc2hhcnA9ZmFsc2UpIC0+XHJcblxyXG5cdGhvbGVzID0gW11cclxuXHRmb3VuZCA9IGZhbHNlXHJcblxyXG5cdGFsdGVybmF0aXZlRHN0cyA9IFtdICMgZsO2ciBhdHQga3VubmEgdsOkbGphIG1lbGxhbiBmbGVyYSB2aWEgQ3ljbGUgTW92ZXNcclxuXHRmb3IgaGVhcCBpbiBBQ0VTXHJcblx0XHRpZiBsZWdhbE1vdmUgYm9hcmQsbWFya2VkWzBdLGhlYXBcclxuXHRcdFx0aWYgc2hhcnAgdGhlbiBtYWtlTW92ZSBib2FyZCxtYXJrZWRbMF0saGVhcCx0cnVlXHJcblx0XHRcdGZvdW5kID0gdHJ1ZVxyXG5cdFx0XHRyZXR1cm4gaGVhcFxyXG5cclxuXHRpZiBub3QgZm91bmQgIyBHw6VyIGVqIGF0dCBmbHl0dGEgdGlsbCBuw6Vnb3QgZXNzLlxyXG5cdFx0Zm9yIGhlYXAgaW4gSEVBUFNcclxuXHRcdFx0aWYgYm9hcmRbaGVhcF0ubGVuZ3RoID09IDBcclxuXHRcdFx0XHRpZiBib2FyZFttYXJrZWRbMF1dLmxlbmd0aCA+IDEgIyBtYXJrZWRbMF0gaW4gUEFORUwgb3JcclxuXHRcdFx0XHRcdGhvbGVzLnB1c2ggaGVhcFxyXG5cdFx0XHRlbHNlIFxyXG5cdFx0XHRcdGlmIGxlZ2FsTW92ZSBib2FyZCxtYXJrZWRbMF0saGVhcFxyXG5cdFx0XHRcdFx0YWx0ZXJuYXRpdmVEc3RzLnB1c2ggaGVhcFxyXG5cdFx0aWYgaG9sZXMubGVuZ3RoID4gMCB0aGVuIGFsdGVybmF0aXZlRHN0cy5wdXNoIGhvbGVzWzBdXHJcblxyXG5cdFx0aWYgYWx0ZXJuYXRpdmVEc3RzLmxlbmd0aCA+IDBcclxuXHRcdFx0aGVhcCA9IGFsdGVybmF0aXZlRHN0c1swXVxyXG5cdFx0XHRpZiBzaGFycCB0aGVuIG1ha2VNb3ZlIGJvYXJkLG1hcmtlZFswXSxoZWFwLHRydWVcclxuXHRcdFx0cmV0dXJuIGhlYXBcclxuXHJcblx0cmV0dXJuIG1hcmtlZFswXSAjIG5vIE1vdmUgY2FuIGhhcHBlblxyXG5cclxuaGl0R3JlZW4gPSAobXgsbXksbW91c2VYLG1vdXNlWSkgLT5cclxuXHRpZiBteT09MyB0aGVuIHJldHVybiBmYWxzZVxyXG5cdHNlcXMgPSBib2FyZFtteCs0XVxyXG5cdG4gPSBzZXFzLmxlbmd0aFxyXG5cdGlmIG49PTAgdGhlbiByZXR1cm4gdHJ1ZVxyXG5cdG1vdXNlWSA+IGgqKDErMS80KihuLTEpKVxyXG5cclxubW91c2VSZWxlYXNlZCA9IC0+XHJcblx0cmVsZWFzZWQgPSB0cnVlXHJcblx0ZmFsc2VcclxuXHJcbm1vdXNlUHJlc3NlZCA9IC0+XHJcblxyXG5cdGlmIG5vdCByZWxlYXNlZCB0aGVuIHJldHVybiBmYWxzZVxyXG5cdHJlbGVhc2VkID0gZmFsc2VcclxuXHJcblx0aWYgbm90ICgwIDwgbW91c2VYIDwgd2lkdGgpIHRoZW4gcmV0dXJuIGZhbHNlXHJcblx0aWYgbm90ICgwIDwgbW91c2VZIDwgaGVpZ2h0KSB0aGVuIHJldHVybiBmYWxzZVxyXG5cclxuXHRteCA9IG1vdXNlWC8vd1xyXG5cdG15ID0gbW91c2VZLy9oXHJcblxyXG5cdGlmIGRpYWxvZ3Vlcy5sZW5ndGggPT0gMSBhbmQgZGlhbG9ndWVzWzBdLm51bWJlciA9PSAwIHRoZW4gZGlhbG9ndWVzLnBvcCgpICMgZMO2bGogaW5kaWthdG9yZXJcclxuXHJcblx0ZGlhbG9ndWUgPSBfLmxhc3QgZGlhbG9ndWVzXHJcblx0aWYgZGlhbG9ndWVzLmxlbmd0aCA9PSAwIG9yIG5vdCBkaWFsb2d1ZS5leGVjdXRlIG1vdXNlWCxtb3VzZVlcclxuXHJcblx0XHRpZiBteCA9PSA4IG9yIGhpdEdyZWVuIG14LG15LG1vdXNlWCxtb3VzZVlcclxuXHRcdFx0aWYgZGlhbG9ndWVzLmxlbmd0aCA9PSAwIHRoZW4gbWVudTEoKSBlbHNlIGRpYWxvZ3Vlcy5wb3AoKVxyXG5cdFx0XHRkaXNwbGF5IGJvYXJkXHJcblx0XHRcdHJldHVybiBmYWxzZVxyXG5cclxuXHRcdGRpYWxvZ3Vlcy5jbGVhcigpXHJcblx0XHRnZW5lcmFsLmhhbmRsZSBteCxteVxyXG5cclxuXHRkaXNwbGF5IGJvYXJkXHJcblx0ZmFsc2VcclxuXHJcbiMjIyMjIyMgQUktc2VjdGlvbiAjIyMjIyMjI1xyXG5cclxuZmluZEFsbE1vdmVzID0gKGIpIC0+XHJcblx0I3ByaW50ICdmaW5kQWxsTW92ZXMnLHtifVxyXG5cdHNyY3MgPSBIRUFQUy5jb25jYXQgW10gI1BBTkVMXHJcblx0ZHN0cyA9IEFDRVMuY29uY2F0IEhFQVBTXHJcblx0cmVzID0gW11cclxuXHRmb3Igc3JjIGluIHNyY3NcclxuXHRcdGhvbGVVc2VkID0gZmFsc2VcclxuXHRcdGZvciBkc3QgaW4gZHN0c1xyXG5cdFx0XHRpZiBzcmMgIT0gZHN0XHJcblx0XHRcdFx0aWYgbGVnYWxNb3ZlIGIsc3JjLGRzdFxyXG5cdFx0XHRcdFx0aWYgYltkc3RdLmxlbmd0aD09MFxyXG5cdFx0XHRcdFx0XHRpZiBob2xlVXNlZCB0aGVuIGNvbnRpbnVlXHJcblx0XHRcdFx0XHRcdGhvbGVVc2VkPXRydWVcclxuXHRcdFx0XHRcdHJlcy5wdXNoIFtzcmMsZHN0XVxyXG5cdCNwcmludCByZXNcclxuXHRyZXNcclxuXHJcbmV4cGFuZCA9IChbYWNlQ2FyZHMsZW1wdHlQaWxlcyxiLHBhdGhdKSAtPlxyXG5cdCNwcmludCAnZXhwYW5kJyx7YWNlQ2FyZHMsYixwYXRofVxyXG5cdHJlcyA9IFtdXHJcblx0bW92ZXMgPSBmaW5kQWxsTW92ZXMgYlxyXG5cdCNjb21lRnJvbSA9IHt9XHJcblx0Zm9yIG1vdmUgaW4gbW92ZXNcclxuXHRcdFtzcmMsZHN0XSA9IG1vdmVcclxuXHRcdGIxID0gXy5jbG9uZURlZXAgYlxyXG5cdFx0bWFrZU1vdmUgYjEsc3JjLGRzdFxyXG5cdFx0a2V5ID0gZHVtcEJvYXJkIGIxXHJcblx0XHQjIGNvbnNvbGUubG9nIGtleVxyXG5cdFx0aWYga2V5IG5vdCBvZiBoYXNoXHJcblx0XHRcdG5ld1BhdGggPSBwYXRoLmNvbmNhdCBbbW92ZV1cclxuXHRcdFx0aGFzaFtrZXldID0gW25ld1BhdGgsIGJdXHJcblx0XHRcdHJlcy5wdXNoIFtjb3VudEFjZUNhcmRzKGIxKSwgY291bnRFbXB0eVBpbGVzKGIxKSwgYjEsIHBhdGguY29uY2F0KFttb3ZlXSldXHJcblx0I3ByaW50IEpTT04uc3RyaW5naWZ5IHJlc1xyXG5cdHJlc1xyXG5cclxuaGludCA9IC0+XHJcblx0aWYgNCpOID09IGNvdW50QWNlQ2FyZHMgYm9hcmQgdGhlbiByZXR1cm5cclxuXHRnZW5lcmFsLmhpbnRzVXNlZCsrXHJcblxyXG5cdCNkaWFsb2d1ZXMucG9wKClcclxuXHJcblx0cmVzID0gaGludE9uZSgpXHJcblx0aWYgcmVzIG9yIGdlbmVyYWwuaGlzdC5sZW5ndGg9PTAgdGhlbiByZXR1cm5cclxuXHJcblx0IyBHaWNrIGVqIGF0dCBnw6UgZnJhbcOldCwgZ8OlIGJha8OldFxyXG5cdFtzcmMsZHN0LGFudGFsXSA9IF8ubGFzdCBnZW5lcmFsLmhpc3RcclxuXHRtZW51MCBzcmMsZHN0LCcjZjAwJ1xyXG5cdHByaW50ICdyZWQnLGRpYWxvZ3Vlcy5sZW5ndGhcclxuXHJcbmhpbnRPbmUgPSAtPiBcclxuXHRoaW50VGltZSA9IG1pbGxpcygpXHJcblx0YWNlQ2FyZHMgPSBjb3VudEFjZUNhcmRzIGJvYXJkXHJcblx0aWYgYWNlQ2FyZHMgPT0gTio0IHRoZW4gcmV0dXJuIHRydWVcclxuXHRjYW5kcyA9IFtdXHJcblx0Y2FuZHMucHVzaCBbYWNlQ2FyZHMsZ2VuZXJhbC5oaXN0Lmxlbmd0aCxib2FyZCxbXV0gIyBhbnRhbCBrb3J0IHDDpSDDpHNzZW4sIGFudGFsIGRyYWcsIGJvYXJkXHJcblxyXG5cdGhhc2ggPSB7fVxyXG5cdGtleSA9IGR1bXBCb2FyZCBib2FyZFxyXG5cdHBhdGggPSBbXVxyXG5cdGhhc2hba2V5XSA9IFtwYXRoLCBib2FyZF1cclxuXHJcblx0bnIgPSAwXHJcblx0Y2FuZCA9IG51bGxcclxuXHRvcmlnQm9hcmQgPSBfLmNsb25lRGVlcCBib2FyZFxyXG5cclxuXHR3aGlsZSBuciA8IDEwMDAwIGFuZCBjYW5kcy5sZW5ndGggPiAwIGFuZCBhY2VDYXJkcyA8IE4qNFxyXG5cdFx0bnIrKyBcclxuXHRcdGNhbmQgPSBjYW5kcy5wb3AoKVxyXG5cdFx0YWNlQ2FyZHMgPSBjYW5kWzBdXHJcblx0XHRpZiBhY2VDYXJkcyA8IE4qNFxyXG5cdFx0XHRpbmNyZW1lbnQgPSBleHBhbmQgY2FuZFxyXG5cdFx0XHRjYW5kcyA9IGNhbmRzLmNvbmNhdCBpbmNyZW1lbnRcclxuI1x0XHRcdGNhbmRzLnNvcnQgKGEsYikgLT4gaWYgYVswXSA9PSBiWzBdIHRoZW4gYlsxXS1hWzFdIGVsc2UgYVswXS1iWzBdXHJcblx0XHRcdCNjYW5kcy5zb3J0IChhLGIpIC0+IGFbMF0tYlswXVxyXG5cdFx0I3ByaW50IGNhbmRzXHJcblx0I3ByaW50IE4sbnIsY2FuZHMubGVuZ3RoLGFjZUNhcmRzXHJcblxyXG5cdGlmIGFjZUNhcmRzID09IE4qNFxyXG5cdFx0Ym9hcmQgPSBjYW5kWzJdXHJcblx0XHQjcHJpbnRBdXRvbWF0aWNTb2x1dGlvbiBoYXNoLCBib2FyZFxyXG5cdFx0cGF0aCA9IGNhbmRbM11cclxuXHRcdGJvYXJkID0gb3JpZ0JvYXJkXHJcblx0XHRbc3JjLGRzdF0gPSBwYXRoWzBdXHJcblx0XHQjbWFrZU1vdmUgYm9hcmQsc3JjLGRzdCx0cnVlXHJcblx0XHQjZGlhbG9ndWVzLnBvcCgpXHJcblx0XHRtZW51MCBzcmMsZHN0LCcjMGYwJ1xyXG5cdFx0I3ByaW50IFwiaGludDogI3tpbnQgbWlsbGlzKCktaGludFRpbWV9IG1zXCJcclxuXHRcdHJldHVybiB0cnVlXHJcblx0ZWxzZVxyXG5cdFx0cHJpbnQgJ2hpbnQgZmFpbGVkLiBTaG91bGQgbmV2ZXIgaGFwcGVuISdcclxuXHRcdCNwcmludCBOLG5yLGNhbmRzLmxlbmd0aCxhY2VDYXJkcyxfLnNpemUgaGFzaFxyXG5cdFx0Ym9hcmQgPSBvcmlnQm9hcmRcclxuXHRcdHJldHVybiBmYWxzZVxyXG5cclxucmVzdGFydCA9IC0+XHJcblx0Z2VuZXJhbC5oaXN0ID0gW11cclxuXHRib2FyZCA9IF8uY2xvbmVEZWVwIG9yaWdpbmFsQm9hcmRcclxuXHJcbnByZXR0eUNhcmQyID0gKGNhcmQsYW50YWwpIC0+XHJcblx0W3N1aXQsdW5kZXIsb3Zlcl0gPSB1bnBhY2sgY2FyZFxyXG5cdGlmIGFudGFsPT0xIFxyXG5cdFx0XCIje1NVSVRbc3VpdF19ICN7UkFOS1tvdmVyXX1cIlxyXG5cdGVsc2VcclxuXHRcdGlmIHVuZGVyIDwgb3ZlclxyXG5cdFx0XHRcIiN7U1VJVFtzdWl0XX0gI3tSQU5LW292ZXJdfS4uI3tSQU5LW292ZXItYW50YWwrMV19XCJcclxuXHRcdGVsc2VcclxuXHRcdFx0XCIje1NVSVRbc3VpdF19ICN7UkFOS1tvdmVyXX0uLiN7UkFOS1tvdmVyK2FudGFsLTFdfVwiXHJcblxyXG5wcmV0dHlDYXJkID0gKGNhcmQsYW50YWw9MikgLT5cclxuXHRbc3VpdCxyYW5rXSA9IHVucGFjayBjYXJkXHJcblx0aWYgYW50YWw9PTEgdGhlbiBcIiN7UkFOS1tyYW5rXX1cIlxyXG5cdGVsc2UgXCIje1NVSVRbc3VpdF19ICN7UkFOS1tyYW5rXX1cIlxyXG5hc3NlcnQgXCJjbHViIEFcIiwgcHJldHR5Q2FyZCBwYWNrIDAsMFxyXG5hc3NlcnQgXCJjbHViIFRcIiwgcHJldHR5Q2FyZCBwYWNrIDAsOVxyXG5hc3NlcnQgXCJoZWFydCBKXCIsIHByZXR0eUNhcmQgcGFjayAxLDEwXHJcbmFzc2VydCBcInNwYWRlIFFcIiwgcHJldHR5Q2FyZCBwYWNrIDIsMTFcclxuYXNzZXJ0IFwiZGlhbW9uZCBLXCIsIHByZXR0eUNhcmQgcGFjayAzLDEyXHJcbmFzc2VydCBcIjNcIiwgcHJldHR5Q2FyZCBwYWNrKDMsMiksMVxyXG4jcHJpbnQgJ3ByZXR0eUNhcmQgb2snXHJcblxyXG5wcmV0dHlNb3ZlID0gKHNyYyxkc3QsYikgLT5cclxuXHRjMSA9IF8ubGFzdCBiW3NyY11cclxuXHRpZiBiW2RzdF0ubGVuZ3RoID4gMFxyXG5cdFx0YzIgPSBfLmxhc3QgYltkc3RdXHJcblx0XHRcIiN7cHJldHR5Q2FyZCBjMX0gdG8gI3twcmV0dHlDYXJkIGMyLDF9XCJcclxuXHRlbHNlXHJcblx0XHRpZiBkc3QgaW4gSEVBUFMgdGhlbiBcIiN7cHJldHR5Q2FyZCBjMX0gdG8gaG9sZVwiXHJcblx0XHRlbHNlIFwiI3twcmV0dHlDYXJkIGMxfSB0byBwYW5lbFwiXHJcblxyXG5wcmludEF1dG9tYXRpY1NvbHV0aW9uID0gKGhhc2gsIGIpIC0+XHJcblx0a2V5ID0gZHVtcEJvYXJkIGJcclxuXHRzb2x1dGlvbiA9IFtdXHJcblx0d2hpbGUga2V5IG9mIGhhc2hcclxuXHRcdFtwYXRoLGJdID0gaGFzaFtrZXldXHJcblx0XHRzb2x1dGlvbi5wdXNoIGhhc2hba2V5XVxyXG5cdFx0a2V5ID0gZHVtcEJvYXJkIGJcclxuXHRzb2x1dGlvbi5yZXZlcnNlKClcclxuXHRzID0gJ0F1dG9tYXRpYyBTb2x1dGlvbjonXHJcblx0Zm9yIFtwYXRoLGJdLGluZGV4IGluIHNvbHV0aW9uXHJcblx0XHRbc3JjLGRzdF0gPSBfLmxhc3QgcGF0aFxyXG5cdFx0cyArPSBcIlxcbiN7aW5kZXh9OiAje3ByZXR0eU1vdmUgc3JjLGRzdCxifSAoI3tzcmN9IHRvICN7ZHN0fSlcIlxyXG5cdHByaW50IHNcclxuXHJcbnByaW50TWFudWFsU29sdXRpb24gPSAtPlxyXG5cdGIgPSBfLmNsb25lRGVlcCBvcmlnaW5hbEJvYXJkXHJcblx0cyA9ICdNYW51YWwgU29sdXRpb246J1xyXG5cdGZvciBbc3JjLGRzdCxhbnRhbF0saW5kZXggaW4gZ2VuZXJhbC5oaXN0XHJcblx0XHRzICs9IFwiXFxuI3tpbmRleH06ICN7cHJldHR5TW92ZSBzcmMsZHN0LGJ9XCJcclxuXHRcdG1ha2VNb3ZlIGIsc3JjLGRzdCxmYWxzZVxyXG5cdHByaW50IHNcclxuIl19
//# sourceURL=c:\github\2023\038-Castle\coffee\sketch.coffee