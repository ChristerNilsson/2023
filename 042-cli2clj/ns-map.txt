 * #'clojure.core/*
 *' #'clojure.core/*'
 *1 #'clojure.core/*1
 *2 #'clojure.core/*2
 *3 #'clojure.core/*3
 *agent* #'clojure.core/*agent*
 *allow-unresolved-vars* #'clojure.core/*allow-unresolved-vars*
 *assert* #'clojure.core/*assert*
 *clojure-version* #'clojure.core/*clojure-version*
 *command-line-args* #'clojure.core/*command-line-args*
 *compile-files* #'clojure.core/*compile-files*
 *compile-path* #'clojure.core/*compile-path*
 *compiler-options* #'clojure.core/*compiler-options*
 *data-readers* #'clojure.core/*data-readers*
 *default-data-reader-fn* #'clojure.core/*default-data-reader-fn*
 *e #'clojure.core/*e
 *err* #'clojure.core/*err*
 *file* #'clojure.core/*file*
 *flush-on-newline* #'clojure.core/*flush-on-newline*
 *fn-loader* #'clojure.core/*fn-loader*
 *in* #'clojure.core/*in*
 *math-context* #'clojure.core/*math-context*
 *ns* #'clojure.core/*ns*
 *out* #'clojure.core/*out*
 *print-dup* #'clojure.core/*print-dup*
 *print-length* #'clojure.core/*print-length*
 *print-level* #'clojure.core/*print-level*
 *print-meta* #'clojure.core/*print-meta*
 *print-namespace-maps* #'clojure.core/*print-namespace-maps*
 *print-readably* #'clojure.core/*print-readably*
 *read-eval* #'clojure.core/*read-eval*
 *reader-resolver* #'clojure.core/*reader-resolver*
 *source-path* #'clojure.core/*source-path*
 *suppress-read* #'clojure.core/*suppress-read*
 *unchecked-math* #'clojure.core/*unchecked-math*
 *use-context-classloader* #'clojure.core/*use-context-classloader*
 *verbose-defrecords* #'clojure.core/*verbose-defrecords*
 *warn-on-reflection* #'clojure.core/*warn-on-reflection*
 + #'clojure.core/+
 +' #'clojure.core/+'
 - #'clojure.core/-
 -' #'clojure.core/-'
 -> #'clojure.core/->
 ->> #'clojure.core/->>
 ->ArrayChunk #'clojure.core/->ArrayChunk
 ->Eduction #'clojure.core/->Eduction
 ->Vec #'clojure.core/->Vec
 ->VecNode #'clojure.core/->VecNode
 ->VecSeq #'clojure.core/->VecSeq
 -cache-protocol-fn #'clojure.core/-cache-protocol-fn
 -reset-methods #'clojure.core/-reset-methods
 .. #'clojure.core/..
 / #'clojure.core//
 < #'clojure.core/<
 <= #'clojure.core/<=
 = #'clojure.core/=
 == #'clojure.core/==
 > #'clojure.core/>
 >= #'clojure.core/>=
 AbstractMethodError java.lang.AbstractMethodError
 Appendable java.lang.Appendable
 ArithmeticException java.lang.ArithmeticException
 ArrayIndexOutOfBoundsException java.lang.ArrayIndexOutOfBoundsException
 ArrayStoreException java.lang.ArrayStoreException
 AssertionError java.lang.AssertionError
 BigDecimal java.math.BigDecimal
 BigInteger java.math.BigInteger
 Boolean java.lang.Boolean
 Byte java.lang.Byte
 Callable java.util.concurrent.Callable
 CharSequence java.lang.CharSequence
 Character java.lang.Character
 Class java.lang.Class
 ClassCastException java.lang.ClassCastException
 ClassCircularityError java.lang.ClassCircularityError
 ClassFormatError java.lang.ClassFormatError
 ClassLoader java.lang.ClassLoader
 ClassNotFoundException java.lang.ClassNotFoundException
 CloneNotSupportedException java.lang.CloneNotSupportedException
 Cloneable java.lang.Cloneable
 Comparable java.lang.Comparable
 Compiler clojure.lang.Compiler
 Deprecated java.lang.Deprecated
 Double java.lang.Double
 EMPTY-NODE #'clojure.core/EMPTY-NODE
 Enum java.lang.Enum
 EnumConstantNotPresentException java.lang.EnumConstantNotPresentException
 Error java.lang.Error
 Exception java.lang.Exception
 ExceptionInInitializerError java.lang.ExceptionInInitializerError
 Float java.lang.Float
 IllegalAccessError java.lang.IllegalAccessError
 IllegalAccessException java.lang.IllegalAccessException
 IllegalArgumentException java.lang.IllegalArgumentException
 IllegalMonitorStateException java.lang.IllegalMonitorStateException
 IllegalStateException java.lang.IllegalStateException
 IllegalThreadStateException java.lang.IllegalThreadStateException
 IncompatibleClassChangeError java.lang.IncompatibleClassChangeError
 IndexOutOfBoundsException java.lang.IndexOutOfBoundsException
 InheritableThreadLocal java.lang.InheritableThreadLocal
 Inst #'clojure.core/Inst
 InstantiationError java.lang.InstantiationError
 InstantiationException java.lang.InstantiationException
 Integer java.lang.Integer
 InternalError java.lang.InternalError
 InterruptedException java.lang.InterruptedException
 Iterable java.lang.Iterable
 LinkageError java.lang.LinkageError
 Long java.lang.Long
 Math java.lang.Math
 NaN? #'clojure.core/NaN?
 NegativeArraySizeException java.lang.NegativeArraySizeException
 NoClassDefFoundError java.lang.NoClassDefFoundError
 NoSuchFieldError java.lang.NoSuchFieldError
 NoSuchFieldException java.lang.NoSuchFieldException
 NoSuchMethodError java.lang.NoSuchMethodError
 NoSuchMethodException java.lang.NoSuchMethodException
 NullPointerException java.lang.NullPointerException
 Number java.lang.Number
 NumberFormatException java.lang.NumberFormatException
 Object java.lang.Object
 OutOfMemoryError java.lang.OutOfMemoryError
 Override java.lang.Override
 Package java.lang.Package
 PrintWriter-on #'clojure.core/PrintWriter-on
 Process java.lang.Process
 ProcessBuilder java.lang.ProcessBuilder
 Readable java.lang.Readable
 Runnable java.lang.Runnable
 Runtime java.lang.Runtime
 RuntimeException java.lang.RuntimeException
 RuntimePermission java.lang.RuntimePermission
 SecurityException java.lang.SecurityException
 SecurityManager java.lang.SecurityManager
 Short java.lang.Short
 StackOverflowError java.lang.StackOverflowError
 StackTraceElement java.lang.StackTraceElement
 StackTraceElement->vec #'clojure.core/StackTraceElement->vec
 StrictMath java.lang.StrictMath
 String java.lang.String
 StringBuffer java.lang.StringBuffer
 StringBuilder java.lang.StringBuilder
 StringIndexOutOfBoundsException java.lang.StringIndexOutOfBoundsException
 SuppressWarnings java.lang.SuppressWarnings
 System java.lang.System
 Thread java.lang.Thread
 Thread$State java.lang.Thread$State
 Thread$UncaughtExceptionHandler java.lang.Thread$UncaughtExceptionHandler
 ThreadDeath java.lang.ThreadDeath
 ThreadGroup java.lang.ThreadGroup
 ThreadLocal java.lang.ThreadLocal
 Throwable java.lang.Throwable
 Throwable->map #'clojure.core/Throwable->map
 TypeNotPresentException java.lang.TypeNotPresentException
 UnknownError java.lang.UnknownError
 UnsatisfiedLinkError java.lang.UnsatisfiedLinkError
 UnsupportedClassVersionError java.lang.UnsupportedClassVersionError
 UnsupportedOperationException java.lang.UnsupportedOperationException
 VerifyError java.lang.VerifyError
 VirtualMachineError java.lang.VirtualMachineError
 Void java.lang.Void
 a #'user/a
 abs #'clojure.core/abs
 accessor #'clojure.core/accessor
 aclone #'clojure.core/aclone
 add-classpath #'clojure.core/add-classpath
 add-tap #'clojure.core/add-tap
 add-watch #'clojure.core/add-watch
 agent #'clojure.core/agent
 agent-error #'clojure.core/agent-error
 agent-errors #'clojure.core/agent-errors
 aget #'clojure.core/aget
 alength #'clojure.core/alength
 alias #'clojure.core/alias
 all-ns #'clojure.core/all-ns
 alter #'clojure.core/alter
 alter-meta! #'clojure.core/alter-meta!
 alter-var-root #'clojure.core/alter-var-root
 amap #'clojure.core/amap
 ancestors #'clojure.core/ancestors
 and #'clojure.core/and
 any? #'clojure.core/any?
 apply #'clojure.core/apply
 apropos #'clojure.repl/apropos
 areduce #'clojure.core/areduce
 array-map #'clojure.core/array-map
 as-> #'clojure.core/as->
 aset #'clojure.core/aset
 aset-boolean #'clojure.core/aset-boolean
 aset-byte #'clojure.core/aset-byte
 aset-char #'clojure.core/aset-char
 aset-double #'clojure.core/aset-double
 aset-float #'clojure.core/aset-float
 aset-int #'clojure.core/aset-int
 aset-long #'clojure.core/aset-long
 aset-short #'clojure.core/aset-short
 assert #'clojure.core/assert
 assoc #'clojure.core/assoc
 assoc! #'clojure.core/assoc!
 assoc-in #'clojure.core/assoc-in
 associative? #'clojure.core/associative?
 atom #'clojure.core/atom
 await #'clojure.core/await
 await-for #'clojure.core/await-for
 await1 #'clojure.core/await1
 bases #'clojure.core/bases
 bean #'clojure.core/bean
 bigdec #'clojure.core/bigdec
 bigint #'clojure.core/bigint
 biginteger #'clojure.core/biginteger
 binding #'clojure.core/binding
 bit-and #'clojure.core/bit-and
 bit-and-not #'clojure.core/bit-and-not
 bit-clear #'clojure.core/bit-clear
 bit-flip #'clojure.core/bit-flip
 bit-not #'clojure.core/bit-not
 bit-or #'clojure.core/bit-or
 bit-set #'clojure.core/bit-set
 bit-shift-left #'clojure.core/bit-shift-left
 bit-shift-right #'clojure.core/bit-shift-right
 bit-test #'clojure.core/bit-test
 bit-xor #'clojure.core/bit-xor
 boolean #'clojure.core/boolean
 boolean-array #'clojure.core/boolean-array
 boolean? #'clojure.core/boolean?
 booleans #'clojure.core/booleans
 bound-fn #'clojure.core/bound-fn
 bound-fn* #'clojure.core/bound-fn*
 bound? #'clojure.core/bound?
 bounded-count #'clojure.core/bounded-count
 butlast #'clojure.core/butlast
 byte #'clojure.core/byte
 byte-array #'clojure.core/byte-array
 bytes #'clojure.core/bytes
 bytes? #'clojure.core/bytes?
 case #'clojure.core/case
 cast #'clojure.core/cast
 cat #'clojure.core/cat
 char #'clojure.core/char
 char-array #'clojure.core/char-array
 char-escape-string #'clojure.core/char-escape-string
 char-name-string #'clojure.core/char-name-string
 char? #'clojure.core/char?
 chars #'clojure.core/chars
 chunk #'clojure.core/chunk
 chunk-append #'clojure.core/chunk-append
 chunk-buffer #'clojure.core/chunk-buffer
 chunk-cons #'clojure.core/chunk-cons
 chunk-first #'clojure.core/chunk-first
 chunk-next #'clojure.core/chunk-next
 chunk-rest #'clojure.core/chunk-rest
 chunked-seq? #'clojure.core/chunked-seq?
 class #'clojure.core/class
 class? #'clojure.core/class?
 clear-agent-errors #'clojure.core/clear-agent-errors
 clojure-version #'clojure.core/clojure-version
 coll? #'clojure.core/coll?
 comment #'clojure.core/comment
 commute #'clojure.core/commute
 comp #'clojure.core/comp
 comparator #'clojure.core/comparator
 compare #'clojure.core/compare
 compare-and-set! #'clojure.core/compare-and-set!
 compile #'clojure.core/compile
 complement #'clojure.core/complement
 completing #'clojure.core/completing
 concat #'clojure.core/concat
 cond #'clojure.core/cond
 cond-> #'clojure.core/cond->
 cond->> #'clojure.core/cond->>
 condp #'clojure.core/condp
 conj #'clojure.core/conj
 conj! #'clojure.core/conj!
 cons #'clojure.core/cons
 constantly #'clojure.core/constantly
 construct-proxy #'clojure.core/construct-proxy
 contains? #'clojure.core/contains?
 count #'clojure.core/count
 counted? #'clojure.core/counted?
 create-ns #'clojure.core/create-ns
 create-struct #'clojure.core/create-struct
 cycle #'clojure.core/cycle
 dec #'clojure.core/dec
 dec' #'clojure.core/dec'
 decimal? #'clojure.core/decimal?
 declare #'clojure.core/declare
 dedupe #'clojure.core/dedupe
 default-data-readers #'clojure.core/default-data-readers
 definline #'clojure.core/definline
 definterface #'clojure.core/definterface
 defmacro #'clojure.core/defmacro
 defmethod #'clojure.core/defmethod
 defmulti #'clojure.core/defmulti
 defn #'clojure.core/defn
 defn- #'clojure.core/defn-
 defonce #'clojure.core/defonce
 defprotocol #'clojure.core/defprotocol
 defrecord #'clojure.core/defrecord
 defstruct #'clojure.core/defstruct
 deftype #'clojure.core/deftype
 delay #'clojure.core/delay
 delay? #'clojure.core/delay?
 deliver #'clojure.core/deliver
 denominator #'clojure.core/denominator
 deref #'clojure.core/deref
 derive #'clojure.core/derive
 descendants #'clojure.core/descendants
 destructure #'clojure.core/destructure
 dir #'clojure.repl/dir
 disj #'clojure.core/disj
 disj! #'clojure.core/disj!
 dissoc #'clojure.core/dissoc
 dissoc! #'clojure.core/dissoc!
 distinct #'clojure.core/distinct
 distinct? #'clojure.core/distinct?
 doall #'clojure.core/doall
 doc #'clojure.repl/doc
 dorun #'clojure.core/dorun
 doseq #'clojure.core/doseq
 dosync #'clojure.core/dosync
 dotimes #'clojure.core/dotimes
 doto #'clojure.core/doto
 double #'clojure.core/double
 double-array #'clojure.core/double-array
 double? #'clojure.core/double?
 doubles #'clojure.core/doubles
 drop #'clojure.core/drop
 drop-last #'clojure.core/drop-last
 drop-while #'clojure.core/drop-while
 eduction #'clojure.core/eduction
 empty #'clojure.core/empty
 empty? #'clojure.core/empty?
 ensure #'clojure.core/ensure
 ensure-reduced #'clojure.core/ensure-reduced
 enumeration-seq #'clojure.core/enumeration-seq
 error-handler #'clojure.core/error-handler
 error-mode #'clojure.core/error-mode
 eval #'clojure.core/eval
 even? #'clojure.core/even?
 every-pred #'clojure.core/every-pred
 every? #'clojure.core/every?
 ex-cause #'clojure.core/ex-cause
 ex-data #'clojure.core/ex-data
 ex-info #'clojure.core/ex-info
 ex-message #'clojure.core/ex-message
 extend #'clojure.core/extend
 extend-protocol #'clojure.core/extend-protocol
 extend-type #'clojure.core/extend-type
 extenders #'clojure.core/extenders
 extends? #'clojure.core/extends?
 false? #'clojure.core/false?
 ffirst #'clojure.core/ffirst
 fib #'user/fib
 file-seq #'clojure.core/file-seq
 filter #'clojure.core/filter
 filterv #'clojure.core/filterv
 find #'clojure.core/find
 find-doc #'clojure.repl/find-doc
 find-keyword #'clojure.core/find-keyword
 find-ns #'clojure.core/find-ns
 find-protocol-impl #'clojure.core/find-protocol-impl
 find-protocol-method #'clojure.core/find-protocol-method
 find-var #'clojure.core/find-var
 first #'clojure.core/first
 flatten #'clojure.core/flatten
 float #'clojure.core/float
 float-array #'clojure.core/float-array
 float? #'clojure.core/float?
 floats #'clojure.core/floats
 flush #'clojure.core/flush
 fn #'clojure.core/fn
 fn? #'clojure.core/fn?
 fnext #'clojure.core/fnext
 fnil #'clojure.core/fnil
 for #'clojure.core/for
 force #'clojure.core/force
 format #'clojure.core/format
 frequencies #'clojure.core/frequencies
 future #'clojure.core/future
 future-call #'clojure.core/future-call
 future-cancel #'clojure.core/future-cancel
 future-cancelled? #'clojure.core/future-cancelled?
 future-done? #'clojure.core/future-done?
 future? #'clojure.core/future?
 gen-class #'clojure.core/gen-class
 gen-interface #'clojure.core/gen-interface
 gensym #'clojure.core/gensym
 get #'clojure.core/get
 get-in #'clojure.core/get-in
 get-method #'clojure.core/get-method
 get-proxy-class #'clojure.core/get-proxy-class
 get-thread-bindings #'clojure.core/get-thread-bindings
 get-validator #'clojure.core/get-validator
 group-by #'clojure.core/group-by
 halt-when #'clojure.core/halt-when
 hash #'clojure.core/hash
 hash-combine #'clojure.core/hash-combine
 hash-map #'clojure.core/hash-map
 hash-ordered-coll #'clojure.core/hash-ordered-coll
 hash-set #'clojure.core/hash-set
 hash-unordered-coll #'clojure.core/hash-unordered-coll
 ident? #'clojure.core/ident?
 identical? #'clojure.core/identical?
 identity #'clojure.core/identity
 if-let #'clojure.core/if-let
 if-not #'clojure.core/if-not
 if-some #'clojure.core/if-some
 ifn? #'clojure.core/ifn?
 import #'clojure.core/import
 in-ns #'clojure.core/in-ns
 inc #'clojure.core/inc
 inc' #'clojure.core/inc'
 indexed? #'clojure.core/indexed?
 infinite? #'clojure.core/infinite?
 init-proxy #'clojure.core/init-proxy
 inst-ms #'clojure.core/inst-ms
 inst-ms* #'clojure.core/inst-ms*
 inst? #'clojure.core/inst?
 instance? #'clojure.core/instance?
 int #'clojure.core/int
 int-array #'clojure.core/int-array
 int? #'clojure.core/int?
 integer? #'clojure.core/integer?
 interleave #'clojure.core/interleave
 intern #'clojure.core/intern
 interpose #'clojure.core/interpose
 into #'clojure.core/into
 into-array #'clojure.core/into-array
 ints #'clojure.core/ints
 io! #'clojure.core/io!
 isa? #'clojure.core/isa?
 iterate #'clojure.core/iterate
 iteration #'clojure.core/iteration
 iterator-seq #'clojure.core/iterator-seq
 javadoc #'clojure.java.javadoc/javadoc
 juxt #'clojure.core/juxt
 keep #'clojure.core/keep
 keep-indexed #'clojure.core/keep-indexed
 key #'clojure.core/key
 keys #'clojure.core/keys
 keyword #'clojure.core/keyword
 keyword? #'clojure.core/keyword?
 last #'clojure.core/last
 lazy-cat #'clojure.core/lazy-cat
 lazy-seq #'clojure.core/lazy-seq
 leap-year? #'user/leap-year?
 let #'clojure.core/let
 letfn #'clojure.core/letfn
 line-seq #'clojure.core/line-seq
 list #'clojure.core/list
 list* #'clojure.core/list*
 list? #'clojure.core/list?
 load #'clojure.core/load
 load-file #'clojure.core/load-file
 load-reader #'clojure.core/load-reader
 load-string #'clojure.core/load-string
 loaded-libs #'clojure.core/loaded-libs
 locking #'clojure.core/locking
 long #'clojure.core/long
 long-array #'clojure.core/long-array
 longs #'clojure.core/longs
 loop #'clojure.core/loop
 macroexpand #'clojure.core/macroexpand
 macroexpand-1 #'clojure.core/macroexpand-1
 make-array #'clojure.core/make-array
 make-hierarchy #'clojure.core/make-hierarchy
 map #'clojure.core/map
 map-entry? #'clojure.core/map-entry?
 map-indexed #'clojure.core/map-indexed
 map? #'clojure.core/map?
 mapcat #'clojure.core/mapcat
 mapv #'clojure.core/mapv
 max #'clojure.core/max
 max-key #'clojure.core/max-key
 memfn #'clojure.core/memfn
 memoize #'clojure.core/memoize
 merge #'clojure.core/merge
 merge-with #'clojure.core/merge-with
 meta #'clojure.core/meta
 method-sig #'clojure.core/method-sig
 methods #'clojure.core/methods
 min #'clojure.core/min
 min-key #'clojure.core/min-key
 mix-collection-hash #'clojure.core/mix-collection-hash
 mod #'clojure.core/mod
 munge #'clojure.core/munge
 name #'clojure.core/name
 namespace #'clojure.core/namespace
 namespace-munge #'clojure.core/namespace-munge
 nat-int? #'clojure.core/nat-int?
 neg-int? #'clojure.core/neg-int?
 neg? #'clojure.core/neg?
 newline #'clojure.core/newline
 next #'clojure.core/next
 nfirst #'clojure.core/nfirst
 nil? #'clojure.core/nil?
 nnext #'clojure.core/nnext
 not #'clojure.core/not
 not-any? #'clojure.core/not-any?
 not-empty #'clojure.core/not-empty
 not-every? #'clojure.core/not-every?
 not= #'clojure.core/not=
 ns #'clojure.core/ns
 ns-aliases #'clojure.core/ns-aliases
 ns-imports #'clojure.core/ns-imports
 ns-interns #'clojure.core/ns-interns
 ns-map #'clojure.core/ns-map
 ns-name #'clojure.core/ns-name
 ns-publics #'clojure.core/ns-publics
 ns-refers #'clojure.core/ns-refers
 ns-resolve #'clojure.core/ns-resolve
 ns-unalias #'clojure.core/ns-unalias
 ns-unmap #'clojure.core/ns-unmap
 nth #'clojure.core/nth
 nthnext #'clojure.core/nthnext
 nthrest #'clojure.core/nthrest
 num #'clojure.core/num
 number? #'clojure.core/number?
 numerator #'clojure.core/numerator
 object-array #'clojure.core/object-array
 odd? #'clojure.core/odd?
 or #'clojure.core/or
 parents #'clojure.core/parents
 parse-boolean #'clojure.core/parse-boolean
 parse-double #'clojure.core/parse-double
 parse-long #'clojure.core/parse-long
 parse-uuid #'clojure.core/parse-uuid
 partial #'clojure.core/partial
 partition #'clojure.core/partition
 partition-all #'clojure.core/partition-all
 partition-by #'clojure.core/partition-by
 pcalls #'clojure.core/pcalls
 peek #'clojure.core/peek
 persistent! #'clojure.core/persistent!
 pmap #'clojure.core/pmap
 pop #'clojure.core/pop
 pop! #'clojure.core/pop!
 pop-thread-bindings #'clojure.core/pop-thread-bindings
 pos-int? #'clojure.core/pos-int?
 pos? #'clojure.core/pos?
 pp #'clojure.pprint/pp
 pprint #'clojure.pprint/pprint
 pr #'clojure.core/pr
 pr-str #'clojure.core/pr-str
 prefer-method #'clojure.core/prefer-method
 prefers #'clojure.core/prefers
 primitives-classnames #'clojure.core/primitives-classnames
 print #'clojure.core/print
 print-ctor #'clojure.core/print-ctor
 print-dup #'clojure.core/print-dup
 print-method #'clojure.core/print-method
 print-simple #'clojure.core/print-simple
 print-str #'clojure.core/print-str
 printf #'clojure.core/printf
 println #'clojure.core/println
 println-str #'clojure.core/println-str
 prn #'clojure.core/prn
 prn-str #'clojure.core/prn-str
 promise #'clojure.core/promise
 proxy #'clojure.core/proxy
 proxy-call-with-super #'clojure.core/proxy-call-with-super
 proxy-mappings #'clojure.core/proxy-mappings
 proxy-name #'clojure.core/proxy-name
 proxy-super #'clojure.core/proxy-super
 pst #'clojure.repl/pst
 push-thread-bindings #'clojure.core/push-thread-bindings
 pvalues #'clojure.core/pvalues
 qualified-ident? #'clojure.core/qualified-ident?
 qualified-keyword? #'clojure.core/qualified-keyword?
 qualified-symbol? #'clojure.core/qualified-symbol?
 quot #'clojure.core/quot
 rand #'clojure.core/rand
 rand-int #'clojure.core/rand-int
 rand-nth #'clojure.core/rand-nth
 random-sample #'clojure.core/random-sample
 random-uuid #'clojure.core/random-uuid
 range #'clojure.core/range
 ratio? #'clojure.core/ratio?
 rational? #'clojure.core/rational?
 rationalize #'clojure.core/rationalize
 re-find #'clojure.core/re-find
 re-groups #'clojure.core/re-groups
 re-matcher #'clojure.core/re-matcher
 re-matches #'clojure.core/re-matches
 re-pattern #'clojure.core/re-pattern
 re-seq #'clojure.core/re-seq
 read #'clojure.core/read
 read+string #'clojure.core/read+string
 read-line #'clojure.core/read-line
 read-string #'clojure.core/read-string
 reader-conditional #'clojure.core/reader-conditional
 reader-conditional? #'clojure.core/reader-conditional?
 realized? #'clojure.core/realized?
 record? #'clojure.core/record?
 reduce #'clojure.core/reduce
 reduce-kv #'clojure.core/reduce-kv
 reduced #'clojure.core/reduced
 reduced? #'clojure.core/reduced?
 reductions #'clojure.core/reductions
 ref #'clojure.core/ref
 ref-history-count #'clojure.core/ref-history-count
 ref-max-history #'clojure.core/ref-max-history
 ref-min-history #'clojure.core/ref-min-history
 ref-set #'clojure.core/ref-set
 refer #'clojure.core/refer
 refer-clojure #'clojure.core/refer-clojure}
 reify #'clojure.core/reify
 release-pending-sends #'clojure.core/release-pending-sends
 rem #'clojure.core/rem
 remove #'clojure.core/remove
 remove-all-methods #'clojure.core/remove-all-methods
 remove-method #'clojure.core/remove-method
 remove-ns #'clojure.core/remove-ns
 remove-tap #'clojure.core/remove-tap
 remove-watch #'clojure.core/remove-watch
 repeat #'clojure.core/repeat
 repeatedly #'clojure.core/repeatedly
 replace #'clojure.core/replace
 replicate #'clojure.core/replicate
 require #'clojure.core/require
 requiring-resolve #'clojure.core/requiring-resolve
 reset! #'clojure.core/reset!
 reset-meta! #'clojure.core/reset-meta!
 reset-vals! #'clojure.core/reset-vals!
 resolve #'clojure.core/resolve
 rest #'clojure.core/rest
 restart-agent #'clojure.core/restart-agent
 resultset-seq #'clojure.core/resultset-seq
 reverse #'clojure.core/reverse
 reversible? #'clojure.core/reversible?
 rseq #'clojure.core/rseq
 rsubseq #'clojure.core/rsubseq
 run! #'clojure.core/run!
 satisfies? #'clojure.core/satisfies?
 second #'clojure.core/second
 select-keys #'clojure.core/select-keys
 send #'clojure.core/send
 send-off #'clojure.core/send-off
 send-via #'clojure.core/send-via
 seq #'clojure.core/seq
 seq-to-map-for-destructuring #'clojure.core/seq-to-map-for-destructuring
 seq? #'clojure.core/seq?
 seqable? #'clojure.core/seqable?
 seque #'clojure.core/seque
 sequence #'clojure.core/sequence
 sequential? #'clojure.core/sequential?
 set #'clojure.core/set
 set-agent-send-executor! #'clojure.core/set-agent-send-executor!
 set-agent-send-off-executor! #'clojure.core/set-agent-send-off-executor!
 set-error-handler! #'clojure.core/set-error-handler!
 set-error-mode! #'clojure.core/set-error-mode!
 set-validator! #'clojure.core/set-validator!
 set? #'clojure.core/set?
 short #'clojure.core/short
 short-array #'clojure.core/short-array
 shorts #'clojure.core/shorts
 shuffle #'clojure.core/shuffle
 shutdown-agents #'clojure.core/shutdown-agents
 simple-ident? #'clojure.core/simple-ident?
 simple-keyword? #'clojure.core/simple-keyword?
 simple-symbol? #'clojure.core/simple-symbol?
 slurp #'clojure.core/slurp
 some #'clojure.core/some
 some-> #'clojure.core/some->
 some->> #'clojure.core/some->>
 some-fn #'clojure.core/some-fn
 some? #'clojure.core/some?
 sort #'clojure.core/sort
 sort-by #'clojure.core/sort-by
 sorted-map #'clojure.core/sorted-map
 sorted-map-by #'clojure.core/sorted-map-by
 sorted-set #'clojure.core/sorted-set
 sorted-set-by #'clojure.core/sorted-set-by
 sorted? #'clojure.core/sorted?
 source #'clojure.repl/source
 special-symbol? #'clojure.core/special-symbol?
 spit #'clojure.core/spit
 split-at #'clojure.core/split-at
 split-with #'clojure.core/split-with
 str #'clojure.core/str
 string? #'clojure.core/string?
 struct #'clojure.core/struct
 struct-map #'clojure.core/struct-map
 subs #'clojure.core/subs
 subseq #'clojure.core/subseq
 subvec #'clojure.core/subvec
 supers #'clojure.core/supers
 swap! #'clojure.core/swap!
 swap-vals! #'clojure.core/swap-vals!
 symbol #'clojure.core/symbol
 symbol? #'clojure.core/symbol?
 sync #'clojure.core/sync
 tagged-literal #'clojure.core/tagged-literal
 tagged-literal? #'clojure.core/tagged-literal?
 take #'clojure.core/take
 take-last #'clojure.core/take-last
 take-nth #'clojure.core/take-nth
 take-while #'clojure.core/take-while
 tap> #'clojure.core/tap>
 test #'clojure.core/test
 the-ns #'clojure.core/the-ns
 thread-bound? #'clojure.core/thread-bound?
 time #'clojure.core/time
 to-array #'clojure.core/to-array
 to-array-2d #'clojure.core/to-array-2d
 trampoline #'clojure.core/trampoline
 transduce #'clojure.core/transduce
 transient #'clojure.core/transient
 tree-seq #'clojure.core/tree-seq
 true? #'clojure.core/true?
 type #'clojure.core/type
 unchecked-add #'clojure.core/unchecked-add
 unchecked-add-int #'clojure.core/unchecked-add-int
 unchecked-byte #'clojure.core/unchecked-byte
 unchecked-char #'clojure.core/unchecked-char
 unchecked-dec #'clojure.core/unchecked-dec
 unchecked-dec-int #'clojure.core/unchecked-dec-int
 unchecked-divide-int #'clojure.core/unchecked-divide-int
 unchecked-double #'clojure.core/unchecked-double
 unchecked-float #'clojure.core/unchecked-float
 unchecked-inc #'clojure.core/unchecked-inc
 unchecked-inc-int #'clojure.core/unchecked-inc-int
 unchecked-int #'clojure.core/unchecked-int
 unchecked-long #'clojure.core/unchecked-long
 unchecked-multiply #'clojure.core/unchecked-multiply
 unchecked-multiply-int #'clojure.core/unchecked-multiply-int
 unchecked-negate #'clojure.core/unchecked-negate
 unchecked-negate-int #'clojure.core/unchecked-negate-int
 unchecked-remainder-int #'clojure.core/unchecked-remainder-int
 unchecked-short #'clojure.core/unchecked-short
 unchecked-subtract #'clojure.core/unchecked-subtract
 unchecked-subtract-int #'clojure.core/unchecked-subtract-int
 underive #'clojure.core/underive
 unquote #'clojure.core/unquote
 unquote-splicing #'clojure.core/unquote-splicing
 unreduced #'clojure.core/unreduced
 unsigned-bit-shift-right #'clojure.core/unsigned-bit-shift-right
 update #'clojure.core/update
 update-in #'clojure.core/update-in
 update-keys #'clojure.core/update-keys
 update-proxy #'clojure.core/update-proxy
 update-vals #'clojure.core/update-vals
 uri? #'clojure.core/uri?
 use #'clojure.core/use
 uuid? #'clojure.core/uuid?
 val #'clojure.core/val
 vals #'clojure.core/vals
 var-get #'clojure.core/var-get
 var-set #'clojure.core/var-set
 var? #'clojure.core/var?
 vary-meta #'clojure.core/vary-meta
 vec #'clojure.core/vec
 vector #'clojure.core/vector
 vector-of #'clojure.core/vector-of
 vector? #'clojure.core/vector?
 volatile! #'clojure.core/volatile!
 volatile? #'clojure.core/volatile?
 vreset! #'clojure.core/vreset!
 vswap! #'clojure.core/vswap!
 when #'clojure.core/when
 when-first #'clojure.core/when-first
 when-let #'clojure.core/when-let
 when-not #'clojure.core/when-not
 when-some #'clojure.core/when-some
 while #'clojure.core/while
 with-bindings #'clojure.core/with-bindings
 with-bindings* #'clojure.core/with-bindings*
 with-in-str #'clojure.core/with-in-str
 with-loading-context #'clojure.core/with-loading-context
 with-local-vars #'clojure.core/with-local-vars
 with-meta #'clojure.core/with-meta
 with-open #'clojure.core/with-open
 with-out-str #'clojure.core/with-out-str
 with-precision #'clojure.core/with-precision
 with-redefs #'clojure.core/with-redefs
 with-redefs-fn #'clojure.core/with-redefs-fn
 xml-seq #'clojure.core/xml-seq
 zero? #'clojure.core/zero?
 zipmap #'clojure.core/zipmap
