// Generated by CoffeeScript 2.5.1
var ALFABET, ALL, Button, N, ass, buffer, button, buttons, clickLetter, clickNew, clickSolve, clickUndo, clicks, create1296, data, evaluate, i, len, len1, m, o, orientation, prompts, range, ref, ref1, released, secret, setActiveButtons, showHelp, showSolution, showTable, skala, solution, x0, x1, xoff, y0, y1,
  indexOf = [].indexOf;

N = 6;

ALFABET = 'ABCDEF';

range = _.range;

ass = (a, b) => {
  if (a !== b) {
    return console.log('Assert failed', a, '!=', b);
  }
};

create1296 = function() {
  var i, j, k, l, len, len1, len2, len3, m, o, p, q, res;
  res = [];
  for (m = 0, len = ALFABET.length; m < len; m++) {
    i = ALFABET[m];
    for (o = 0, len1 = ALFABET.length; o < len1; o++) {
      j = ALFABET[o];
      for (p = 0, len2 = ALFABET.length; p < len2; p++) {
        k = ALFABET[p];
        for (q = 0, len3 = ALFABET.length; q < len3; q++) {
          l = ALFABET[q];
          res.push(i + j + k + l);
        }
      }
    }
  }
  return res;
};

evaluate = (guess, code) => {
  var correct_positions, incorrect_positions, len, m, n, num_correct, num_transposed, reduced_code, reduced_guess, reduced_set, x;
  if (guess.length !== code.length) {
    return '';
  }
  n = guess.length;
  correct_positions = _.filter(range(n), (i) => {
    return guess[i] === code[i];
  });
  num_correct = correct_positions.length;
  incorrect_positions = _.filter(range(n), (i) => {
    return guess[i] !== code[i];
  });
  reduced_guess = _.map(incorrect_positions, (i) => {
    return guess[i];
  });
  reduced_set = _.uniq(reduced_guess);
  reduced_code = _.map(incorrect_positions, (i) => {
    return code[i];
  });
  num_transposed = 0;
  for (m = 0, len = reduced_set.length; m < len; m++) {
    x = reduced_set[m];
    num_transposed += Math.min(reduced_guess.filter((y) => {
      return y === x;
    }).length, reduced_code.filter((y) => {
      return y === x;
    }).length);
  }
  return `${num_correct}${num_transposed}`;
};

ass('11', evaluate('AABB', 'ABCD'));

ass('11', evaluate('ABCD', 'AABB'));

ass('01', evaluate('5522', '1234'));

ass('11', evaluate('4335', '1234'));

ass('11', evaluate('1415', '1234'));

ass('02', evaluate('3345', '1234'));

ass('13', evaluate('2314', '1234'));

ass('40', evaluate('1234', '1234'));

ALL = create1296();

skala = 1;

xoff = 0;

data = null;

solution = [];

secret = '';

buffer = '';

showSolution = false;

orientation = 0;

window.preload = function() {
  return data = loadJSON("./data_1296.json");
};

window.setup = function() {
  var index, len, m, ref, res;
  createCanvas(windowWidth, windowHeight);
  skala = height / 100;
  textFont("Courier New");
  strokeWeight(0.5);
  data = data.data.split('*');
  res = {};
  ref = range(1296);
  for (m = 0, len = ref.length; m < len; m++) {
    index = ref[m];
    res[ALL[index]] = "AABB" + data[index] + ALL[index];
  }
  data = res;
  return clickNew();
};

//xdraw() ####
showHelp = function(x, y) {
  var i, len, m, ref, results, texts;
  textSize(4);
  texts = [];
  texts.push('Mastermind 1296');
  texts.push('  (6*6*6*6)');
  texts.push('Find the four');
  texts.push(' letter secret!');
  texts.push('');
  texts.push('Max 5 guesses');
  texts.push(' necessary');
  texts.push('');
  texts.push('Example:');
  texts.push(' CBCD (secret)');
  texts.push(' guess => clue');
  texts.push(' AABB  => 01');
  texts.push(' BCDD  => 12');
  texts.push(' CBDE  => 21');
  texts.push(' CBCD  => 40');
  ref = range(texts.length);
  results = [];
  for (m = 0, len = ref.length; m < len; m++) {
    i = ref[m];
    results.push(text(texts[i], x - 8, y + 5 * i));
  }
  return results;
};

showTable = function(table, x, y) { // table = 'ABCDEFGH'
  var answer, i, item, len, m, ref, results, t;
  textSize(6);
  ref = range(0, table.length, 4);
  results = [];
  for (m = 0, len = ref.length; m < len; m++) {
    i = ref[m];
    t = table.substring(i, i + 4);
    item = t;
    answer = evaluate(secret, t);
    if (answer === '40') {
      showSolution = true;
    }
    if (t.length === 4) {
      item = t + ' ' + answer;
    }
    results.push(text(item, x, y + Math.floor(i / 4) * 5));
  }
  return results;
};

window.draw = function() { //###
  var button, len, m;
  push(); //###
  background("white");
  translate(xoff, 0);
  scale(skala);
  textAlign(CENTER, CENTER);
  for (m = 0, len = buttons.length; m < len; m++) {
    button = buttons[m];
    button.draw();
  }
  textAlign(LEFT, TOP);
  if (buffer.length === 0) {
    showHelp(x1, y0);
  } else {
    showTable(buffer, x1, y0);
  }
  if (showSolution) {
    showTable(solution, x1, y1);
  }
  pop(); //###
  return textSize(50);
};

setActiveButtons = () => {
  var antal, gray, n;
  n = buffer.length;
  antal = n % 4;
  gray = buffer.substring(n - antal, n);
  buttons[N + 0].active = true; //showSolution
  buttons[N + 1].active = n > 0;
  return buttons[N + 2].active = buffer.endsWith(secret);
};

Button = class Button {
  constructor(prompt, x2, y2, w, h, ts, click) {
    this.prompt = prompt;
    this.x = x2;
    this.y = y2;
    this.w = w;
    this.h = h;
    this.ts = ts;
    this.click = click;
    this.active = true;
  }

  draw() {
    push();
    textSize(this.ts);
    fill('gray');
    rect(this.x, this.y, this.w, this.h);
    fill(this.active ? 'yellow' : 'lightgray');
    text(this.prompt, this.x + this.w / 2, this.y + this.h * 0.5 + 0.5);
    return pop();
  }

  inside(mx, my) {
    return (this.x <= mx && mx <= this.x + this.w) && (this.y <= my && my <= this.y + this.h) && this.active;
  }

};

clickLetter = function(button) {
  if (!showSolution && buffer.length < 40) {
    buffer += button.prompt;
    return setActiveButtons();
  }
};

clickNew = function() {
  buffer = '';
  secret = _.sample(ALL);
  console.log(secret);
  solution = data[secret];
  showSolution = false;
  return setActiveButtons();
};

clickUndo = function() {
  if (buffer.length === 0) {
    return;
  }
  if (buffer.length === 1) {
    showSolution = false;
  }
  buffer = buffer.substring(0, buffer.length - 1);
  return setActiveButtons();
};

clickSolve = function() {
  if (buffer.length >= 20) {
    return showSolution = true;
  }
};

buttons = [];

x0 = 1; // %

x1 = 30;

y0 = 1;

y1 = 60;

ref = range(N);
for (m = 0, len = ref.length; m < len; m++) {
  i = ref[m];
  button = new Button(ALFABET[i], x0 + i % 2 * 10, y0 + Math.floor(i / 2) * 10, 10, 10, 10);
  button.click = () => {
    return clickLetter(button);
  };
  buttons.push(button);
}

ref1 = range(3);
for (o = 0, len1 = ref1.length; o < len1; o++) {
  i = ref1[o];
  prompts = 'new undo solve'.split(' ');
  clicks = [clickNew, clickUndo, clickSolve];
  button = new Button(prompts[i], x0 + Math.floor(i / 5) * 10, y1 + i % 5 * 10, 20, 10, 6, clicks[i]);
  button.active = false;
  buttons.push(button);
}

released = true;

window.mousePressed = function(event) {
  var len2, p;
  event.preventDefault();
  if (!released) {
    return;
  }
  released = false;
  for (p = 0, len2 = buttons.length; p < len2; p++) {
    button = buttons[p];
    if (button.inside(mouseX / skala, mouseY / skala)) {
      button.click();
    }
  }
  //xdraw() ####
  return false;
};

window.mouseReleased = function(event) {
  event.preventDefault();
  released = true;
  return false;
};

window.keyPressed = function() {
  var s;
  s = '' + key;
  s = s.toUpperCase();
  if (indexOf.call(ALFABET, s) >= 0 && buffer.length < 40) {
    buffer += s;
    setActiveButtons();
  }
  if (keyCode === BACKSPACE) {
    return clickUndo();
  }
};

//xdraw() ####

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\knuth-mastermind_1296\coffee\sketch.coffee