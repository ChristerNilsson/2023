from datetime import datetime
import os
import time
from markdown_it import MarkdownIt
from trn2html import trn2html

mdit = MarkdownIt('commonmark', {'breaks':True,'html':True}).enable('table')

file_count = 0
md_bytes = 0
html_bytes = 0

settings = {
	'rootFolder': "Seniorschack_Stockholm",
	'showExt': False,
	'latestPosts': 4,
}

ROOT = settings['rootFolder']

def title(s): return s.replace('.md','').replace('_',' ').replace('.trn','')

def patch(s):
	s = s.replace('<p><a href=','<div><a href=') # Reason: To have some whitespace between links (margin-bottom)
	s = s.replace('</a></p>','</a></div>')
	s = s.replace('TOUR', 'https://member.schack.se/ShowTournamentServlet?id')
	s = s.replace('SENIOR','https://www.seniorschackstockholm.se')
	s = s.replace('BB2','https://storage.googleapis.com/bildbank2/index.html')
	s = s.replace('ROOT',ROOT)
	s = s.replace('LICHESS','https://lichess.org')
	return s

def writeHtmlFile(filename, t, level, content=""):
	t = title(t)
	index = 1 + filename.rindex("/")
	short_md = filename[index:].replace('.html','.md')
	long_md = filename.replace('.html','.md')
	global file_count
	global html_bytes

	res = [
		'<!-- Generated by makeAll.py 1.0 ' + datetime.now().strftime('%Y-%m-%d %H:%M') + ' -->',
		'<html>',
		'	<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />',
		'	<head>',
		f'		<title>{t}</title>',
		# '		<link rel="icon" type="image/x-icon" href="favicon.ico">',
		'		<meta charset = "utf-8"/>'
	]
	for i in reversed(range(level)):
		res.append('		<link href="' + i * '../' + 'style.css" rel="stylesheet" type="text/css" >')
	res.append('	</head>')
	res.append('<body>')

	if os.path.exists(long_md):
		res += [f'<h1><a style="color:#000; background-color:#aaa" href="{short_md}">{t}</a> </h1>']
	else:
		res += [f'<h1>{t}</h1>']

	res += [content]

	res.append('</body>')
	res.append('</html>')

	with open(filename, 'w', encoding='utf8') as g:
		s = '\n'.join(res)
		g.write(s)
		html_bytes += len(s)

def noExt(s):
	s = s.replace("_", " ")
	if settings['showExt']: return s
	else: return s[:s.rindex('.')]

def getLink(f,level):
	# print('\t' * level + f.name)
	with open(f.path,encoding='utf8') as f: return patch(f.read().strip())

def tablify(posts,dir):
	res = [f'<tr><td><a href="{dir}{f}">{noExt(f).replace("/files/posts","")}</a></td></tr>' for f in posts]
	if dir != "": res += ['<tr><td><a href="files/posts/Alla_nyheter.html">Alla nyheter</a></td></tr>']
	return "<table>" + "\n".join(res) + "</table>"

def getPosts(directory=settings["rootFolder"] + "/files/posts"):
	files = os.listdir(directory)
	all = files[::-1]
	all = [f for f in all if not f.endswith('.md') and not f.endswith('index.html') and not f.endswith('Alla_nyheter.html')]

	writeHtmlFile(directory+'/Alla_nyheter.html', 'Alla nyheter', 3, tablify(all,""))
	return tablify(all[:settings["latestPosts"]],"files/posts/")

def makeMenu(href,title): return [title, href]

def transpileDir(directory, level=0):

	if type(directory) is str:
		path = directory
		name = directory
	else:
		path = directory.path
		name = directory.name

	# print('\t'*level + name)

	if name == 'files' or name.endswith('.css'): return

	name = name.replace("_", " ")

	hash_md = []
	hash_html = []
	hash_link = []
	hash_directory = []
	hash_others = []

	indexHtml = ""
	# for f in os.scandir(path):
	# 	if os.path.isfile(f) and f.name.endswith('.trn'):
	# 		filename = f.path.replace('.trn', '.html').replace('\\', '/')
	# 		data = trn2html(f.path)
	# 		writeHtmlFile(filename, f.name, level+1, data)

	for f in os.scandir(path):
		if os.path.isfile(f) and f.name.endswith('.md'):
			if f.name == 'index.md':
				if f.name != 'files': indexHtml = transpileFile(f.path, f.name, level)
			else:
				html = transpileFile(f.path, f.name, level)
				if html:
					filename = f.path.replace('.md', '.html').replace('\\', '/')
					writeHtmlFile(filename, f.name, level + 1, html)

	for f in os.scandir(path):
		if os.path.isfile(f):
			if f.name.endswith('.md'): hash_md.append(f)
			elif f.name.endswith('.html'): hash_html.append(f)
			elif f.name.endswith('.link'): hash_link.append(f)
			elif f.name.endswith('.trn'): pass
			elif f.name not in ['favicon.ico','style.css']: hash_others.append(f)
			else: pass
		else:
			if f.name != 'files': hash_directory.append(f)

	res = []

	for f in hash_html: # L채gg in i menyn
		if f.name != 'index.html': res += [[noExt(f.name), f.name]]

	for f in hash_link:  # L채gg in i menyn
		res += [[noExt(f.name),getLink(f, level + 1)]]

	for f in hash_others:  # L채gg in i menyn
		res += [[noExt(f.name), f.name]]

	for f in hash_directory:  # L채gg in i menyn
		res += [[f.name, f.name]]
		transpileDir(f, level + 1)

	res.sort()
	# res = [f"<div><a href='{href}'>{title}</a></div>" for [title,href] in res]

	res = [f"<tr><td><a href='{href}'>{title}</a></td></tr>" for [title,href] in res]
	res = "<table>" + "\n".join(res) + "</table>"

	# Skapa index.html
	if indexHtml == "":
		indexHtml = res #"\n".join(res)
	elif indexHtml:
		indexHtml = indexHtml.replace("CONTENT", res)
		indexHtml = indexHtml.replace("POSTS", posts)
	if indexHtml:
		writeHtmlFile(path + '/index.html', name, level+1, indexHtml)

def done(infileName,outfileName):
	md = os.path.getmtime(infileName)
	html = os.path.getmtime(outfileName)
	return md <= html

def transpileFile(long,short,level=0):
	global md_bytes
	global file_count

	if done(long,long.replace('.md','.html')): return

	with open(long,encoding='utf8') as f:
		md = f.read()
		# print('\t' * (level + 1) + short, f'({len(md)} bytes) =>', short.replace('.md', '.html'))
		file_count += 1
		md_bytes += len(md)
		html = mdit.render(md)
		html = patch(html)
	return html

start = time.time_ns()
posts = getPosts()
transpileDir(ROOT,0)
transpileDir(ROOT + '/files/posts',2)
print()
print(md_bytes,'=>',html_bytes,'bytes')
print(file_count, 'files took', round((time.time_ns() - start)/10**6),'ms')
