import {maxWeightMatching} from './mwmatching.js'
# from math import pi,exp,sqrt

ass = (a,b) ->
	if _.isEqual b, maxWeightMatching a
		console.log ''
		console.log a
		console.log b,'ok'
	else
		console.log ''
		console.log a 
		console.log b,'assert failure'

assTrue = (a,b) ->
	if _.isEqual b, maxWeightMatching a,true
		console.log ''
		console.log a
		console.log b,'ok'
	else
		console.log ''
		console.log a
		console.log b,'assert failure'

range = _.range


# INPUT OUTPUT

# OK
# ass [], []
# ass [[0,1,1]], [1, 0]
# ass [ [1,2,10], [2,3,11] ], [ -1, -1, 3, 2 ]
# ass [ [1,2,5], [2,3,11], [3,4,5] ], [ -1, -1, 3, 2, -1 ]
# assTrue [ [1,2,5], [2,3,11], [3,4,5] ],  [ -1, 2, 1, 4, 3 ]

# ass [ [1,2,2], [1,3,-2], [2,3,1], [2,4,-1], [3,4,-6] ],  [ -1, 2, 1, -1, -1 ]
# ass [ [1,2,8], [1,3,9], [2,3,10], [3,4,7], [1,6,5], [4,5,6] ],  [ -1, 6, 3, 2, 5, 4, 1 ]
# ass [ [1,2,9], [1,3,8], [2,3,10], [1,4,5], [4,5,4], [1,6,3] ],  [ -1, 6, 3, 2, 5, 4, 1 ]
# ass [ [1,2,23], [1,5,22], [1,6,15], [2,3,25], [3,4,22], [4,5,25], [4,8,14], [5,7,13] ],  [ -1, 6, 3, 2, 8, 7, 1, 5, 4 ]
# assTrue [ [1,2,2], [1,3,-2], [2,3,1], [2,4,-1], [3,4,-6] ],  [ -1, 3, 4, 1, 2 ]

# ass [ [1,2,8], [1,3,9], [2,3,10], [3,4,7] ],   [ -1, 2, 1, 4, 3 ]
# ass [ [1,2,9], [1,3,8], [2,3,10], [1,4,5], [4,5,3], [1,6,4] ],  [ -1, 6, 3, 2, 5, 4, 1 ]
# ass [ [1,2,9], [1,3,8], [2,3,10], [1,4,5], [4,5,3], [3,6,4] ],  [ -1, 2, 1, 6, 5, 4, 3 ]
# ass [ [1,2,8], [1,3,8], [2,3,10], [2,4,12], [3,5,12], [4,5,14], [4,6,12], [5,7,12], [6,7,14], [7,8,12] ],  [ -1, 2, 1, 5, 6, 3, 4, 8, 7 ]
# ass [ [1,2,40], [1,3,40], [2,3,60], [2,4,55], [3,5,55], [4,5,50], [1,8,15], [5,7,30], [7,6,10], [8,10,10], [4,9,30] ],  [ -1, 2, 1, 5, 9, 3, 7, 6, 10, 4, 8 ]

# ass [ [1,2,9], [1,3,9], [2,3,10], [2,4,8], [3,5,8], [4,5,10], [5,6,6] ],  [ -1, 3, 4, 1, 2, 6, 5 ]
# ass [ [1,2,10], [1,7,10], [2,3,12], [3,4,20], [3,5,20], [4,5,25], [5,6,10], [6,7,10], [7,8,8] ], [ -1, 2, 1, 4, 3, 6, 5, 8, 7 ]
# ass [ [1,2,19], [1,3,20], [1,8,8], [2,3,25], [2,4,18], [3,5,18], [4,5,13], [4,7,7], [5,6,7] ], [ -1, 8, 3, 2, 7, 6, 5, 4, 1 ]
# ass [ [1,2,45], [1,5,45], [2,3,50], [3,4,45], [4,5,50], [1,6,30], [3,9,35], [4,8,35], [5,7,26], [9,10,5] ], [ -1, 6, 3, 2, 8, 7, 1, 5, 4, 10, 9 ]
# ass [ [1,2,45], [1,7,45], [2,3,50], [3,4,45], [4,5,95], [4,6,94], [5,6,94], [6,7,50], [1,8,30], [3,11,35], [5,9,36], [7,10,26], [11,12,5] ], [ -1, 8, 3, 2, 6, 9, 4, 10, 1, 5, 7, 12, 11 ]

# ass [ [1,2,45], [1,5,45], [2,3,50], [3,4,45], [4,5,50], [1,6,30], [3,9,35], [4,8,26], [5,7,40], [9,10,5] ], [ -1, 6, 3, 2, 8, 7, 1, 5, 4, 10, 9 ]
# ass [ [1,2,45], [1,5,45], [2,3,50], [3,4,45], [4,5,50], [1,6,30], [3,9,35], [4,8,28], [5,7,26], [9,10,5] ], [ -1, 6, 3, 2, 8, 7, 1, 5, 4, 10, 9 ]

# FAIL
# HANG
# CRASCH

start = new Date()

# edges = []
# N = 10
# for i in range 1,N+1
# 	for j in range i+1,N+1
# 		edges.push [i,j,_.random 1,10]

edges = [
[15,16,987],
[9,12,973],
[19,22,963],
[7,10,956],
[7,12,949],
[6,11,937],
[6,12,934],
[18,23,915],
[15,19,901],
[15,20,900],
[17,22,880],
[3,8,880],
[3,9,878],
[2,8,877],
[16,23,875],
[2,9,875],
[14,17,856],
[15,24,842],
[8,13,839],
[15,25,838],
[15,26,835],
[14,18,819],
[7,13,817],
[6,13,802],
[9,14,766],
[14,21,758],
[13,18,744],
[7,14,742],
[6,14,727],
[14,24,714],
[14,25,710],
[13,20,697],
[13,21,683],
[14,27,676],
[13,24,639],
[8,15,636],
[13,25,635],
[13,26,632],
[7,15,614],
[11,18,609],
[10,18,605],
[13,27,601],
[6,15,599],
[5,16,585],
[5,17,582],
[12,19,566],
[12,20,565],
[11,19,563],
[11,20,562],
[10,19,559],
[12,21,551],
[5,18,545],
[10,21,544],
[4,16,540],
[4,17,537],
[12,24,507],
[11,24,504],
[12,25,503],
[3,16,503],
[9,22,502],
[12,26,500],
[11,25,500],
[10,24,500],
[9,23,500],
[8,22,500],
[4,18,500],
[3,17,500],
[2,16,500],
[5,19,499],
[8,23,498],
[5,20,498],
[11,26,497],
[2,17,497],
[10,25,496],
[10,26,493],
[1,16,487],
[5,21,484],
[1,17,484],
[7,22,478],
[7,23,476],
[12,27,469],
[11,27,466],
[6,22,463],
[3,18,463],
[10,27,462],
[6,23,461],
[2,18,460],
[4,19,454],
[4,20,453],
[1,18,447],
[5,24,440],
[4,21,439],
[5,25,436],
[5,26,433],
[3,19,417],
[3,20,416],
[2,19,414],
[2,20,413],
[5,27,402],
[3,21,402],
[1,19,401],
[1,20,400],
[2,21,399],
[4,24,395],
[4,25,391],
[4,26,388],
[0,16,359],
[3,24,358],
[4,27,357],
[0,17,356],
[3,26,351],
[2,25,351],
[2,26,348],
[1,24,342],
[1,25,338],
[1,26,335],
[3,27,320],
[0,18,319],
[2,27,317],
[1,27,304],
[0,19,273],
[0,21,258],
[0,24,214],
[0,25,210],
[0,26,207],
[0,27,176]
]

# console.log edges

console.log 'big',maxWeightMatching edges

console.log 'Ready!',new Date() - start

# NOT NEEDED
# ass [ [1,2,Math.pi], [2,3,Math.exp(1)], [1,3,3.0], [1,4,Math.sqrt(2.0)] ], [ -1, 4, 3, 2, 1 ]
