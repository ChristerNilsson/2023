// Generated by CoffeeScript 2.7.0
  // TODO ½ #######################################
  // Bläddra mellan ronder med LEFT och RIGHT
  // Skippa canvas, använda html istället?
  // Testa att läsa skapade url:er
  // Spara Zoom i urlen
  // Visa hjälprad som anger möjliga tangenter
  //   TABLES: up down 1 space 0 delete enter Pair Small Large
  //   RESULT: up down enter pause
  // createURL ska skicka runt bl a SP ZOOM TPP PPP
  // Visa namnlistan på skärmen?
  // Hantera frirond
  // Tie Break - hantering
  // Sortera på [score, elo, name]
  // Kunna scrolla canvas, med pilar eller mushjulet.

// Ge perfekt felmeddelande för fel i URL-en.
  //   Fel antal ronder i Color, Result
  //   Fel antal ELO

// Parkera spelare. PARK=(12|34). Resultatskärmen, Pause-knappen 

// Testa på Mac. (klippbordet)

// Publicera på chess-results? Skapa lämplig fil.

// DONE #########################################
  // Initialer i showResult.
  // Den markerade radens höjd och bredd ska också zoomas
  // Lispinspirerad URL med () och |
  // Alfabetisk Namnlista. Bord Färg Namn => 1w NILSSON Christer
  // Print bordslista
  // Skriv ut URL i samband med lottning till egen fil.
  // Inför en variabel TPP som anger antal Tables per sida. t ex TPP=30
  // Inför en variabel PPP som anger antal Players per sida. t ex PPP=60
  // Inför ScorePoints. SP=0.1 ger de sex talen, SP=0.0 är default
  // FIRST avgör om första spelaren ska ha vit eller svart i första ronden
  // Hantera kontrollinmatning av resultat
  // Markera Table med gul rektangel
  // Delete ska nollställa nuvarande resultat
  // Res Externt=0½1, internt=012
  // WB ska vara wb överallt, även i urlen

// LOW ########################################
  // Införa Dutch Manager? Vet ej hur det ska hanteras. Just nu möts 1-2 i tredje ronden. Finns ingen publik kod, FIDE:s lagtext svår att tolka.

// NOT TODO #####################################
  // Välj Dutch eller Swiss i URL-en (LOW)
  // localStorage (i princip urlen) Behövs localStorage?
  // Repetition av piltangenter (NIX, går för fort)
  // Två kolumner vid många spelare
  // Backa en eller flera ronder? (Kan göras mha sparade URL:er)
  // Ange färg för första bordet i URL-en (EASY) FIRST=WHITE, FIRST=BLACK (default)
  // Hantera 1 till 8 partier per team/person GAMES=1 (default)
  // Hastighetsjämförelser (javafo, swiss-manager, min kod, monrad, swiss)
  // Jämför lottningsresultat. Förklara skillnader.
var ASCII, HELP, N, Player, Tournament, ZOOM, assert, calc, calcT, cdf, copyToClipboard, currentTable, datum, downloadFile, errors, initials, ints2strings, invert, message, mw, myRound, ok, other, prBoth, prRes, print, range, res2string, resultat, setT0, showHelp, showType, state, sum, tournament, xdraw, xxx,
  indexOf = [].indexOf,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

import {
  parseExpr
} from './parser.js';

HELP = `How to use Schwisch Manager:
	Enter = Switch between Tables and Result
	Home = Select First Table
	Up   = Select Previous Table
	Down = Select Next Table
	End  = Select Last Table
	0 = Enter a Loss for White Player
	space = Enter a Draw
	1 = Enter a Win for White Player
	Delete = Remove erroneous result
	P = Perform Pairing
	S = Make text smaller
	L = Make text larger
	? = Show this Help Page
	H = Show Help for constructing the URL`.split('\n');

ASCII = '0123456789abcdefg';

N = 0; // number of players

ZOOM = [
  40,
  40,
  40 // vertical line distance for three states
];

print = console.log;

range = _.range;

datum = '';

currentTable = 0;

tournament = null;

errors = []; // id för motsägelsefulla resultat. Tas bort med Delete

state = 0; // 0=Tables 1=Result 2=Help

resultat = []; // 012 sorterad på id

showType = function(a) {
  if (typeof a === 'string') {
    return `'${a}'`;
  } else {
    return a;
  }
};

assert = function(a, b) {
  if (!_.isEqual(a, b)) {
    return print(`Assert failure: ${showType(a)} != ${showType(b)}`);
  }
};

ok = function(p0, p1) {
  var ref;
  return p0.id !== p1.id && (ref = p0.id, indexOf.call(p1.opp, ref) < 0) && abs(p0.balans() + p1.balans()) <= 1; // eller 2
};

other = function(col) {
  if (col === 'b') {
    return 'w';
  } else {
    return 'b';
  }
};

message = ''; //This is a tutorial tournament. Use it or edit the URL'

myRound = function(x, decs) {
  return x.toFixed(decs);
};

assert("2.0", myRound(1.99, 1));

assert("0.6", myRound(0.61, 1));

ints2strings = function(ints) {
  return `${ints}`;
};

assert("1,2,3", ints2strings([1, 2, 3]));

assert("1", ints2strings([1]));

assert("", ints2strings([]));

res2string = function(ints) {
  var i;
  return ((function() {
    var j, len, results;
    results = [];
    for (j = 0, len = ints.length; j < len; j++) {
      i = ints[j];
      results.push(i.toString());
    }
    return results;
  })()).join('');
};

assert("123", res2string([1, 2, 3]));

assert("1", res2string([1]));

assert("", res2string([]));

xxx = [[2, 1], [12, 2], [12, 1], [3, 4]];

xxx.sort(function(a, b) {
  var diff;
  diff = a[0] - b[0];
  if (diff === 0) {
    return a[1] - b[1];
  } else {
    return diff;
  }
});

assert([[2, 1], [3, 4], [12, 1], [12, 2]], xxx);

assert(true, [2] > [12]);

assert(true, "2" > "12");

assert(false, 2 > 12);

// xxx = [[2,1],[12,2],[12,1],[3,4]]
// assert [[2,1],[3,4],[12,2]], _.sortBy(xxx, (x) -> [x[0],x[1]])
// assert [[3,4],[2,1],[1,2]], _.sortBy(xxx, (x) -> -x[0])
// assert [[2,1],[1,2],[3,4]], _.sortBy(xxx, (x) -> x[1])
// assert [[3,4],[1,2],[2,1]], _.sortBy(xxx, (x) -> -x[1])
initials = function(name) {
  var arr, j, len, res, s;
  res = "";
  arr = name.replace('-', ' ').split(' ');
  for (j = 0, len = arr.length; j < len; j++) {
    s = arr[j];
    res += s[0];
  }
  return res;
};

assert('cn', initials('christer nilsson'));

assert('JLB', initials('JOHANSSON Lennart B.'));

cdf = function(x) { // https://www.geeksforgeeks.org/javascript-program-for-normal-cdf-calculator/
  var D, T, cd;
  T = 1 / (1 + 0.2316419 * Math.abs(x));
  D = 0.3989423 * Math.exp(-x * x / 2);
  cd = D * T * (0.3193815 + T * (-0.3565638 + T * (1.781478 + T * (-1.821256 + T * 1.330274))));
  if (x > 0) {
    return 1 - cd;
  } else {
    return cd;
  }
};

calc = function(winner, loser, result, K) {
  var diff, u;
  diff = winner - loser;
  u = diff / 400 * sqrt(2);
  return (result - cdf(u)) * K;
};

// elodiff = (games,K=20) -> [calc(a,b,res,K) for a,b,res in games]
Player = class Player {
  constructor(id, elo = "", name1 = "", opp = [], col2 = "", res1 = "") {
    this.id = id;
    this.elo = elo;
    this.name = name1;
    this.opp = opp;
    this.col = col2;
    this.res = res1;
  }

  eloDiff() {
    var i, j, len, ref, result;
    result = 0;
    ref = range(this.res.length);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      result += calc(this.elo, tournament.persons[this.opp[i]].elo, 0.5 * parseInt(this.res[i]), 20);
    }
    return result;
  }

  balans() { // färgbalans
    var ch, j, len, ref, result;
    result = 0;
    ref = this.col;
    for (j = 0, len = ref.length; j < len; j++) {
      ch = ref[j];
      if (ch === 'b') {
        result -= 1;
      }
      if (ch === 'w') {
        result += 1;
      }
    }
    return result;
  }

  score() {
    var i, j, key, len, n, ref, result, sp;
    result = 0;
    n = tournament.round;
    if (state === 0) {
      n = n - 1;
    }
    sp = tournament.sp;
    ref = range(n);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      if (i < this.col.length && i < this.res.length) {
        key = this.col[i] + this.res[i];
        result += {
          'w2': 1 - sp,
          'b2': 1,
          'w1': 0.5 - sp,
          'b1': 0.5 + sp,
          'w0': 0,
          'b0': sp
        }[key];
      }
    }
    return result;
  }

  read(player) {
    var arr, col, j, len, ocr, ocrs;
    
    // (1234|Christer|(12w0|23b½|14w)) 
    // (1234|Christer) 
    // print 'read',player
    this.elo = parseInt(player[0]);
    this.name = player[1];
    // print @elo 
    this.opp = [];
    this.col = "";
    this.res = "";
    if (player.length < 3) {
      return;
    }
    ocrs = player[2];
//print 'ocrs',ocrs
    for (j = 0, len = ocrs.length; j < len; j++) {
      ocr = ocrs[j];
      //print 'ocr',ocr
      if (indexOf.call(ocr, 'w') >= 0) {
        col = 'w';
      } else {
        col = 'b';
      }
      arr = ocr.split(col);
      this.opp.push(parseInt(arr[0]));
      this.col += col;
      if (arr.length === 2 && arr[1].length === 1) {
        //print 'arr',arr[1]
        this.res += {
          '0': '0',
          '½': '1',
          '1': '2'
        }[arr[1]];
      }
    }
    
    //print @res
    return print(this);
  }

  write() { // (1234|Christer|(12w0|23b½|14w)) Elo:1234 Name:Christer opponent:23 color:b result:½
    var i, nn, ocr, res;
    res = [];
    res.push(this.elo);
    res.push(this.name.replaceAll(' ', '_'));
    nn = this.opp.length;
    // ocr = ("#{@opp[i]}#{@col[i]}#{if i < nn-1 then "0½1"[@res[i]] else ''}" for i in range(nn)) 
    ocr = (function() {
      var j, len, ref, results;
      ref = range(nn);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        results.push(`${this.opp[i]}${this.col[i]}${i < nn ? "0½1"[this.res[i]] : ''}`);
      }
      return results;
    }).call(this);
    res.push('(' + ocr.join('|') + ')');
    return res.join('|');
  }

};

Tournament = class Tournament {
  constructor() {
    this.name = '';
    this.rounds = 0;
    this.round = 0;
    this.sp = 0.1; // 0.01
    this.tpp = 30;
    this.ppp = 60;
    // dessa tre listor pekar på samma objekt
    this.players = [];
    this.persons = []; // stabil, sorterad på id och elo
    this.pairings = []; // varierar med varje rond
    this.fetchURL();
  }

  // @round -= 1
  //@lotta()
  write() {}

  lotta() {
    var a, b, i, j, k, len, len1, p, ref, ref1, start, timestamp;
    print('Lottning av rond ', this.round);
    document.title = 'Round ' + (this.round + 1);
    print(this.players);
    ref = this.players;
    for (j = 0, len = ref.length; j < len; j++) {
      p = ref[j];
      if (p.res.length !== p.col.length) {
        print('avbrutet!');
        return;
      }
    }
    if (this.round === 0) {
      this.pairings = this.players;
      print('Apairings', this.pairings);
      this.round = 1;
    } else {
      timestamp = new Date().toLocaleString('se-SE');
      print("lotta ROUND", this.round);
      print('tournament', tournament);
      downloadFile(tournament.makeTableFile(" for " + this.name + ` in Round ${this.round}    ${timestamp}`), this.name + ` Round ${this.round}.txt`);
      downloadFile(this.createURL(), "URL for " + this.name + ` Round ${this.round}.txt`);
      this.round += 1;
      //			@pairings = _.sortBy @players, (player) -> [player.score(), -player.elo]
      this.pairings = _.sortBy(this.players, function(player) {
        return [-player.elo];
      });
      if (this.round % 2 === 0) {
        this.pairings = this.pairings.reverse();
      }
      start = new Date();
      this.pairings = this.pair(this.pairings);
      print('Bpairings', this.pairings);
      print(this.round, `${new Date() - start} milliseconds`);
    }
    //colorize @pairings
    //assignColors @pairings
    this.adjustForColors();
    ref1 = range(Math.floor(N / 2));
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      i = ref1[k];
      a = this.pairings[2 * i];
      b = this.pairings[2 * i + 1];
      a.opp.push(b.id);
      b.opp.push(a.id);
      //a.res += ' '
      //b.res += ' '
      this.assignColors(a, b);
    }
    state = 0;
    print({'pairings after pairing': 'pairings after pairing', pairings: this.pairings});
    return xdraw();
  }

  fetchURL(url = location.search) {
    var getParam, i, j, k, len, len1, player, players, ref, ref1, urlParams;
    print('fetchURL');
    print(url);
    getParam = function(name, def) {
      var res;
      res = urlParams.get(name);
      //if res then res else def
      return res || def;
    };
    urlParams = new URLSearchParams(url);
    this.players = [];
    this.name = urlParams.get('TOUR').replace('_', ' ');
    this.datum = urlParams.get('DATE') || "";
    this.rounds = parseInt(urlParams.get('ROUNDS'));
    this.round = parseInt(urlParams.get('ROUND'));
    this.first = getParam('FIRST', 'bw'); // Determines if first player has white or black in the first round
    this.sp = parseFloat(getParam('SP', 0.0)); // ScorePoints
    this.tpp = parseInt(getParam('TPP', 30)); // Tables Per Page
    this.ppp = parseInt(getParam('PPP', 60)); // Players Per Page
    players = urlParams.get('PLAYERS');
    print(players);
    players = players.replaceAll(')(', ')|(');
    players = players.replaceAll('_', ' ');
    players = '(' + players + ')';
    players = parseExpr(players);
    print('xxx', players);
    N = players.length;
    if (N < 4) {
      print("Error: Number of players must be 4 or more!");
      return;
    }
    if (N > 100) {
      print("Error: Number of players must be 100 or less!");
      return;
    }
    ref = range(N);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      player = new Player(i);
      player.read(players[i]);
      this.players.push(player);
    }
    print(this.players);
    this.players = _.sortBy(this.players, function(player) {
      return player.elo;
    });
    this.players = this.players.reverse();
    this.persons = _.cloneDeep(this.players);
    ref1 = range(N);
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      i = ref1[k];
      this.players[i].id = i;
    }
    this.persons = _.clone(this.players);
    print('sorted players', this.players);
    if (this.ROUND > 0) {

    } else {
      //opps = urlParams.get('OPP').split '|'
      //cols = urlParams.get('COL').split '|'
      //ress = urlParams.get('RES').split '|'
      //if names.length != opps.length != cols.length != ress.length != elos.length
      //	print "Error: Illegal number of players in OPP, COL, ELO or RES!"
      //	return

      //opps = _.map opps, (r) -> _.map opp.split(','), (s) -> parseInt s
      //ress = _.map ress, (res) -> _.map res, (ch) -> parseInt ch

      // for i in range N
      // 	if ress[i].length != opps[i].length != cols[i].length != ress[i].length
      // 		print "Error: Illegal number of rounds for player #{names[i]}!"
      // 		return
      // 	@players[i].name = names[i]
      // 	@players[i].col = cols[i]
      // 	@players[i].res = ress[i]
      // 	@players[i].opp = opps[i] 
      // 	#@players[i].tie = [0,0,0]
      // print(@players)
      if (N % 2 === 1) {
        this.players.push(new Player(N, 0, '-frirond-'));
        return N += 1;
      }
    }
  }

  // persons = _.map range(N), (i) -> {id:i, name: res.NAME[i], elo: res.ELO[i], col:'', res:[], bal:0, opp:[], T:[]}
  flip(p0, p1) { // p0 byter färg, p0 anpassar sig
    var col0, col1;
    print('flip', p0.col, p1.col);
    col0 = _.last(p0.col);
    col1 = col0;
    col0 = other(col0);
    p0.col += col0;
    return p1.col += col1;
  }

  assignColors(p0, p1) {
    var balans, col0, col1;
    if (p0.col.length === 0) {
      col1 = this.first[p0.id % 2];
      col0 = other(col1);
      p0.col += col0;
      return p1.col += col1;
    } else {
      balans = p0.balans() + p1.balans();
      if (balans === 0) {
        return this.flip(p0, p1);
      } else if (2 === abs(balans)) {
        if (2 === abs(p0.balans())) {
          return this.flip(p0, p1);
        } else {
          return this.flip(p1, p0);
        }
      }
    }
  }

  pair(persons, pairing = []) {
    var a, b, j, len, newPairing, newPersons, p, result;
    if (pairing.length === N) {
      return pairing;
    }
    a = persons[0];
    for (j = 0, len = persons.length; j < len; j++) {
      b = persons[j];
      if (!ok(a, b)) {
        continue;
      }
      newPersons = (function() {
        var k, len1, results;
        results = [];
        for (k = 0, len1 = persons.length; k < len1; k++) {
          p = persons[k];
          if (p !== a && p !== b) {
            results.push(p);
          }
        }
        return results;
      })();
      newPairing = pairing.concat([a, b]);
      result = this.pair(newPersons, newPairing);
      if (result.length === N) {
        return result;
      }
    }
    return [];
  }

  txtT(value, w, align = window.CENTER) {
    var diff, lt, res, rt;
    if (value.length > w) {
      value = value.substring(0, w);
    }
    if (value.length < w && align === window.RIGHT) {
      value = value.padStart(w);
    }
    if (align === window.LEFT) {
      res = value + _.repeat(' ', w - value.length);
    }
    if (align === window.RIGHT) {
      res = _.repeat(' ', w - value.length) + value;
    }
    if (align === window.CENTER) {
      diff = w - value.length;
      lt = _.repeat(' ', Math.floor((1 + diff) / 2));
      rt = _.repeat(' ', Math.floor(diff / 2));
      res = lt + value + rt;
    }
    return res;
  }

  //assert "   Sven   ", txtT "Sven",10
  showHeader(header) {
    var s, y;
    y = ZOOM[state] / 2;
    textAlign(LEFT, CENTER);
    s = '';
    s += this.txtT(`${this.name} ${this.datum}`, 30, window.LEFT);
    s += ' ' + this.txtT(header, 22, window.CENTER);
    s += ' ' + this.txtT('Round ' + this.round, 30, window.RIGHT);
    fill('black');
    return text(s, 10, y);
  }

  txt(value, x, y, align = null, color = null) {
    if (align) {
      textAlign(align, CENTER);
    }
    if (color) {
      fill(color);
    }
    return text(value, x, y);
  }

  showTables() {
    var a, b, both, i, j, len, nr, pa, pb, ref, results, s, y;
    this.showHeader('Tables');
    y = 1.5 * ZOOM[state];
    s = "";
    s += this.txtT('#', 2, window.RIGHT);
    s += ' ' + this.txtT('Score', 5, window.RIGHT);
    s += ' ' + this.txtT('Elo', 4, window.RIGHT);
    s += ' ' + this.txtT('White', 25, window.LEFT);
    s += ' ' + this.txtT('Result', 7, window.CENTER);
    s += ' ' + this.txtT('Black', 25, window.LEFT);
    s += ' ' + this.txtT('Elo', 4, window.LEFT);
    s += ' ' + this.txtT('Score', 5, window.RIGHT);
    fill('black');
    textAlign(window.LEFT);
    text(s, 10, y);
    print('pairings.length', this.pairings.length);
    ref = range(Math.floor(N / 2));
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      y += ZOOM[state] * 0.5;
      a = this.pairings[2 * i];
      b = this.pairings[2 * i + 1];
      pa = myRound(a.score(), 1);
      pb = myRound(b.score(), 1);
      both = a.res.length === a.col.length ? prBoth(_.last(a.res)) : "   -   ";
      nr = i + 1;
      s = "";
      s += this.txtT(nr.toString(), 2, window.RIGHT);
      s += ' ' + this.txtT(pa, 5);
      s += ' ' + this.txtT(a.elo.toString(), 4, window.RIGHT);
      s += ' ' + this.txtT(a.name, 25, window.LEFT);
      s += ' ' + this.txtT(both, 7, window.CENTER);
      s += ' ' + this.txtT(b.name, 25, window.LEFT);
      s += ' ' + this.txtT(b.elo.toString(), 4, window.RIGHT);
      s += ' ' + this.txtT(pb, 5, window.CENTER);
      if (i === currentTable) {
        fill('yellow');
        noStroke();
        rect(0, y - 0.25 * ZOOM[state], width, 0.5 * ZOOM[state]);
        fill('black');
      } else {
        if (indexOf.call(errors, i) >= 0) {
          fill('red');
        } else {
          fill('black');
        }
      }
      results.push(text(s, 10, y));
    }
    return results;
  }

  lightbulb(color, x, y, result, opponent) {
    var strokeWeight;
    // print 'lightbulb',color, x, y, result, opponent
    push();
    //print 'lightbulb',result
    // result = 2 * '0½1'.indexOf result
    result = '012'.indexOf(result);
    //print 'lightbulb',result
    fill('red gray green'.split(' ')[result]);
    rectMode(CENTER);
    rect(x, y, 0.84 * ZOOM[state], 0.45 * ZOOM[state]);
    fill({
      b: 'black',
      w: 'white'
    }[color]);
    noStroke();
    strokeWeight = 0;
    //		@txt 1+opponent,x,y+1,CENTER
    this.txt(opponent, x, y + 1, CENTER);
    return pop();
  }

  createURL() {
    var j, len, player, players, ref, res, s;
    res = [];
    //res.push "https://christernilsson.github.io/2023/044-Monrad"
    res.push("http://127.0.0.1:5500");
    res.push("?TOUR=" + this.name.replace(' ', '_'));
    res.push("&DATE=" + "2023-11-25");
    res.push("&ROUNDS=" + this.rounds);
    res.push("&ROUND=" + this.round);
    res.push("&PLAYERS=");
    players = [];
    ref = this.players;
    for (j = 0, len = ref.length; j < len; j++) {
      player = ref[j];
      s = player.write();
      players.push('(' + s + ')');
    }
    players = players.join("\n");
    res = res.concat(players);
    // res.push "&NAME=" + (_.map @players, (person) -> person.name.replaceAll " ","_").join "|"
    // res.push "&ELO=" + (_.map @players, (person) -> person.elo).join "|"
    // #if persons[0].opp.length> 0
    // res.push "&OPP=" + (_.map @players, (person) -> (_.map person.opp, ints2strings)).join "|"
    // res.push "&COL=" + (_.map @players, (person) -> person.col).join "|"
    // res.push "&RES=" + (_.map @players, (person) -> res2string person.res).join "|"
    return res.join('\n');
  }

  adjustForColors() {
    var i, j, len, ref, res;
    print('adjustForColors', N, this.pairings.length);
    res = [];
    ref = range(Math.floor(N / 2));
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      if (this.pairings[2 * i].col.length === 0) {
        if (i % 2 === 0) {
          res.push(this.pairings[2 * i + 1]);
          res.push(this.pairings[2 * i]);
        } else {
          res.push(this.pairings[2 * i]);
          res.push(this.pairings[2 * i + 1]);
        }
      } else if ('w' === _.last(this.pairings[2 * i].col)) {
        res.push(this.pairings[2 * i]);
        res.push(this.pairings[2 * i + 1]);
      } else {
        res.push(this.pairings[2 * i + 1]);
        res.push(this.pairings[2 * i]);
      }
    }
    
    // if @pairings[2*i].col.length == 0 or 'w' == _.last @pairings[2*i].col
    // 	res.push @pairings[2*i] # w
    // 	res.push @pairings[2*i+1] # b
    // else
    // 	res.push @pairings[2*i+1] # w
    // 	res.push @pairings[2*i] # b
    return this.pairings = res;
  }

  makeTableFile(header) {
    var a, b, i, j, k, len, len1, p, players, ref, res;
    res = [];
    print(header);
    print('makeTableFile', this.pairings);
    players = (function() {
      var j, len, ref, results;
      ref = range(N);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        results.push([this.pairings[i], i]);
      }
      return results;
    }).call(this);
    players = _.sortBy(players, function(p) {
      return p[0].name;
    });
    players = (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = players.length; j < len; j++) {
        [p, i] = players[j];
        results.push(`${_.pad((1 + Math.floor(i / 2)).toString() + 'wb'[i % 2], 5)} ${p.name}`);
      }
      return results;
    })();
    res.push("NAMES" + header);
    res.push("");
    for (i = j = 0, len = players.length; j < len; i = ++j) {
      p = players[i];
      if (i % this.ppp === 0) {
        res.push("Table Name");
      }
      res.push(p);
      if (i % this.ppp === this.ppp - 1) {
        res.push("\f");
      }
    }
    res.push("\f");
    res.push("TABLES" + header);
    res.push("");
    ref = range(Math.floor(N / 2));
    for (k = 0, len1 = ref.length; k < len1; k++) {
      i = ref[k];
      if (i % this.tpp === 0) {
        res.push("Table White".padEnd(6 + 25) + _.pad("", 20) + 'Black'.padEnd(25));
      }
      a = this.pairings[2 * i];
      b = this.pairings[2 * i + 1];
      res.push("");
      res.push(_.pad(i + 1, 6) + a.name.padEnd(25) + _.pad("|____| - |____|", 20) + b.name.padEnd(25));
      if (i % this.tpp === this.tpp - 1) {
        res.push("\f");
      }
    }
    return res.join("\n");
  }

  showResult() {
    var i, inv, j, len, p, person, r, results, rheader, s, score, temp, x, y;
    this.showHeader('Result');
    print('showResult');
    if (this.pairings.length === 0) {
      txt("This ROUND can't be paired! (Too many rounds)", width / 2, height / 2, CENTER);
      return;
    }
    noStroke();
    // calcT()

    // _.sortBy på [score, elo] verkar inte fungera pga array jämförs som sträng?
    temp = _.clone(this.players);
    temp.sort(function(a, b) {
      var diff;
      diff = b.score() - a.score();
      if (diff !== 0) {
        return diff;
      }
      return b.elo - a.elo;
    });
    print('tempA', temp);
    //temp.reverse()
    inv = (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = temp.length; j < len; j++) {
        p = temp[j];
        results.push(p.id);
      }
      return results;
    })();
    inv = invert(inv);
    y = 1.5 * ZOOM[state];
    textAlign(LEFT);
    rheader = _.map(range(1, this.rounds + 1), function(i) {
      return `${i % 10} `;
    });
    rheader = rheader.join(' ');
    s = "";
    s += this.txtT("#", 2);
    s += ' ' + this.txtT("Elo", 4, window.RIGHT);
    s += ' ' + this.txtT("Name", 25, window.LEFT);
    s += ' ' + this.txtT(rheader, 3 * this.rounds, window.LEFT);
    s += ' ' + this.txtT("Score", 5, window.RIGHT);
    s += ' ' + this.txtT("±Elo", 6, window.RIGHT);
    s += ' ' + this.txtT("D", 2, window.CENTER);
    s += ' ' + this.txtT("W", 1, window.CENTER);
    s += ' ' + this.txtT("B", 2, window.CENTER);
    text(s, 10, y);
    fill('white');
    results = [];
    for (i = j = 0, len = temp.length; j < len; i = ++j) {
      person = temp[i];
      y += ZOOM[state] * 0.5;
      s = "";
      s += this.txtT((1 + i).toString(), 2, window.RIGHT);
      s += ' ' + this.txtT(person.elo.toString(), 4, window.RIGHT);
      s += ' ' + this.txtT(person.name, 25, window.LEFT);
      s += ' ' + this.txtT('', 3 * this.rounds, window.CENTER);
      print(person);
      score = person.score();
      score = myRound(score, 1);
      s += ' ' + this.txtT(score, 5, window.RIGHT);
      s += ' ' + this.txtT(myRound(person.eloDiff(), 1).toString(), 6, window.RIGHT);
      // s += ' ' + @txtT prRes(person.tie[0]),2,window.CENTER
      // s += ' ' + @txtT       person.tie[1], 2,window.CENTER
      // s += ' ' + @txtT prRes(person.tie[2]),2,window.CENTER
      text(s, 10, y);
      results.push((function() {
        var k, len1, ref, results1;
        ref = range(this.round - 1);
        //print('round',round)
        results1 = [];
        for (k = 0, len1 = ref.length; k < len1; k++) {
          r = ref[k];
          x = ZOOM[state] * (10.5 + 0.9 * r);
          // print r,person.col[r][0], x, y, person.res[r], inv[person.opp[r]]
          // @lightbulb person.col[r][0], x, y, person.res[r], initials @players[inv[person.opp[r]]].name
          results1.push(this.lightbulb(person.col[r][0], x, y, person.res[r], initials(this.persons[person.opp[r]].name)));
        }
        return results1;
      }).call(this));
    }
    return results;
  }

};

copyToClipboard = function(text) {
  var textarea;
  if (!navigator.clipboard) {
    textarea = document.createElement('textarea');
    textarea.value = text;
    document.boF.appendChild(textarea);
    textarea.select();
    document.execCommand('copy');
    document.boF.removeChild(textarea);
    return message = 'Urlen har kopierats till klippbordet 1';
  } else {
    return navigator.clipboard.writeText(text).then(() => {
      return message = 'Urlen har kopierats till klippbordet 2';
    }).catch((err) => {
      return message('Kopiering till klippbordet misslyckades');
    });
  }
};

sum = function(s) {
  var item, j, len, res;
  res = 0;
  for (j = 0, len = s.length; j < len; j++) {
    item = s[j];
    res += parseInt(item);
  }
  return res;
};

assert(6, sum('012012'));

// getMet = (a,b) -> b.id in persons[a.id].opp
downloadFile = function(txt, filename) {
  var a, blob, url;
  print('filename', filename);
  blob = new Blob([txt], {
    type: 'text/plain'
  });
  url = URL.createObjectURL(blob);
  a = document.createElement('a');
  a.href = url;
  a.download = filename;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  return URL.revokeObjectURL(url);
};

prBoth = function(score) {
  var a, ax, b, bx;
  a = ASCII.indexOf(score);
  b = 2 - a;
  ax = prRes(score);
  bx = prRes(ASCII[b]);
  if (ax.length === 1) {
    ax = ' ' + ax;
  }
  if (bx.length === 1) {
    bx = bx + ' ';
  }
  return ax + ' - ' + bx;
};

prRes = function(score) {
  var a, b;
  score = ASCII.indexOf(score);
  a = `${Math.floor(score / 2)}`;
  if (a === "0") {
    a = "";
  }
  b = score % 2 === 1 ? '½' : '';
  if (a + b === "") {
    return '0';
  }
  return a + b;
};

assert('0', prRes('0'));

assert('½', prRes('1'));

assert('1', prRes('2'));

assert('1½', prRes('3'));

assert('4', prRes('8'));

assert('5', prRes('a'));

assert('5½', prRes('b'));

invert = function(arr) {
  var i, j, len, ref, res;
  res = [];
  ref = range(arr.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    res[arr[i]] = i;
  }
  return res;
};

assert([0, 1, 2, 3], invert([0, 1, 2, 3]));

assert([3, 2, 0, 1], invert([2, 3, 1, 0]));

setT0 = function(p, q) {
  var r;
  if (indexOf.call(persons[p].opp, q) >= 0) {
    return r = persons[p].opp.indexOf(q);
  }
};

// persons[p].tie[0] = persons[p].res[r]
calcT = function() {
  var j, key, len, p, person, q, ref, results, scores;
  // T ska beräknas först när allt är klart!
  // Beräkna T1 bara för de poänggrupper som har exakt två personer och då enbart om de har mött varandra.
  // Oklart om detta används för grupper med t ex tre personer. Låg sannolikhet att alla mött varandra.
  scores = {};
  ref = range(persons.length);
  for (j = 0, len = ref.length; j < len; j++) {
    p = ref[j];
    person = persons[p];
    key = sum(person.res);
    if (key in scores) {
      scores[key].push(p);
    } else {
      scores[key] = [p];
    }
  }
// person.tie[0] = 0
  results = [];
  for (key in scores) {
    if (scores[key].length === 2) {
      [p, q] = scores[key];
      setT0(p, q);
      results.push(setT0(q, p));
    } else {
      results.push(void 0);
    }
  }
  return results;
};

// for p in persons
// 	p.tie[1] = p.res.split("").filter((x) => x == '2').length
// 	p.tie[2] = 0
// 	for i in p.opp
// 		p.tie[2] += sum persons[i].res # Buchholz: the sum of opposition scores
mw = function(x) {
  return x / 1000 * width;
};

//########## GUI ############
// if location.search == ''
// 	title = 'Tutorial Tournament'
// 	datum = new Date()
// 	datum = datum.toISOString().split('T')[0]
// 	url = "?T=#{title.replace(" ","_")}&NAME=ANDERSSON_Anders|BENGTSSON_Bertil|CARLSEN_Christer|DANIELSSON_Daniel|ERIKSSON_Erik|FRANSSON_Ferdinand|GREIDER_Göran|HARALDSSON_Helge"
// 	location.href = url
// else
// 	fetchURL()
// 	pairings = persons
showHelp = function() {
  var i, j, len, ref, results;
  textAlign(LEFT);
  ref = range(HELP.length);
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    results.push(text(HELP[i], 100, 50 + 50 * i));
  }
  return results;
};

window.windowResized = function() {
  resizeCanvas(windowWidth - 4, windowHeight - 4);
  return xdraw();
};

window.setup = function() {
  createCanvas(windowWidth - 4, windowHeight - 4);
  textFont('Courier New');
  textAlign(CENTER, CENTER);
  tournament = new Tournament();
  //tournament.fetchURL()
  tournament.lotta();
  state = 0;
  return xdraw();
};

xdraw = function() {
  background('gray');
  textSize(ZOOM[state] * 0.5);
  if (state === 0) {
    tournament.showTables();
  }
  if (state === 1) {
    tournament.showResult();
  }
  if (state === 2) {
    return tournament.showHelp();
  }
};

window.keyPressed = function() {
  var a, b, ch, e, i, index, j, len, ref;
  // print key
  if (key === 'Home') {
    currentTable = 0;
  }
  if (key === 'ArrowUp') {
    currentTable = modulo(currentTable - 1, Math.floor(N / 2));
  }
  if (key === 'ArrowDown') {
    currentTable = modulo(currentTable + 1, Math.floor(N / 2));
  }
  if (key === 'End') {
    currentTable = (Math.floor(N / 2)) - 1;
  }
  index = 2 * currentTable;
  a = tournament.pairings[index];
  b = tournament.pairings[index + 1];
  if (indexOf.call('0 1', key) >= 0) {
    index = '0 1'.indexOf(key);
    ch = "012"[index];
    if (a.res.length === a.col.length) {
      if (ch !== _.last(a.res)) {
        errors.push(currentTable);
        print('errors', errors);
      }
    } else {
      if (a.res.length < a.col.length) {
        a.res += "012"[index];
      }
      if (b.res.length < b.col.length) {
        b.res += "210"[index];
      }
    }
    currentTable = modulo(currentTable + 1, Math.floor(N / 2));
  }
  if (key === 'Enter') {
    state = 1 - state;
  }
  // if state == 1
  // 	calcT()
  if (indexOf.call('pP', key) >= 0) {
    tournament.lotta();
  }
  if (indexOf.call('l', key) >= 0) {
    ZOOM[state] += 1;
  }
  if (indexOf.call('s', key) >= 0) {
    ZOOM[state] -= 1;
  }
  if (indexOf.call('L', key) >= 0) {
    ZOOM[state] += 4;
  }
  if (indexOf.call('S', key) >= 0) {
    ZOOM[state] -= 4;
  }
  if (key === 'x') {
    ref = range(Math.floor(tournament.pairings.length / 2));
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      a = tournament.pairings[2 * i];
      b = tournament.pairings[2 * i + 1];
      index = i % 3;
      if (a.res.length < a.col.length) {
        a.res += "012"[index];
      }
      if (b.res.length < b.col.length) {
        b.res += "012"[2 - index];
      }
    }
  }
  if (key === 'Delete') {
    i = currentTable;
    errors = (function() {
      var k, len1, results;
      results = [];
      for (k = 0, len1 = errors.length; k < len1; k++) {
        e = errors[k];
        if (e !== i) {
          results.push(e);
        }
      }
      return results;
    })();
    if (a.res.length === b.res.length) {
      a = tournament.pairings[2 * i];
      b = tournament.pairings[2 * i + 1];
      a.res = a.res.substring(0, a.res.length - 1);
      b.res = b.res.substring(0, b.res.length - 1);
    }
    currentTable = modulo(currentTable + 1, Math.floor(N / 2));
  }
  return xdraw();
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023\044-Monrad\coffee\schwisch.coffee