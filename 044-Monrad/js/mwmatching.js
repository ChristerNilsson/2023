// Generated by CoffeeScript 2.5.1
  // print = console.log
var ass, lines, print, range,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  splice = [].splice;

range = _.range;

lines = [];

print = function(_a, _b = '', _c = '', _d = '', _e = '', _f = '') {
  var _s;
  _s = _a + ' :';
  if (_b !== '') {
    _s += ' ' + JSON.stringify(_b);
  }
  if (_c !== '') {
    _s += ' ' + JSON.stringify(_c);
  }
  if (_d !== '') {
    _s += ' ' + JSON.stringify(_d);
  }
  if (_e !== '') {
    _s += ' ' + JSON.stringify(_e);
  }
  if (_f !== '') {
    _s += ' ' + JSON.stringify(_f);
  }
  console.log(_s);
  return lines.push(_s + "\n");
};

ass = function(a, b) {
  if (_.isEqual(a, b)) {
    console.log('');
    console.log(a);
    return console.log(b, 'ok');
  } else {
    console.log('');
    console.log(a);
    return console.log(b, 'assert failure');
  }
};

export var maxWeightMatching = function(edges, maxcardinality = false) {
  var _i, _j, _k, _w, addBlossom, allowedge, assignLabel, augmentBlossom, augmentMatching, augmented, b, base, bestedge, blossomLeaves, blossombase, blossombestedges, blossomchilds, blossomendps, blossomparent, d, delta, deltablossom, deltaedge, deltatype, dualvar, dump, endpoint, expandBlossom, i, i1, inblossom, item, j, j1, k, k1, kslack, l, label, labelend, len, len1, len10, len11, len2, len3, len4, len5, len6, len7, len8, len9, m, mate, maxweight, nedge, neighbend, nvertex, o, p, q, queue, r, ref, ref1, ref10, ref11, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, scanBlossom, slack, t, u, unusedblossoms, v, w, wt, x, y, z;
  if (!edges.length) {
    return [];
  }
  nedge = edges.length;
  nvertex = 0;
  for (l = 0, len = edges.length; l < len; l++) {
    [_i, _j, _w] = edges[l];
    if (_i >= nvertex) {
      nvertex = _i + 1;
    }
    if (_j >= nvertex) {
      nvertex = _j + 1;
    }
  }
  maxweight = Math.max(0, _.max((function() {
    var len1, m, results;
    results = [];
    for (m = 0, len1 = edges.length; m < len1; m++) {
      [_i, _j, wt] = edges[m];
      results.push(wt);
    }
    return results;
  })()));
  endpoint = (function() {
    var len1, m, ref, results;
    ref = range(2 * nedge);
    results = [];
    for (m = 0, len1 = ref.length; m < len1; m++) {
      _i = ref[m];
      results.push(edges[Math.floor(_i / 2)][_i % 2]);
    }
    return results;
  })();
  neighbend = (function() {
    var len1, m, ref, results;
    ref = range(nvertex);
    results = [];
    for (m = 0, len1 = ref.length; m < len1; m++) {
      _i = ref[m];
      results.push([]);
    }
    return results;
  })();
  ref = range(edges.length);
  for (m = 0, len1 = ref.length; m < len1; m++) {
    _k = ref[m];
    [_i, _j, _w] = edges[_k];
    neighbend[_i].push(2 * _k + 1);
    neighbend[_j].push(2 * _k);
  }
  mate = (function() {
    var len2, o, ref1, results;
    ref1 = range(nvertex);
    results = [];
    for (o = 0, len2 = ref1.length; o < len2; o++) {
      _i = ref1[o];
      results.push(-1);
    }
    return results;
  })();
  label = (function() {
    var len2, o, ref1, results;
    ref1 = range(2 * nvertex);
    results = [];
    for (o = 0, len2 = ref1.length; o < len2; o++) {
      _i = ref1[o];
      results.push(0);
    }
    return results;
  })();
  labelend = (function() {
    var len2, o, ref1, results;
    ref1 = range(2 * nvertex);
    results = [];
    for (o = 0, len2 = ref1.length; o < len2; o++) {
      _i = ref1[o];
      results.push(-1);
    }
    return results;
  })();
  inblossom = (function() {
    var len2, o, ref1, results;
    ref1 = range(nvertex);
    results = [];
    for (o = 0, len2 = ref1.length; o < len2; o++) {
      _i = ref1[o];
      results.push(_i);
    }
    return results;
  })();
  blossomparent = (function() {
    var len2, o, ref1, results;
    ref1 = range(2 * nvertex);
    results = [];
    for (o = 0, len2 = ref1.length; o < len2; o++) {
      _i = ref1[o];
      results.push(-1);
    }
    return results;
  })();
  blossomchilds = (function() {
    var len2, o, ref1, results;
    ref1 = range(2 * nvertex);
    results = [];
    for (o = 0, len2 = ref1.length; o < len2; o++) {
      _i = ref1[o];
      results.push(null);
    }
    return results;
  })();
  blossombase = ((function() {
    var len2, o, ref1, results;
    ref1 = range(nvertex);
    results = [];
    for (o = 0, len2 = ref1.length; o < len2; o++) {
      _i = ref1[o];
      results.push(_i);
    }
    return results;
  })()).concat((function() {
    var len2, o, ref1, results;
    ref1 = range(nvertex);
    results = [];
    for (o = 0, len2 = ref1.length; o < len2; o++) {
      _j = ref1[o];
      results.push(-1);
    }
    return results;
  })());
  blossomendps = (function() {
    var len2, o, ref1, results;
    ref1 = range(2 * nvertex);
    results = [];
    for (o = 0, len2 = ref1.length; o < len2; o++) {
      _i = ref1[o];
      results.push(null);
    }
    return results;
  })();
  bestedge = (function() {
    var len2, o, ref1, results;
    ref1 = range(2 * nvertex);
    results = [];
    for (o = 0, len2 = ref1.length; o < len2; o++) {
      _i = ref1[o];
      results.push(-1);
    }
    return results;
  })();
  blossombestedges = (function() {
    var len2, o, ref1, results;
    ref1 = range(2 * nvertex);
    results = [];
    for (o = 0, len2 = ref1.length; o < len2; o++) {
      _i = ref1[o];
      results.push(null);
    }
    return results;
  })();
  unusedblossoms = (function() {
    var len2, o, ref1, results;
    ref1 = range(nvertex, 2 * nvertex);
    results = [];
    for (o = 0, len2 = ref1.length; o < len2; o++) {
      _i = ref1[o];
      results.push(_i);
    }
    return results;
  })();
  dualvar = ((function() {
    var len2, o, ref1, results;
    ref1 = range(nvertex);
    results = [];
    for (o = 0, len2 = ref1.length; o < len2; o++) {
      _i = ref1[o];
      results.push(maxweight);
    }
    return results;
  })()).concat((function() {
    var len2, o, ref1, results;
    ref1 = range(nvertex);
    results = [];
    for (o = 0, len2 = ref1.length; o < len2; o++) {
      _j = ref1[o];
      results.push(0);
    }
    return results;
  })());
  allowedge = (function() {
    var len2, o, ref1, results;
    ref1 = range(nedge);
    results = [];
    for (o = 0, len2 = ref1.length; o < len2; o++) {
      _i = ref1[o];
      results.push(false);
    }
    return results;
  })();
  queue = [];
  dump = function() {
    print('nedge', nedge);
    print('edges', edges);
    print('nvertex', nvertex);
    print('maxweight', maxweight);
    print('endpoint', endpoint);
    print('neighbend', neighbend);
    print('mate', mate);
    print('label', label);
    print('labelend', labelend);
    print('inblossom', inblossom);
    print('blossomparent', blossomparent);
    print('blossomchilds', blossomchilds);
    print('blossombase', blossombase);
    print('blossomendps', blossomendps);
    print('bestedge', bestedge);
    print('blossombestedges', blossombestedges);
    print('unusedblossoms', unusedblossoms);
    print('dualvar', dualvar);
    print('allowedge', allowedge);
    return print('queue', queue);
  };
  dump();
  slack = function(k) {
    var i, j, res;
    [i, j, wt] = edges[k];
    res = dualvar[i] + dualvar[j] - 2 * wt;
    print('slack k i j wt res', k, i, j, wt, res);
    return res;
  };
  blossomLeaves = function*(b) {
    var len2, o, ref1, results, t, v;
    print('blossomLeaves b', b);
    if (b < nvertex) {
      return (yield b);
    } else {
      ref1 = blossomchilds[b];
      // print('blossomLeaves length b',blossomchilds.length,b)
      results = [];
      for (o = 0, len2 = ref1.length; o < len2; o++) {
        t = ref1[o];
        // print('blossomLeaves t',t)
        if (t < nvertex) {
          results.push((yield t));
        } else {
          results.push((yield* (function*() {
            var ref2, results1;
            ref2 = blossomLeaves(t);
            results1 = [];
            for (v of ref2) {
              results1.push((yield v));
            }
            return results1;
          })()));
        }
      }
      return results;
    }
  };
  assignLabel = function(w, t, p) {
    var b, base, ref1, results, v;
    print('assignLabel w t p', w, t, p);
    b = inblossom[w];
    label[w] = label[b] = t;
    labelend[w] = labelend[b] = p;
    bestedge[w] = bestedge[b] = -1;
    if (t === 1) {
      ref1 = blossomLeaves(b);
      // OBS: "from" behÃ¶vs pga generator!
      //print 'assignLabel b',b
      results = [];
      for (v of ref1) {
        results.push(queue.push(v));
      }
      return results;
    } else if (t === 2) {
      base = blossombase[b];
      return assignLabel(endpoint[mate[base]], 1, mate[base] ^ 1);
    }
  };
  scanBlossom = function(v, w) {
    var b, base, len2, o, path;
    print('scanBlossom v w', v, w);
    path = [];
    base = -1;
    while (v !== -1 || w !== -1) {
      b = inblossom[v];
      if (label[b] & 4) {
        base = blossombase[b];
        break;
      }
      path.push(b);
      label[b] = 5;
      if (labelend[b] === -1) {
        v = -1;
      } else {
        v = endpoint[labelend[b]];
        b = inblossom[v];
        v = endpoint[labelend[b]];
      }
      if (w !== -1) {
        [v, w] = [w, v];
      }
    }
    for (o = 0, len2 = path.length; o < len2; o++) {
      b = path[o];
      label[b] = 1;
    }
    return base;
  };
  addBlossom = function(base, k) {
    var b, bb, bestedgeto, bj, bv, bw, endps, i, j, len2, len3, len4, len5, nblist, nblists, o, p, path, q, r, ref1, ref2, results, u, v, w;
    [v, w, wt] = edges[k];
    print('addBlossom base k v w wt', base, k, v, w, wt);
    bb = inblossom[base];
    bv = inblossom[v];
    bw = inblossom[w];
    b = unusedblossoms.pop();
    blossombase[b] = base;
    blossomparent[b] = -1;
    blossomparent[bb] = b;
    blossomchilds[b] = path = [];
    blossomendps[b] = endps = [];
    while (bv !== bb) {
      blossomparent[bv] = b;
      path.push(bv);
      endps.push(labelend[bv]);
      v = endpoint[labelend[bv]];
      bv = inblossom[v];
    }
    path.push(bb);
    path.reverse();
    endps.reverse();
    endps.push(2 * k);
    while (bw !== bb) {
      blossomparent[bw] = b;
      path.push(bw);
      endps.push(labelend[bw] ^ 1);
      w = endpoint[labelend[bw]];
      bw = inblossom[w];
    }
    label[b] = 1;
    labelend[b] = labelend[bb];
    dualvar[b] = 0;
    ref1 = blossomLeaves(b);
    //print 'addBlossom b',b
    for (v of ref1) {
      if (label[inblossom[v]] === 2) {
        queue.push(v);
      }
      inblossom[v] = b;
    }
    bestedgeto = (function() {
      var len2, o, ref2, results;
      ref2 = range(2 * nvertex);
      results = [];
      for (o = 0, len2 = ref2.length; o < len2; o++) {
        i = ref2[o];
        results.push(-1);
      }
      return results;
    })();
    for (o = 0, len2 = path.length; o < len2; o++) {
      bv = path[o];
      if (blossombestedges[bv] === null) {
        //print 'addBlossom bv',bv
        nblists = (function() {
          var ref2, results;
          ref2 = blossomLeaves(bv);
          results = [];
          for (v of ref2) {
            results.push((function() {
              var len3, q, ref3, results1;
              ref3 = neighbend[v];
              results1 = [];
              for (q = 0, len3 = ref3.length; q < len3; q++) {
                p = ref3[q];
                results1.push(Math.floor(p / 2));
              }
              return results1;
            })());
          }
          return results;
        })();
      } else {
        nblists = [blossombestedges[bv]];
      }
      for (q = 0, len3 = nblists.length; q < len3; q++) {
        nblist = nblists[q];
        for (r = 0, len4 = nblist.length; r < len4; r++) {
          k = nblist[r];
          [i, j, wt] = edges[k];
          if (inblossom[j] === b) {
            [i, j] = [j, i];
          }
          bj = inblossom[j];
          if (bj !== b && label[bj] === 1 && (bestedgeto[bj] === -1 || slack(k) < slack(bestedgeto[bj]))) {
            bestedgeto[bj] = k;
          }
        }
      }
      blossombestedges[bv] = null;
      bestedge[bv] = -1;
    }
    blossombestedges[b] = (function() {
      var len5, results, u;
      results = [];
      for (u = 0, len5 = bestedgeto.length; u < len5; u++) {
        k = bestedgeto[u];
        if (k !== -1) {
          results.push(k);
        }
      }
      return results;
    })();
    bestedge[b] = -1;
    ref2 = blossombestedges[b];
    results = [];
    for (u = 0, len5 = ref2.length; u < len5; u++) {
      k = ref2[u];
      if (bestedge[b] === -1 || slack(k) < slack(bestedge[b])) {
        results.push(bestedge[b] = k);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };
  expandBlossom = function(b, endstage) {
    var bv, endptrick, entrychild, j, jstep, len2, n, o, p, ref1, ref2, ref3, s, v;
    print('expandBlossom b endstage', b, endstage);
    ref1 = blossomchilds[b];
    for (o = 0, len2 = ref1.length; o < len2; o++) {
      s = ref1[o];
      blossomparent[s] = -1;
      if (s < nvertex) {
        inblossom[s] = s;
      } else if (endstage && dualvar[s] === 0) {
        expandBlossom(s, endstage);
      } else {
        ref2 = blossomLeaves(s);
        //print 'expandBlossom s',s
        for (v of ref2) {
          inblossom[v] = s;
        }
      }
    }
    if ((!endstage) && label[b] === 2) {
      entrychild = inblossom[endpoint[labelend[b] ^ 1]];
      j = blossomchilds[b].indexOf(entrychild);
      if (j & 1) {
        j -= blossomchilds[b].length;
        jstep = 1;
        endptrick = 0;
      } else {
        jstep = -1;
        endptrick = 1;
      }
      p = labelend[b];
      while (j !== 0) {
        label[endpoint[p ^ 1]] = 0;
        label[endpoint[blossomendps[b][j - endptrick] ^ endptrick ^ 1]] = 0;
        assignLabel(endpoint[p ^ 1], 2, p);
        allowedge[Math.floor(blossomendps[b][j - endptrick] / 2)] = true;
        j += jstep;
        p = blossomendps[b][j - endptrick] ^ endptrick;
        allowedge[Math.floor(p / 2)] = true;
        j += jstep;
      }
      bv = blossomchilds[b][j];
      label[endpoint[p ^ 1]] = label[bv] = 2;
      labelend[endpoint[p ^ 1]] = labelend[bv] = p;
      bestedge[bv] = -1;
      j += jstep;
      n = blossomchilds[b].length;
      //print('expandBlossom j',j)
      while (blossomchilds[b][modulo(j, n)] !== entrychild) {
        bv = blossomchilds[b][modulo(j, n)];
        if (label[bv] === 1) {
          j += jstep;
          continue;
        }
        ref3 = blossomLeaves(bv);
        //print 'expandBlossom bv',bv
        for (v of ref3) {
          if (label[v] !== 0) {
            break;
          }
        }
        if (label[v] !== 0) {
          label[v] = 0;
          label[endpoint[mate[blossombase[bv]]]] = 0;
          assignLabel(v, 2, labelend[v]);
        }
        j += jstep;
      }
    }
    label[b] = labelend[b] = -1;
    blossomchilds[b] = blossomendps[b] = null;
    blossombase[b] = -1;
    blossombestedges[b] = null;
    bestedge[b] = -1;
    return unusedblossoms.push(b);
  };
  augmentBlossom = function(b, v) {
    var _p, endptrick, i, j, jstep, n, t;
    print('augmentBlossom b v', b, v);
    print('endpoint', endpoint);
    print('blossomendps', blossomendps);
    print('blossomchilds', blossomchilds);
    t = v;
    while (blossomparent[t] !== b) {
      t = blossomparent[t];
    }
    if (t >= nvertex) {
      augmentBlossom(t, v);
    }
    i = j = blossomchilds[b].indexOf(t);
    if (i & 1) {
      j -= blossomchilds[b].length;
      jstep = 1;
      endptrick = 0;
    } else {
      jstep = -1;
      endptrick = 1;
    }
    print('i j jstep endptrick', i, j, jstep, endptrick);
    while (j !== 0) {
      j += jstep;
      n = blossomchilds[b].length;
      t = blossomchilds[b][modulo(n + j, n)];
      _p = blossomendps[b][modulo(n + j - endptrick, n)] ^ endptrick;
      print('p', _p);
      if (t >= nvertex) {
        augmentBlossom(t, endpoint[_p]);
      }
      j += jstep;
      t = blossomchilds[b][modulo(n + j, n)];
      if (t >= nvertex) {
        augmentBlossom(t, endpoint[_p ^ 1]);
      }
      print('mate p p^1', mate, _p, _p ^ 1);
      print('endpoint p', endpoint[_p], _p);
      mate[endpoint[_p]] = _p ^ 1;
      mate[endpoint[_p ^ 1]] = _p;
      print('mate', mate); //mate[endpoint[p]],   endpoint[p],   p)
    }
    //print('mate endpoint p^1', mate[endpoint[p^1]], endpoint[p^1], p^1)
    blossomchilds[b] = blossomchilds[b].slice(i).concat(blossomchilds[b].slice(0, i));
    blossomendps[b] = blossomendps[b].slice(i).concat(blossomendps[b].slice(0, i));
    blossombase[b] = blossombase[blossomchilds[b][0]];
    print('blossomchilds', blossomchilds);
    print('blossomendps', blossomendps);
    return print('blossombase', blossombase);
  };
  augmentMatching = function(k) {
    var bs, bt, j, len2, o, p, ref1, s, t, v, w;
    [v, w, wt] = edges[k];
    print('augmentMatching k v w wt', k, v, w, wt);
    print('labelend', labelend);
    print('inblossom', inblossom);
    ref1 = [[v, 2 * k + 1], [w, 2 * k]];
    for (o = 0, len2 = ref1.length; o < len2; o++) {
      [s, p] = ref1[o];
      print('s p', s, p);
      while (true) {
        bs = inblossom[s];
        print('bs', bs);
        if (bs >= nvertex) {
          augmentBlossom(bs, s);
        }
        mate[s] = p;
        print('s mate[s]', s, mate[s]);
        if (labelend[bs] === -1) {
          print('break');
          break;
        }
        t = endpoint[labelend[bs]];
        bt = inblossom[t];
        s = endpoint[labelend[bt]];
        j = endpoint[labelend[bt] ^ 1];
        if (bt >= nvertex) {
          augmentBlossom(bt, j);
        }
        mate[j] = labelend[bt];
        print('j mate[j]', j, mate[j]);
        p = labelend[bt] ^ 1;
        print('p2', p);
      }
    }
    return print('mate', mate);
  };
  ref1 = range(nvertex);
  for (o = 0, len2 = ref1.length; o < len2; o++) {
    t = ref1[o];
    label = (function() {
      var len3, q, ref2, results;
      ref2 = range(2 * nvertex);
      results = [];
      for (q = 0, len3 = ref2.length; q < len3; q++) {
        item = ref2[q];
        results.push(0);
      }
      return results;
    })();
    bestedge = (function() {
      var len3, q, ref2, results;
      ref2 = range(2 * nvertex);
      results = [];
      for (q = 0, len3 = ref2.length; q < len3; q++) {
        item = ref2[q];
        results.push(-1);
      }
      return results;
    })();
    splice.apply(blossombestedges, [nvertex, 9e9].concat(ref2 = (function() {
      var len3, q, ref3, results;
      ref3 = range(nvertex);
      results = [];
      for (q = 0, len3 = ref3.length; q < len3; q++) {
        item = ref3[q];
        results.push(null);
      }
      return results;
    })())), ref2;
    allowedge = (function() {
      var len3, q, ref3, results;
      ref3 = range(nedge);
      results = [];
      for (q = 0, len3 = ref3.length; q < len3; q++) {
        item = ref3[q];
        results.push(false);
      }
      return results;
    })();
    queue = [];
    ref3 = range(nvertex);
    for (q = 0, len3 = ref3.length; q < len3; q++) {
      v = ref3[q];
      if (mate[v] === -1 && label[inblossom[v]] === 0) {
        assignLabel(v, 1, -1);
      }
    }
    augmented = false;
    while (true) {
      while (queue.length > 0 && !augmented) {
        v = queue.pop();
        ref4 = neighbend[v];
        for (r = 0, len4 = ref4.length; r < len4; r++) {
          p = ref4[r];
          k = Math.floor(p / 2);
          w = endpoint[p];
          if (inblossom[v] === inblossom[w]) {
            continue;
          }
          if (!allowedge[k]) {
            kslack = slack(k);
            if (kslack <= 0) {
              allowedge[k] = true;
            }
          }
          if (allowedge[k]) {
            if (label[inblossom[w]] === 0) {
              assignLabel(w, 2, p ^ 1);
            } else if (label[inblossom[w]] === 1) {
              base = scanBlossom(v, w);
              if (base >= 0) {
                addBlossom(base, k);
              } else {
                augmentMatching(k);
                augmented = true;
                break;
              }
            } else if (label[w] === 0) {
              label[w] = 2;
              labelend[w] = p ^ 1;
            }
          } else if (label[inblossom[w]] === 1) {
            b = inblossom[v];
            if (bestedge[b] === -1 || kslack < slack(bestedge[b])) {
              bestedge[b] = k;
            }
          } else if (label[w] === 0) {
            if (bestedge[w] === -1 || kslack < slack(bestedge[w])) {
              bestedge[w] = k;
            }
          }
        }
      }
      if (augmented) {
        break;
      }
      deltatype = -1;
      delta = deltaedge = deltablossom = null;
      if (!maxcardinality) {
        deltatype = 1;
        delta = _.min(dualvar.slice(0, nvertex));
      }
      ref5 = range(nvertex);
      for (u = 0, len5 = ref5.length; u < len5; u++) {
        v = ref5[u];
        if (label[inblossom[v]] === 0 && bestedge[v] !== -1) {
          d = slack(bestedge[v]);
          if (deltatype === -1 || d < delta) {
            delta = d;
            deltatype = 2;
            deltaedge = bestedge[v];
          }
        }
      }
      ref6 = range(2 * nvertex);
      for (x = 0, len6 = ref6.length; x < len6; x++) {
        b = ref6[x];
        if (blossomparent[b] === -1 && label[b] === 1 && bestedge[b] !== -1) {
          kslack = slack(bestedge[b]);
          d = Math.floor(kslack / 2);
          if (deltatype === -1 || d < delta) {
            delta = d;
            deltatype = 3;
            deltaedge = bestedge[b];
          }
        }
      }
      ref7 = range(nvertex, 2 * nvertex);
      for (y = 0, len7 = ref7.length; y < len7; y++) {
        b = ref7[y];
        if (blossombase[b] >= 0 && blossomparent[b] === -1 && label[b] === 2 && (deltatype === -1 || dualvar[b] < delta)) {
          delta = dualvar[b];
          deltatype = 4;
          deltablossom = b;
        }
      }
      if (deltatype === -1) {
        deltatype = 1;
        delta = Math.max(0, _.min(dualvar.slice(0, nvertex)));
      }
      ref8 = range(nvertex);
      for (z = 0, len8 = ref8.length; z < len8; z++) {
        v = ref8[z];
        if (label[inblossom[v]] === 1) {
          dualvar[v] -= delta;
        }
        if (label[inblossom[v]] === 2) {
          dualvar[v] += delta;
        }
      }
      ref9 = range(nvertex, 2 * nvertex);
      for (i1 = 0, len9 = ref9.length; i1 < len9; i1++) {
        b = ref9[i1];
        if (blossombase[b] >= 0 && blossomparent[b] === -1) {
          if (label[b] === 1) {
            dualvar[b] += delta;
          }
          if (label[b] === 2) {
            dualvar[b] -= delta;
          }
        }
      }
      if (deltatype === 1) {
        break;
      } else if (deltatype === 2) {
        allowedge[deltaedge] = true;
        [i, j, wt] = edges[deltaedge];
        if (label[inblossom[i]] === 0) {
          [i, j] = [j, i];
        }
        queue.push(i);
      } else if (deltatype === 3) {
        allowedge[deltaedge] = true;
        [i, j, wt] = edges[deltaedge];
        queue.push(i);
      } else if (deltatype === 4) {
        expandBlossom(deltablossom, false);
      }
    }
    if (!augmented) {
      break;
    }
    ref10 = range(nvertex, 2 * nvertex);
    for (j1 = 0, len10 = ref10.length; j1 < len10; j1++) {
      b = ref10[j1];
      if (blossomparent[b] === -1 && blossombase[b] >= 0 && label[b] === 1 && dualvar[b] === 0) {
        expandBlossom(b, true);
      }
    }
  }
  print('mate', mate);
  print('endpoint', endpoint);
  ref11 = range(nvertex);
  for (k1 = 0, len11 = ref11.length; k1 < len11; k1++) {
    v = ref11[k1];
    if (mate[v] >= 0) {
      mate[v] = endpoint[mate[v]];
    }
  }
  //ass mate,[-1,2,1,4,3]
  saveAs(new File(lines, "javascript.txt", {
    type: "text/plain;charset=utf-8"
  }));
  return mate;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023\044-Monrad\coffee\mwmatching.coffee