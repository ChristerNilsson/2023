// Generated by CoffeeScript 2.5.1
var maxWeightMatching;

maxWeightMatching = function(edges, maxcardinality = false) {
  var addBlossom, allowedge, assignLabel, augmentBlossom, augmentMatching, augmented, b, base, bestedge, blossomLeaves, blossombase, blossombestedges, blossomchilds, blossomendps, blossomparent, d, delta, deltablossom, deltaedge, deltatype, dualvar, endpoint, i, i1, inblossom, integer_types, j, j1, k, k1, kslack, l, label, labelend, len1, len2, m, mate, maxweight, n, nedge, neighbend, nvertex, o, p, q, queue, r, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, scanBlossom, slack, t, u, unusedblossoms, v, w, wt, x, y, z;
  integer_types = [Number];
  if (!edges.length) {
    return [];
  }
  nedge = edges.length;
  nvertex = 0;
  for (l = 0, len1 = edges.length; l < len1; l++) {
    [i, j, w] = edges[l];
    if (i >= nvertex) {
      nvertex = i + 1;
    }
    if (j >= nvertex) {
      nvertex = j + 1;
    }
  }
  maxweight = Math.max(0, Math.max.apply(null, (function() {
    var len2, m, results;
    results = [];
    for (m = 0, len2 = edges.length; m < len2; m++) {
      [i, j, wt] = edges[m];
      results.push(wt);
    }
    return results;
  })()));
  for (p = m = 0, ref = 2 * nedge; (0 <= ref ? m < ref : m > ref); p = 0 <= ref ? ++m : --m) {
    endpoint = edges[Math.floor(p / 2)][p % 2];
  }
  neighbend = [
    (function() {
      var n,
    ref1,
    results;
      results = [];
      for (i = n = 0, ref1 = nvertex; (0 <= ref1 ? n < ref1 : n > ref1); i = 0 <= ref1 ? ++n : --n) {
        results.push([]);
      }
      return results;
    })()
  ];
  for (k = n = 0, ref1 = edges.length; (0 <= ref1 ? n < ref1 : n > ref1); k = 0 <= ref1 ? ++n : --n) {
    [i, j, w] = edges[k];
    neighbend[i].push(2 * k + 1);
    neighbend[j].push(2 * k);
  }
  mate = [
    (function() {
      var o,
    ref2,
    results;
      results = [];
      for (i = o = 0, ref2 = nvertex; (0 <= ref2 ? o < ref2 : o > ref2); i = 0 <= ref2 ? ++o : --o) {
        results.push(-1);
      }
      return results;
    })()
  ];
  label = [
    (function() {
      var o,
    ref2,
    results;
      results = [];
      for (i = o = 0, ref2 = 2 * nvertex; (0 <= ref2 ? o < ref2 : o > ref2); i = 0 <= ref2 ? ++o : --o) {
        results.push(0);
      }
      return results;
    })()
  ];
  labelend = [
    (function() {
      var o,
    ref2,
    results;
      results = [];
      for (i = o = 0, ref2 = 2 * nvertex; (0 <= ref2 ? o < ref2 : o > ref2); i = 0 <= ref2 ? ++o : --o) {
        results.push(-1);
      }
      return results;
    })()
  ];
  inblossom = [
    (function() {
      var o,
    ref2,
    results;
      results = [];
      for (i = o = 0, ref2 = nvertex; (0 <= ref2 ? o < ref2 : o > ref2); i = 0 <= ref2 ? ++o : --o) {
        results.push(i);
      }
      return results;
    })()
  ];
  blossomparent = [
    (function() {
      var o,
    ref2,
    results;
      results = [];
      for (i = o = 0, ref2 = 2 * nvertex; (0 <= ref2 ? o < ref2 : o > ref2); i = 0 <= ref2 ? ++o : --o) {
        results.push(-1);
      }
      return results;
    })()
  ];
  blossomchilds = [
    (function() {
      var o,
    ref2,
    results;
      results = [];
      for (i = o = 0, ref2 = 2 * nvertex; (0 <= ref2 ? o < ref2 : o > ref2); i = 0 <= ref2 ? ++o : --o) {
        results.push(null);
      }
      return results;
    })()
  ];
  blossombase = [
    (function() {
      var o,
    ref2,
    results;
      results = [];
      for (i = o = 0, ref2 = nvertex; (0 <= ref2 ? o < ref2 : o > ref2); i = 0 <= ref2 ? ++o : --o) {
        results.push(i);
      }
      return results;
    })()
  ].concat([
    (function() {
      var o,
    ref2,
    results;
      results = [];
      for (i = o = 0, ref2 = nvertex; (0 <= ref2 ? o < ref2 : o > ref2); i = 0 <= ref2 ? ++o : --o) {
        results.push(-1);
      }
      return results;
    })()
  ]);
  blossomendps = [
    (function() {
      var o,
    ref2,
    results;
      results = [];
      for (i = o = 0, ref2 = 2 * nvertex; (0 <= ref2 ? o < ref2 : o > ref2); i = 0 <= ref2 ? ++o : --o) {
        results.push(null);
      }
      return results;
    })()
  ];
  bestedge = [
    (function() {
      var o,
    ref2,
    results;
      results = [];
      for (i = o = 0, ref2 = 2 * nvertex; (0 <= ref2 ? o < ref2 : o > ref2); i = 0 <= ref2 ? ++o : --o) {
        results.push(-1);
      }
      return results;
    })()
  ];
  blossombestedges = [
    (function() {
      var o,
    ref2,
    results;
      results = [];
      for (i = o = 0, ref2 = 2 * nvertex; (0 <= ref2 ? o < ref2 : o > ref2); i = 0 <= ref2 ? ++o : --o) {
        results.push(null);
      }
      return results;
    })()
  ];
  unusedblossoms = [
    (function() {
      var o,
    ref2,
    ref3,
    results;
      results = [];
      for (i = o = ref2 = nvertex, ref3 = 2 * nvertex; (ref2 <= ref3 ? o < ref3 : o > ref3); i = ref2 <= ref3 ? ++o : --o) {
        results.push(i);
      }
      return results;
    })()
  ];
  dualvar = [
    (function() {
      var o,
    ref2,
    results;
      results = [];
      for (i = o = 0, ref2 = nvertex; (0 <= ref2 ? o < ref2 : o > ref2); i = 0 <= ref2 ? ++o : --o) {
        results.push(maxweight);
      }
      return results;
    })()
  ].concat([
    (function() {
      var o,
    ref2,
    results;
      results = [];
      for (i = o = 0, ref2 = nvertex; (0 <= ref2 ? o < ref2 : o > ref2); i = 0 <= ref2 ? ++o : --o) {
        results.push(0);
      }
      return results;
    })()
  ]);
  allowedge = [
    (function() {
      var o,
    ref2,
    results;
      results = [];
      for (i = o = 0, ref2 = nedge; (0 <= ref2 ? o < ref2 : o > ref2); i = 0 <= ref2 ? ++o : --o) {
        results.push(false);
      }
      return results;
    })()
  ];
  queue = [];
  slack = function(k) {
    [i, j, wt] = edges[k];
    return dualvar[i] + dualvar[j] - 2 * wt;
  };
  blossomLeaves = function*(b) {
    var len2, o, ref2, results, t, v;
    if (b < nvertex) {
      return (yield b);
    } else {
      ref2 = blossomchilds[b];
      results = [];
      for (o = 0, len2 = ref2.length; o < len2; o++) {
        t = ref2[o];
        if (t < nvertex) {
          results.push((yield t));
        } else {
          results.push((yield* (function*() {
            var len3, q, ref3, results1;
            ref3 = blossomLeaves(t);
            results1 = [];
            for (q = 0, len3 = ref3.length; q < len3; q++) {
              v = ref3[q];
              results1.push((yield v));
            }
            return results1;
          })()));
        }
      }
      return results;
    }
  };
  assignLabel = function(w, t, p) {
    var b, base, len2, o, ref2, results, v;
    b = inblossom[w];
    label[w] = label[b] = t;
    labelend[w] = labelend[b] = p;
    bestedge[w] = bestedge[b] = -1;
    if (t === 1) {
      ref2 = blossomLeaves(b);
      results = [];
      for (o = 0, len2 = ref2.length; o < len2; o++) {
        v = ref2[o];
        results.push(queue.push(v));
      }
      return results;
    } else if (t === 2) {
      base = blossombase[b];
      return assignLabel(endpoint[mate[base]], 1, mate[base] ^ 1);
    }
  };
  scanBlossom = function(v, w) {
    var b, base, len2, o, path;
    path = [];
    base = -1;
    while (v !== -1 || w !== -1) {
      b = inblossom[v];
      if (label[b] & 4) {
        base = blossombase[b];
        break;
      }
      path.push(b);
      label[b] = 5;
      if (labelend[b] === -1) {
        v = -1;
      } else {
        v = endpoint[labelend[b]];
        b = inblossom[v];
        v = endpoint[labelend[b]];
      }
      if (w !== -1) {
        [v, w] = [w, v];
      }
    }
    for (o = 0, len2 = path.length; o < len2; o++) {
      b = path[o];
      label[b] = 1;
    }
    return base;
  };
  addBlossom = function(base, k) {
    var b, bb, bestedgeto, bj, bv, bw, endps, endptrick, entrychild, expandBlossom, i1, jstep, len2, len3, len4, len5, len6, len7, len8, len9, nblist, nblists, o, path, q, r, ref2, ref3, ref4, ref5, ref6, s, u, v, x, y, z;
    [v, w, wt] = edges[k];
    bb = inblossom[base];
    bv = inblossom[v];
    bw = inblossom[w];
    b = unusedblossoms.pop();
    blossombase[b] = base;
    blossomparent[b] = -1;
    blossomparent[bb] = b;
    blossomchilds[b] = path = [];
    blossomendps[b] = endps = [];
    while (bv !== bb) {
      blossomparent[bv] = b;
      path.push(bv);
      endps.push(labelend[bv]);
      v = endpoint[labelend[bv]];
      bv = inblossom[v];
    }
    path.push(bb);
    path.reverse();
    endps.reverse();
    endps.push(2 * k);
    while (bw !== bb) {
      blossomparent[bw] = b;
      path.push(bw);
      endps.push(labelend[bw] ^ 1);
      w = endpoint[labelend[bw]];
      bw = inblossom[w];
    }
    label[b] = 1;
    labelend[b] = labelend[bb];
    dualvar[b] = 0;
    ref2 = blossomLeaves(b);
    for (o = 0, len2 = ref2.length; o < len2; o++) {
      v = ref2[o];
      if (label[inblossom[v]] === 2) {
        queue.push(v);
      }
      inblossom[v] = b;
    }
    bestedgeto = [
      (function() {
        var q,
      ref3,
      results;
        results = [];
        for (i = q = 0, ref3 = 2 * nvertex; (0 <= ref3 ? q < ref3 : q > ref3); i = 0 <= ref3 ? ++q : --q) {
          results.push(-1);
        }
        return results;
      })()
    ];
    for (q = 0, len3 = path.length; q < len3; q++) {
      bv = path[q];
      nblists = blossombestedges[bv] ? [blossombestedges[bv]] : [
        (function() {
          var len4,
        r,
        ref3,
        results;
          ref3 = blossomLeaves(bv);
          results = [];
          for (r = 0, len4 = ref3.length; r < len4; r++) {
            v = ref3[r];
            results.push([
              (function() {
                var len5,
              ref4,
              results1,
              u;
                ref4 = neighbend[v];
                results1 = [];
                for (u = 0, len5 = ref4.length; u < len5; u++) {
                  p = ref4[u];
                  results1.push(p / 2 | 0);
                }
                return results1;
              })()
            ]);
          }
          return results;
        })()
      ];
      for (r = 0, len4 = nblists.length; r < len4; r++) {
        nblist = nblists[r];
        for (u = 0, len5 = nblist.length; u < len5; u++) {
          k = nblist[u];
          [i, j, wt] = edges[k];
          if (inblossom[j] === b) {
            [i, j] = [j, i];
          }
          bj = inblossom[j];
          if (bj !== b && label[bj] === 1 && (bestedgeto[bj] === -1 || slack(k) < slack(bestedgeto[bj]))) {
            bestedgeto[bj] = k;
          }
        }
      }
      blossombestedges[bv] = null;
      bestedge[bv] = -1;
    }
    blossombestedges[b] = [
      (function() {
        var len6,
      results,
      x;
        results = [];
        for (x = 0, len6 = bestedgeto.length; x < len6; x++) {
          k = bestedgeto[x];
          if (k !== -1) {
            results.push(k);
          }
        }
        return results;
      })()
    ];
    bestedge[b] = -1;
    ref3 = blossombestedges[b];
    for (x = 0, len6 = ref3.length; x < len6; x++) {
      k = ref3[x];
      if (bestedge[b] === -1 || slack(k) < slack(bestedge[b])) {
        bestedge[b] = k;
      }
    }
    expandBlossom = function(b, endstage) {};
    ref4 = blossomchilds[b];
    for (y = 0, len7 = ref4.length; y < len7; y++) {
      s = ref4[y];
      blossomparent[s] = -1;
      if (s < nvertex) {
        inblossom[s] = s;
      } else if (endstage && dualvar[s] === 0) {
        expandBlossom(s, endstage);
      } else {
        ref5 = blossomLeaves(s);
        for (z = 0, len8 = ref5.length; z < len8; z++) {
          v = ref5[z];
          inblossom[v] = s;
        }
      }
    }
    if ((!endstage) && label[b] === 2) {
      entrychild = inblossom[endpoint[labelend[b] ^ 1]];
      j = blossomchilds[b].indexOf(entrychild);
      if (j & 1) {
        j -= len(blossomchilds[b]);
        jstep = 1;
        endptrick = 0;
      } else {
        jstep = -1;
        endptrick = 1;
      }
      p = labelend[b];
      while (j !== 0) {
        label[endpoint[p ^ 1]] = 0;
        label[endpoint[blossomendps[b][j - endptrick] ^ endptrick ^ 1]] = 0;
        assignLabel(endpoint[p ^ 1], 2, p);
        allowedge[blossomendps[b][j - endptrick] / 2 | 0] = true;
        j += jstep;
        p = blossomendps[b][j - endptrick] ^ endptrick;
        allowedge[p / 2 | 0] = true;
        j += jstep;
      }
      bv = blossomchilds[b][j];
      label[endpoint[p ^ 1]] = label[bv] = 2;
      labelend[endpoint[p ^ 1]] = labelend[bv] = p;
      bestedge[bv] = -1;
      j += jstep;
      while (blossomchilds[b][j] !== entrychild) {
        bv = blossomchilds[b][j];
        if (label[bv] === 1) {
          j += jstep;
          continue;
        }
        ref6 = blossomLeaves(bv);
        for (i1 = 0, len9 = ref6.length; i1 < len9; i1++) {
          v = ref6[i1];
          if (label[v] !== 0) {
            break;
          }
        }
        if (label[v] !== 0) {
          label[v] = 0;
          label[endpoint[mate[blossombase[bv]]]] = 0;
          assignLabel(v, 2, labelend[v]);
        }
        j += jstep;
      }
    }
    label[b] = labelend[b] = -1;
    blossomchilds[b] = blossomendps[b] = null;
    blossombase[b] = -1;
    blossombestedges[b] = null;
    bestedge[b] = -1;
    return unusedblossoms.push(b);
  };
  augmentBlossom = function(b, v) {
    var endptrick, jstep, t;
    t = v;
    while (blossomparent[t] !== b) {
      t = blossomparent[t];
    }
    if (t >= nvertex) {
      augmentBlossom(t, v);
    }
    i = j = blossomchilds[b].indexOf(t);
    if (i & 1) {
      j -= len(blossomchilds[b]);
      jstep = 1;
      endptrick = 0;
    } else {
      jstep = -1;
      endptrick = 1;
    }
    while (j !== 0) {
      j += jstep;
      t = blossomchilds[b][j];
      p = blossomendps[b][j - endptrick] ^ endptrick;
      if (t >= nvertex) {
        augmentBlossom(t, endpoint[p]);
      }
      j += jstep;
      t = blossomchilds[b][j];
      if (t >= nvertex) {
        augmentBlossom(t, endpoint[p ^ 1]);
      }
      mate[endpoint[p]] = p ^ 1;
      mate[endpoint[p ^ 1]] = p;
    }
    blossomchilds[b] = blossomchilds[b].slice(i).concat(blossomchilds[b].slice(0, i));
    blossomendps[b] = blossomendps[b].slice(i).concat(blossomendps[b].slice(0, i));
    return blossombase[b] = blossombase[blossomchilds[b][0]];
  };
  augmentMatching = function(k) {
    var bs, bt, len2, o, ref2, results, s, t, v;
    [v, w, wt] = edges[k];
    ref2 = [[v, 2 * k + 1], [w, 2 * k]];
    results = [];
    for (o = 0, len2 = ref2.length; o < len2; o++) {
      [s, p] = ref2[o];
      results.push((function() {
        var results1;
        results1 = [];
        while (true) {
          bs = inblossom[s];
          if (bs >= nvertex) {
            augmentBlossom(bs, s);
          }
          mate[s] = p;
          if (labelend[bs] === -1) {
            break;
          }
          t = endpoint[labelend[bs]];
          bt = inblossom[t];
          s = endpoint[labelend[bt]];
          j = endpoint[labelend[bt] ^ 1];
          if (bt >= nvertex) {
            augmentBlossom(bt, j);
          }
          mate[j] = labelend[bt];
          results1.push(p = labelend[bt] ^ 1);
        }
        return results1;
      })());
    }
    return results;
  };
// ... (rest of the functions)
  for (t = o = 0, ref2 = nvertex; (0 <= ref2 ? o < ref2 : o > ref2); t = 0 <= ref2 ? ++o : --o) {
    label.fill(0);
    bestedge.fill(-1);
    blossombestedges.fill(null);
    allowedge.fill(false);
    queue = [];
    for (v = q = 0, ref3 = nvertex; (0 <= ref3 ? q < ref3 : q > ref3); v = 0 <= ref3 ? ++q : --q) {
      if (mate[v] === -1 && label[inblossom[v]] === 0) {
        assignLabel(v, 1, -1);
      }
    }
    augmented = 0;
    while (true) {
      while (queue.length && !augmented) {
        v = queue.pop();
        ref4 = neighbend[v];
        for (r = 0, len2 = ref4.length; r < len2; r++) {
          p = ref4[r];
          k = p / 2 | 0;
          w = endpoint[p];
          if (inblossom[v] === inblossom[w]) {
            next;
          }
          if (!allowedge[k]) {
            kslack = slack(k);
            if (kslack <= 0) {
              allowedge[k] = true;
            }
          }
          if (allowedge[k]) {
            if (label[inblossom[w]] === 0) {
              assignLabel(w, 2, p ^ 1);
            } else if (label[inblossom[w]] === 1) {
              base = scanBlossom(v, w);
              if (base >= 0) {
                addBlossom(base, k);
              } else {
                augmentMatching(k);
                augmented = 1;
                break;
              }
            } else if (label[w] === 0) {
              label[w] = 2;
              labelend[w] = p ^ 1;
            }
          } else if (label[inblossom[w]] === 1) {
            b = inblossom[v];
            if (bestedge[b] === -1 || slack(k) < slack(bestedge[b])) {
              bestedge[b] = k;
            }
          } else if (label[w] === 0) {
            if (bestedge[w] === -1 || slack(k) < slack(bestedge[w])) {
              bestedge[w] = k;
            }
          }
        }
      }
      if (augmented) {
        break;
      }
      deltatype = -1;
      delta = deltaedge = deltablossom = null;
      deltatype = 1;
      if (!maxcardinality) {
        delta = Math.min.apply(null, dualvar.slice(0, nvertex));
      }
      for (v = u = 0, ref5 = nvertex; (0 <= ref5 ? u < ref5 : u > ref5); v = 0 <= ref5 ? ++u : --u) {
        if (label[inblossom[v]] === 0 && bestedge[v] !== -1) {
          d = slack(bestedge[v]);
          if (deltatype === -1 || d < delta) {
            delta = d;
            deltatype = 2;
            deltaedge = bestedge[v];
          }
        }
      }
      for (b = x = 0, ref6 = 2 * nvertex; (0 <= ref6 ? x < ref6 : x > ref6); b = 0 <= ref6 ? ++x : --x) {
        if (blossomparent[b] === -1 && label[b] === 1 && bestedge[b] !== -1) {
          kslack = slack(bestedge[b]);
          if (typeof kslack === "number") {
            d = kslack / 2;
          }
          if (deltatype === -1 || d < delta) {
            delta = d;
            deltatype = 3;
            deltaedge = bestedge[b];
          }
        }
      }
      for (b = y = ref7 = nvertex, ref8 = 2 * nvertex; (ref7 <= ref8 ? y < ref8 : y > ref8); b = ref7 <= ref8 ? ++y : --y) {
        if (blossombase[b] >= 0 && blossomparent[b] === -1 && label[b] === 2 && (deltatype === -1 || dualvar[b] < delta)) {
          delta = dualvar[b];
          deltatype = 4;
          deltablossom = b;
        }
      }
      if (deltatype === -1) {
        deltatype = 1;
        delta = Math.max(0, Math.min.apply(null, dualvar.slice(0, nvertex)));
      }
      for (v = z = 0, ref9 = nvertex; (0 <= ref9 ? z < ref9 : z > ref9); v = 0 <= ref9 ? ++z : --z) {
        if (label[inblossom[v]] === 1) {
          dualvar[v] -= delta;
        }
        if (label[inblossom[v]] === 2) {
          dualvar[v] += delta;
        }
      }
      for (b = i1 = ref10 = nvertex, ref11 = 2 * nvertex; (ref10 <= ref11 ? i1 < ref11 : i1 > ref11); b = ref10 <= ref11 ? ++i1 : --i1) {
        if (blossombase[b] >= 0 && blossomparent[b] === -1) {
          if (label[b] === 1) {
            dualvar[b] += delta;
          }
          if (label[b] === 2) {
            dualvar[b] -= delta;
          }
        }
      }
      if (deltatype === 1) {
        break;
      }
      if (deltatype === 2) {
        allowedge[deltaedge] = true;
      }
      [i, j, wt] = edges[deltaedge];
      if (label[inblossom[i]] === 0) {
        [i, j] = [j, i];
      }
      if (label[inblossom[i]] === 0) {
        queue.push(i);
      }
      if (deltatype === 3) {
        allowedge[deltaedge] = true;
      }
      [i, j, wt] = edges[deltaedge];
      if (deltatype === 3) {
        queue.push(i);
      }
      if (deltatype === 4) {
        expandBlossom(deltablossom, false);
      }
    }
    if (!augmented) {
      break;
    }
    for (b = j1 = ref12 = nvertex, ref13 = 2 * nvertex; (ref12 <= ref13 ? j1 < ref13 : j1 > ref13); b = ref12 <= ref13 ? ++j1 : --j1) {
      if (blossomparent[b] === -1 && blossombase[b] >= 0 && label[b] === 1 && dualvar[b] === 0) {
        expandBlossom(b, true);
      }
    }
  }
  if (mate[v] >= 0) {
    for (v = k1 = 0, ref14 = nvertex; (0 <= ref14 ? k1 < ref14 : k1 > ref14); v = 0 <= ref14 ? ++k1 : --k1) {
      mate[v] = endpoint[mate[v]];
    }
  }
  return mate;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXdtYXRjaGluZy5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXMiOlsiY29mZmVlXFxtd21hdGNoaW5nLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQTs7QUFBQSxpQkFBQSxHQUFvQixRQUFBLENBQUMsS0FBRCxFQUFRLGlCQUFpQixLQUF6QixDQUFBO0FBRXBCLE1BQUEsVUFBQSxFQUFBLFNBQUEsRUFBQSxXQUFBLEVBQUEsY0FBQSxFQUFBLGVBQUEsRUFBQSxTQUFBLEVBQUEsQ0FBQSxFQUFBLElBQUEsRUFBQSxRQUFBLEVBQUEsYUFBQSxFQUFBLFdBQUEsRUFBQSxnQkFBQSxFQUFBLGFBQUEsRUFBQSxZQUFBLEVBQUEsYUFBQSxFQUFBLENBQUEsRUFBQSxLQUFBLEVBQUEsWUFBQSxFQUFBLFNBQUEsRUFBQSxTQUFBLEVBQUEsT0FBQSxFQUFBLFFBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLFNBQUEsRUFBQSxhQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLE1BQUEsRUFBQSxDQUFBLEVBQUEsS0FBQSxFQUFBLFFBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxJQUFBLEVBQUEsU0FBQSxFQUFBLENBQUEsRUFBQSxLQUFBLEVBQUEsU0FBQSxFQUFBLE9BQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLFdBQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxjQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFB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QSxLQUFxQyxpR0FBckM7TUFBQSxJQUFJLENBQUMsQ0FBRCxDQUFKLEdBQVUsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFELENBQUw7SUFBbEIsQ0FBQTs7U0FFQTtBQXhXbUIiLCJzb3VyY2VzQ29udGVudCI6WyJtYXhXZWlnaHRNYXRjaGluZyA9IChlZGdlcywgbWF4Y2FyZGluYWxpdHkgPSBmYWxzZSkgLT5cclxuXHJcblx0aW50ZWdlcl90eXBlcyA9IFtOdW1iZXJdXHJcblxyXG5cdHJldHVybiBbXSB1bmxlc3MgZWRnZXMubGVuZ3RoXHJcblxyXG5cdG5lZGdlID0gZWRnZXMubGVuZ3RoXHJcblx0bnZlcnRleCA9IDBcclxuXHRmb3IgW2ksIGosIHddIGluIGVkZ2VzXHJcblx0XHRudmVydGV4ID0gaSArIDEgaWYgaSA+PSBudmVydGV4XHJcblx0XHRudmVydGV4ID0gaiArIDEgaWYgaiA+PSBudmVydGV4XHJcblxyXG5cdG1heHdlaWdodCA9IE1hdGgubWF4KDAsIE1hdGgubWF4LmFwcGx5KG51bGwsICh3dCBmb3IgW2ksIGosIHd0XSBpbiBlZGdlcykpKVxyXG5cdGVuZHBvaW50ID0gZWRnZXNbcCAvLyAyXVtwICUgMl0gZm9yIHAgaW4gWzAuLi4yICogbmVkZ2VdXHJcblx0bmVpZ2hiZW5kID0gW1tdIGZvciBpIGluIFswLi4ubnZlcnRleF1dXHJcblx0Zm9yIGsgaW4gWzAuLi5lZGdlcy5sZW5ndGhdXHJcblx0XHRbaSwgaiwgd10gPSBlZGdlc1trXVxyXG5cdFx0bmVpZ2hiZW5kW2ldLnB1c2goMiAqIGsgKyAxKVxyXG5cdFx0bmVpZ2hiZW5kW2pdLnB1c2goMiAqIGspXHJcblx0bWF0ZSA9IFstMSBmb3IgaSBpbiBbMC4uLm52ZXJ0ZXhdXVxyXG5cdGxhYmVsID0gWzAgZm9yIGkgaW4gWzAuLi4oMiAqIG52ZXJ0ZXgpXV1cclxuXHRsYWJlbGVuZCA9IFstMSBmb3IgaSBpbiBbMC4uLigyICogbnZlcnRleCldXVxyXG5cdGluYmxvc3NvbSA9IFtpIGZvciBpIGluIFswLi4ubnZlcnRleF1dXHJcblx0Ymxvc3NvbXBhcmVudCA9IFstMSBmb3IgaSBpbiBbMC4uLigyICogbnZlcnRleCldXVxyXG5cdGJsb3Nzb21jaGlsZHMgPSBbbnVsbCBmb3IgaSBpbiBbMC4uLigyICogbnZlcnRleCldXVxyXG5cdGJsb3Nzb21iYXNlID0gW2kgZm9yIGkgaW4gWzAuLi5udmVydGV4XV0uY29uY2F0KFstMSBmb3IgaSBpbiBbMC4uLm52ZXJ0ZXhdXSlcclxuXHRibG9zc29tZW5kcHMgPSBbbnVsbCBmb3IgaSBpbiBbMC4uLigyICogbnZlcnRleCldXVxyXG5cdGJlc3RlZGdlID0gWy0xIGZvciBpIGluIFswLi4uKDIgKiBudmVydGV4KV1dXHJcblx0Ymxvc3NvbWJlc3RlZGdlcyA9IFtudWxsIGZvciBpIGluIFswLi4uKDIgKiBudmVydGV4KV1dXHJcblx0dW51c2VkYmxvc3NvbXMgPSBbaSBmb3IgaSBpbiBbbnZlcnRleC4uLjIgKiBudmVydGV4XV1cclxuXHRkdWFsdmFyID0gW21heHdlaWdodCBmb3IgaSBpbiBbMC4uLm52ZXJ0ZXhdXS5jb25jYXQoWzAgZm9yIGkgaW4gWzAuLi5udmVydGV4XV0pXHJcblx0YWxsb3dlZGdlID0gW2ZhbHNlIGZvciBpIGluIFswLi4ubmVkZ2VdXVxyXG5cdHF1ZXVlID0gW11cclxuXHJcblx0c2xhY2sgPSAoaykgLT5cclxuXHRcdFtpLCBqLCB3dF0gPSBlZGdlc1trXVxyXG5cdFx0ZHVhbHZhcltpXSArIGR1YWx2YXJbal0gLSAyICogd3RcclxuXHJcblx0Ymxvc3NvbUxlYXZlcyA9IChiKSAtPlxyXG5cdFx0aWYgYiA8IG52ZXJ0ZXhcclxuXHRcdFx0eWllbGQgYlxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRmb3IgdCBpbiBibG9zc29tY2hpbGRzW2JdXHJcblx0XHRcdFx0aWYgdCA8IG52ZXJ0ZXhcclxuXHRcdFx0XHRcdHlpZWxkIHRcclxuXHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHR5aWVsZCB2IGZvciB2IGluIGJsb3Nzb21MZWF2ZXModClcclxuXHJcblx0YXNzaWduTGFiZWwgPSAodywgdCwgcCkgLT5cclxuXHRcdGIgPSBpbmJsb3Nzb21bd11cclxuXHRcdGxhYmVsW3ddID0gbGFiZWxbYl0gPSB0XHJcblx0XHRsYWJlbGVuZFt3XSA9IGxhYmVsZW5kW2JdID0gcFxyXG5cdFx0YmVzdGVkZ2Vbd10gPSBiZXN0ZWRnZVtiXSA9IC0xXHJcblx0XHRpZiB0ID09IDFcclxuXHRcdFx0cXVldWUucHVzaCh2KSBmb3IgdiBpbiBibG9zc29tTGVhdmVzKGIpXHJcblx0XHRlbHNlIGlmIHQgPT0gMlxyXG5cdFx0XHRiYXNlID0gYmxvc3NvbWJhc2VbYl1cclxuXHRcdFx0YXNzaWduTGFiZWwoZW5kcG9pbnRbbWF0ZVtiYXNlXV0sIDEsIG1hdGVbYmFzZV0gXiAxKVxyXG5cclxuXHRzY2FuQmxvc3NvbSA9ICh2LCB3KSAtPlxyXG5cdFx0cGF0aCA9IFtdXHJcblx0XHRiYXNlID0gLTFcclxuXHRcdHdoaWxlIHYgIT0gLTEgb3IgdyAhPSAtMVxyXG5cdFx0XHRiID0gaW5ibG9zc29tW3ZdXHJcblx0XHRcdGlmIGxhYmVsW2JdICYgNFxyXG5cdFx0XHRcdGJhc2UgPSBibG9zc29tYmFzZVtiXVxyXG5cdFx0XHRcdGJyZWFrXHJcblx0XHRcdHBhdGgucHVzaChiKVxyXG5cdFx0XHRsYWJlbFtiXSA9IDVcclxuXHRcdFx0aWYgbGFiZWxlbmRbYl0gPT0gLTFcclxuXHRcdFx0XHR2ID0gLTFcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHYgPSBlbmRwb2ludFtsYWJlbGVuZFtiXV1cclxuXHRcdFx0XHRiID0gaW5ibG9zc29tW3ZdXHJcblx0XHRcdFx0diA9IGVuZHBvaW50W2xhYmVsZW5kW2JdXVxyXG5cdFx0XHRpZiB3ICE9IC0xXHJcblx0XHRcdFx0W3YsIHddID0gW3csIHZdXHJcblx0XHRsYWJlbFtiXSA9IDEgZm9yIGIgaW4gcGF0aFxyXG5cdFx0YmFzZVxyXG5cclxuXHRhZGRCbG9zc29tID0gKGJhc2UsIGspIC0+XHJcblx0XHRbdiwgdywgd3RdID0gZWRnZXNba11cclxuXHRcdGJiID0gaW5ibG9zc29tW2Jhc2VdXHJcblx0XHRidiA9IGluYmxvc3NvbVt2XVxyXG5cdFx0YncgPSBpbmJsb3Nzb21bd11cclxuXHRcdGIgPSB1bnVzZWRibG9zc29tcy5wb3AoKVxyXG5cdFx0Ymxvc3NvbWJhc2VbYl0gPSBiYXNlXHJcblx0XHRibG9zc29tcGFyZW50W2JdID0gLTFcclxuXHRcdGJsb3Nzb21wYXJlbnRbYmJdID0gYlxyXG5cdFx0Ymxvc3NvbWNoaWxkc1tiXSA9IHBhdGggPSBbXVxyXG5cdFx0Ymxvc3NvbWVuZHBzW2JdID0gZW5kcHMgPSBbXVxyXG5cclxuXHRcdHdoaWxlIGJ2ICE9IGJiXHJcblx0XHRcdGJsb3Nzb21wYXJlbnRbYnZdID0gYlxyXG5cdFx0XHRwYXRoLnB1c2goYnYpXHJcblx0XHRcdGVuZHBzLnB1c2gobGFiZWxlbmRbYnZdKVxyXG5cdFx0XHR2ID0gZW5kcG9pbnRbbGFiZWxlbmRbYnZdXVxyXG5cdFx0XHRidiA9IGluYmxvc3NvbVt2XVxyXG5cclxuXHRcdHBhdGgucHVzaChiYilcclxuXHRcdHBhdGgucmV2ZXJzZSgpXHJcblx0XHRlbmRwcy5yZXZlcnNlKClcclxuXHRcdGVuZHBzLnB1c2goMiAqIGspXHJcblxyXG5cdFx0d2hpbGUgYncgIT0gYmJcclxuXHRcdFx0Ymxvc3NvbXBhcmVudFtid10gPSBiXHJcblx0XHRcdHBhdGgucHVzaChidylcclxuXHRcdFx0ZW5kcHMucHVzaChsYWJlbGVuZFtid10gXiAxKVxyXG5cdFx0XHR3ID0gZW5kcG9pbnRbbGFiZWxlbmRbYnddXVxyXG5cdFx0XHRidyA9IGluYmxvc3NvbVt3XVxyXG5cclxuXHRcdGxhYmVsW2JdID0gMVxyXG5cdFx0bGFiZWxlbmRbYl0gPSBsYWJlbGVuZFtiYl1cclxuXHRcdGR1YWx2YXJbYl0gPSAwXHJcblxyXG5cdFx0Zm9yIHYgaW4gYmxvc3NvbUxlYXZlcyhiKVxyXG5cdFx0XHRxdWV1ZS5wdXNoKHYpIGlmIGxhYmVsW2luYmxvc3NvbVt2XV0gPT0gMlxyXG5cdFx0XHRpbmJsb3Nzb21bdl0gPSBiXHJcblxyXG5cdFx0YmVzdGVkZ2V0byA9IFstMSBmb3IgaSBpbiBbMC4uLigyICogbnZlcnRleCldXVxyXG5cclxuXHRcdGZvciBidiBpbiBwYXRoXHJcblx0XHRcdG5ibGlzdHMgPSBpZiBibG9zc29tYmVzdGVkZ2VzW2J2XSB0aGVuIFtibG9zc29tYmVzdGVkZ2VzW2J2XV0gZWxzZSBbW3AgLyAyIHwgMCBmb3IgcCBpbiBuZWlnaGJlbmRbdl1dIGZvciB2IGluIGJsb3Nzb21MZWF2ZXMoYnYpXVxyXG5cclxuXHRcdFx0Zm9yIG5ibGlzdCBpbiBuYmxpc3RzXHJcblx0XHRcdFx0Zm9yIGsgaW4gbmJsaXN0XHJcblx0XHRcdFx0XHRbaSwgaiwgd3RdID0gZWRnZXNba11cclxuXHRcdFx0XHRcdFtpLCBqXSA9IFtqLCBpXSBpZiBpbmJsb3Nzb21bal0gPT0gYlxyXG5cdFx0XHRcdFx0YmogPSBpbmJsb3Nzb21bal1cclxuXHRcdFx0XHRcdGlmIGJqICE9IGIgYW5kIGxhYmVsW2JqXSA9PSAxIGFuZCAoYmVzdGVkZ2V0b1tial0gPT0gLTEgb3Igc2xhY2soaykgPCBzbGFjayhiZXN0ZWRnZXRvW2JqXSkpXHJcblx0XHRcdFx0XHRcdGJlc3RlZGdldG9bYmpdID0ga1xyXG5cclxuXHRcdFx0Ymxvc3NvbWJlc3RlZGdlc1tidl0gPSBudWxsXHJcblx0XHRcdGJlc3RlZGdlW2J2XSA9IC0xXHJcblxyXG5cdFx0Ymxvc3NvbWJlc3RlZGdlc1tiXSA9IFtrIGZvciBrIGluIGJlc3RlZGdldG8gd2hlbiBrICE9IC0xXVxyXG5cdFx0YmVzdGVkZ2VbYl0gPSAtMVxyXG5cclxuXHRcdGZvciBrIGluIGJsb3Nzb21iZXN0ZWRnZXNbYl1cclxuXHRcdFx0YmVzdGVkZ2VbYl0gPSBrIGlmIGJlc3RlZGdlW2JdID09IC0xIG9yIHNsYWNrKGspIDwgc2xhY2soYmVzdGVkZ2VbYl0pXHJcblxyXG5cclxuXHRcdGV4cGFuZEJsb3Nzb20gPSAoYiwgZW5kc3RhZ2UpIC0+XHJcblx0XHRmb3IgcyBpbiBibG9zc29tY2hpbGRzW2JdXHJcblx0XHRcdGJsb3Nzb21wYXJlbnRbc10gPSAtMVxyXG5cdFx0XHRpZiBzIDwgbnZlcnRleFxyXG5cdFx0XHRcdGluYmxvc3NvbVtzXSA9IHNcclxuXHRcdFx0ZWxzZSBpZiBlbmRzdGFnZSBhbmQgZHVhbHZhcltzXSA9PSAwXHJcblx0XHRcdFx0ZXhwYW5kQmxvc3NvbShzLCBlbmRzdGFnZSlcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdGZvciB2IGluIGJsb3Nzb21MZWF2ZXMocylcclxuXHRcdFx0XHRcdGluYmxvc3NvbVt2XSA9IHNcclxuXHJcblx0XHRpZiAobm90IGVuZHN0YWdlKSBhbmQgbGFiZWxbYl0gPT0gMlxyXG5cdFx0XHRlbnRyeWNoaWxkID0gaW5ibG9zc29tW2VuZHBvaW50W2xhYmVsZW5kW2JdIF4gMV1dXHJcblx0XHRcdGogPSBibG9zc29tY2hpbGRzW2JdLmluZGV4T2YoZW50cnljaGlsZClcclxuXHRcdFx0aWYgaiAmIDFcclxuXHRcdFx0XHRqIC09IGxlbihibG9zc29tY2hpbGRzW2JdKVxyXG5cdFx0XHRcdGpzdGVwID0gMVxyXG5cdFx0XHRcdGVuZHB0cmljayA9IDBcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdGpzdGVwID0gLTFcclxuXHRcdFx0XHRlbmRwdHJpY2sgPSAxXHJcblxyXG5cdFx0XHRwID0gbGFiZWxlbmRbYl1cclxuXHRcdFx0d2hpbGUgaiAhPSAwXHJcblx0XHRcdFx0bGFiZWxbZW5kcG9pbnRbcCBeIDFdXSA9IDBcclxuXHRcdFx0XHRsYWJlbFtlbmRwb2ludFtibG9zc29tZW5kcHNbYl1baiAtIGVuZHB0cmlja10gXiBlbmRwdHJpY2sgXiAxXV0gPSAwXHJcblx0XHRcdFx0YXNzaWduTGFiZWwoZW5kcG9pbnRbcCBeIDFdLCAyLCBwKVxyXG5cdFx0XHRcdGFsbG93ZWRnZVtibG9zc29tZW5kcHNbYl1baiAtIGVuZHB0cmlja10gLyAyIHwgMF0gPSB0cnVlXHJcblx0XHRcdFx0aiArPSBqc3RlcFxyXG5cdFx0XHRcdHAgPSBibG9zc29tZW5kcHNbYl1baiAtIGVuZHB0cmlja10gXiBlbmRwdHJpY2tcclxuXHRcdFx0XHRhbGxvd2VkZ2VbcCAvIDIgfCAwXSA9IHRydWVcclxuXHRcdFx0XHRqICs9IGpzdGVwXHJcblxyXG5cdFx0XHRidiA9IGJsb3Nzb21jaGlsZHNbYl1bal1cclxuXHRcdFx0bGFiZWxbZW5kcG9pbnRbcCBeIDFdXSA9IGxhYmVsW2J2XSA9IDJcclxuXHRcdFx0bGFiZWxlbmRbZW5kcG9pbnRbcCBeIDFdXSA9IGxhYmVsZW5kW2J2XSA9IHBcclxuXHRcdFx0YmVzdGVkZ2VbYnZdID0gLTFcclxuXHRcdFx0aiArPSBqc3RlcFxyXG5cclxuXHRcdFx0d2hpbGUgYmxvc3NvbWNoaWxkc1tiXVtqXSAhPSBlbnRyeWNoaWxkXHJcblx0XHRcdFx0YnYgPSBibG9zc29tY2hpbGRzW2JdW2pdXHJcblx0XHRcdFx0aWYgbGFiZWxbYnZdID09IDFcclxuXHRcdFx0XHRcdGogKz0ganN0ZXBcclxuXHRcdFx0XHRcdGNvbnRpbnVlXHJcblxyXG5cdFx0XHRcdGZvciB2IGluIGJsb3Nzb21MZWF2ZXMoYnYpXHJcblx0XHRcdFx0XHRicmVhayBpZiBsYWJlbFt2XSAhPSAwXHJcblxyXG5cdFx0XHRcdGlmIGxhYmVsW3ZdICE9IDBcclxuXHRcdFx0XHRcdGxhYmVsW3ZdID0gMFxyXG5cdFx0XHRcdFx0bGFiZWxbZW5kcG9pbnRbbWF0ZVtibG9zc29tYmFzZVtidl1dXV0gPSAwXHJcblx0XHRcdFx0XHRhc3NpZ25MYWJlbCh2LCAyLCBsYWJlbGVuZFt2XSlcclxuXHJcblx0XHRcdFx0aiArPSBqc3RlcFxyXG5cclxuXHRcdGxhYmVsW2JdID0gbGFiZWxlbmRbYl0gPSAtMVxyXG5cdFx0Ymxvc3NvbWNoaWxkc1tiXSA9IGJsb3Nzb21lbmRwc1tiXSA9IG51bGxcclxuXHRcdGJsb3Nzb21iYXNlW2JdID0gLTFcclxuXHRcdGJsb3Nzb21iZXN0ZWRnZXNbYl0gPSBudWxsXHJcblx0XHRiZXN0ZWRnZVtiXSA9IC0xXHJcblx0XHR1bnVzZWRibG9zc29tcy5wdXNoKGIpXHJcblxyXG5cclxuXHRhdWdtZW50Qmxvc3NvbSA9IChiLCB2KSAtPlxyXG5cdFx0dCA9IHZcclxuXHRcdHdoaWxlIGJsb3Nzb21wYXJlbnRbdF0gIT0gYlxyXG5cdFx0XHR0ID0gYmxvc3NvbXBhcmVudFt0XVxyXG5cdFx0aWYgdCA+PSBudmVydGV4XHJcblx0XHRcdGF1Z21lbnRCbG9zc29tKHQsIHYpXHJcblx0XHRpID0gaiA9IGJsb3Nzb21jaGlsZHNbYl0uaW5kZXhPZih0KVxyXG5cdFx0aWYgaSAmIDFcclxuXHRcdFx0aiAtPSBsZW4oYmxvc3NvbWNoaWxkc1tiXSlcclxuXHRcdFx0anN0ZXAgPSAxXHJcblx0XHRcdGVuZHB0cmljayA9IDBcclxuXHRcdGVsc2VcclxuXHRcdFx0anN0ZXAgPSAtMVxyXG5cdFx0XHRlbmRwdHJpY2sgPSAxXHJcblx0XHR3aGlsZSBqICE9IDBcclxuXHRcdFx0aiArPSBqc3RlcFxyXG5cdFx0XHR0ID0gYmxvc3NvbWNoaWxkc1tiXVtqXVxyXG5cdFx0XHRwID0gYmxvc3NvbWVuZHBzW2JdW2ogLSBlbmRwdHJpY2tdIF4gZW5kcHRyaWNrXHJcblx0XHRcdGlmIHQgPj0gbnZlcnRleFxyXG5cdFx0XHRcdGF1Z21lbnRCbG9zc29tKHQsIGVuZHBvaW50W3BdKVxyXG5cdFx0XHRqICs9IGpzdGVwXHJcblx0XHRcdHQgPSBibG9zc29tY2hpbGRzW2JdW2pdXHJcblx0XHRcdGlmIHQgPj0gbnZlcnRleFxyXG5cdFx0XHRcdGF1Z21lbnRCbG9zc29tKHQsIGVuZHBvaW50W3AgXiAxXSlcclxuXHRcdFx0bWF0ZVtlbmRwb2ludFtwXV0gPSBwIF4gMVxyXG5cdFx0XHRtYXRlW2VuZHBvaW50W3AgXiAxXV0gPSBwXHJcblx0XHRibG9zc29tY2hpbGRzW2JdID0gYmxvc3NvbWNoaWxkc1tiXS5zbGljZShpKS5jb25jYXQoYmxvc3NvbWNoaWxkc1tiXS5zbGljZSgwLCBpKSlcclxuXHRcdGJsb3Nzb21lbmRwc1tiXSA9IGJsb3Nzb21lbmRwc1tiXS5zbGljZShpKS5jb25jYXQoYmxvc3NvbWVuZHBzW2JdLnNsaWNlKDAsIGkpKVxyXG5cdFx0Ymxvc3NvbWJhc2VbYl0gPSBibG9zc29tYmFzZVtibG9zc29tY2hpbGRzW2JdWzBdXVxyXG5cclxuXHRhdWdtZW50TWF0Y2hpbmcgPSAoaykgLT5cclxuXHRcdFt2LCB3LCB3dF0gPSBlZGdlc1trXVxyXG5cdFx0Zm9yIFtzLCBwXSBpbiBbW3YsIDIgKiBrICsgMV0sIFt3LCAyICoga11dXHJcblx0XHRcdHdoaWxlIHRydWVcclxuXHRcdFx0XHRicyA9IGluYmxvc3NvbVtzXVxyXG5cdFx0XHRcdGlmIGJzID49IG52ZXJ0ZXhcclxuXHRcdFx0XHRcdGF1Z21lbnRCbG9zc29tKGJzLCBzKVxyXG5cdFx0XHRcdG1hdGVbc10gPSBwXHJcblx0XHRcdFx0YnJlYWsgaWYgbGFiZWxlbmRbYnNdID09IC0xXHJcblx0XHRcdFx0dCA9IGVuZHBvaW50W2xhYmVsZW5kW2JzXV1cclxuXHRcdFx0XHRidCA9IGluYmxvc3NvbVt0XVxyXG5cdFx0XHRcdHMgPSBlbmRwb2ludFtsYWJlbGVuZFtidF1dXHJcblx0XHRcdFx0aiA9IGVuZHBvaW50W2xhYmVsZW5kW2J0XSBeIDFdXHJcblx0XHRcdFx0aWYgYnQgPj0gbnZlcnRleFxyXG5cdFx0XHRcdFx0YXVnbWVudEJsb3Nzb20oYnQsIGopXHJcblx0XHRcdFx0bWF0ZVtqXSA9IGxhYmVsZW5kW2J0XVxyXG5cdFx0XHRcdHAgPSBsYWJlbGVuZFtidF0gXiAxXHJcblxyXG5cdCMgLi4uIChyZXN0IG9mIHRoZSBmdW5jdGlvbnMpXHJcblxyXG5cdGZvciB0IGluIFswLi4ubnZlcnRleF1cclxuXHJcblx0XHRsYWJlbC5maWxsKDApXHJcblx0XHRiZXN0ZWRnZS5maWxsKC0xKVxyXG5cdFx0Ymxvc3NvbWJlc3RlZGdlcy5maWxsKG51bGwpXHJcblx0XHRhbGxvd2VkZ2UuZmlsbChmYWxzZSlcclxuXHRcdHF1ZXVlID0gW11cclxuXHJcblx0XHRmb3IgdiBpbiBbMC4uLm52ZXJ0ZXhdXHJcblx0XHRcdGFzc2lnbkxhYmVsKHYsIDEsIC0xKSBpZiBtYXRlW3ZdID09IC0xICYmIGxhYmVsW2luYmxvc3NvbVt2XV0gPT0gMFxyXG5cclxuXHRcdGF1Z21lbnRlZCA9IDBcclxuXHRcdHdoaWxlIHRydWVcclxuXHJcblx0XHRcdHdoaWxlIHF1ZXVlLmxlbmd0aCAmJiAhYXVnbWVudGVkXHJcblxyXG5cdFx0XHRcdHYgPSBxdWV1ZS5wb3AoKVxyXG5cclxuXHRcdFx0XHRmb3IgcCBpbiBuZWlnaGJlbmRbdl1cclxuXHRcdFx0XHRcdGsgPSBwIC8gMiB8IDBcclxuXHRcdFx0XHRcdHcgPSBlbmRwb2ludFtwXVxyXG5cdFx0XHRcdFx0bmV4dCBpZiBpbmJsb3Nzb21bdl0gPT0gaW5ibG9zc29tW3ddXHJcblx0XHRcdFx0XHR1bmxlc3MgYWxsb3dlZGdlW2tdXHJcblx0XHRcdFx0XHRcdGtzbGFjayA9IHNsYWNrKGspXHJcblx0XHRcdFx0XHRcdGFsbG93ZWRnZVtrXSA9IHRydWUgaWYga3NsYWNrIDw9IDBcclxuXHRcdFx0XHRcdGlmIGFsbG93ZWRnZVtrXVxyXG5cdFx0XHRcdFx0XHRpZiBsYWJlbFtpbmJsb3Nzb21bd11dID09IDBcclxuXHRcdFx0XHRcdFx0XHRhc3NpZ25MYWJlbCh3LCAyLCBwIF4gMSlcclxuXHRcdFx0XHRcdFx0ZWxzZSBpZiBsYWJlbFtpbmJsb3Nzb21bd11dID09IDFcclxuXHRcdFx0XHRcdFx0XHRiYXNlID0gc2NhbkJsb3Nzb20odiwgdylcclxuXHRcdFx0XHRcdFx0XHRpZiBiYXNlID49IDBcclxuXHRcdFx0XHRcdFx0XHRcdGFkZEJsb3Nzb20oYmFzZSwgaylcclxuXHRcdFx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdFx0XHRhdWdtZW50TWF0Y2hpbmcoaylcclxuXHRcdFx0XHRcdFx0XHRcdGF1Z21lbnRlZCA9IDFcclxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrXHJcblx0XHRcdFx0XHRcdGVsc2UgaWYgbGFiZWxbd10gPT0gMFxyXG5cdFx0XHRcdFx0XHRcdGxhYmVsW3ddID0gMlxyXG5cdFx0XHRcdFx0XHRcdGxhYmVsZW5kW3ddID0gcCBeIDFcclxuXHRcdFx0XHRcdGVsc2UgaWYgbGFiZWxbaW5ibG9zc29tW3ddXSA9PSAxXHJcblx0XHRcdFx0XHRcdGIgPSBpbmJsb3Nzb21bdl1cclxuXHRcdFx0XHRcdFx0YmVzdGVkZ2VbYl0gPSBrIGlmIGJlc3RlZGdlW2JdID09IC0xIHx8IHNsYWNrKGspIDwgc2xhY2soYmVzdGVkZ2VbYl0pXHJcblx0XHRcdFx0XHRlbHNlIGlmIGxhYmVsW3ddID09IDBcclxuXHRcdFx0XHRcdFx0YmVzdGVkZ2Vbd10gPSBrIGlmIGJlc3RlZGdlW3ddID09IC0xIHx8IHNsYWNrKGspIDwgc2xhY2soYmVzdGVkZ2Vbd10pXHJcblxyXG5cdFx0XHRicmVhayBpZiBhdWdtZW50ZWRcclxuXHJcblx0XHRcdGRlbHRhdHlwZSA9IC0xXHJcblx0XHRcdGRlbHRhID0gZGVsdGFlZGdlID0gZGVsdGFibG9zc29tID0gbnVsbFxyXG5cclxuXHRcdFx0ZGVsdGF0eXBlID0gMVxyXG5cdFx0XHRkZWx0YSA9IE1hdGgubWluLmFwcGx5KG51bGwsIGR1YWx2YXIuc2xpY2UoMCwgbnZlcnRleCkpIHVubGVzcyBtYXhjYXJkaW5hbGl0eVxyXG5cclxuXHRcdFx0Zm9yIHYgaW4gWzAuLi5udmVydGV4XVxyXG5cdFx0XHRcdGlmIGxhYmVsW2luYmxvc3NvbVt2XV0gPT0gMCAmJiBiZXN0ZWRnZVt2XSAhPSAtMVxyXG5cdFx0XHRcdFx0ZCA9IHNsYWNrKGJlc3RlZGdlW3ZdKVxyXG5cdFx0XHRcdFx0aWYgZGVsdGF0eXBlID09IC0xIHx8IGQgPCBkZWx0YVxyXG5cdFx0XHRcdFx0XHRkZWx0YSA9IGRcclxuXHRcdFx0XHRcdFx0ZGVsdGF0eXBlID0gMlxyXG5cdFx0XHRcdFx0XHRkZWx0YWVkZ2UgPSBiZXN0ZWRnZVt2XVxyXG5cclxuXHRcdFx0Zm9yIGIgaW4gWzAuLi4oMiAqIG52ZXJ0ZXgpXVxyXG5cdFx0XHRcdGlmIGJsb3Nzb21wYXJlbnRbYl0gPT0gLTEgJiYgbGFiZWxbYl0gPT0gMSAmJiBiZXN0ZWRnZVtiXSAhPSAtMVxyXG5cdFx0XHRcdFx0a3NsYWNrID0gc2xhY2soYmVzdGVkZ2VbYl0pXHJcblx0XHRcdFx0XHRkID0ga3NsYWNrIC8gMiBpZiB0eXBlb2Yga3NsYWNrID09IFwibnVtYmVyXCJcclxuXHRcdFx0XHRcdGlmIGRlbHRhdHlwZSA9PSAtMSB8fCBkIDwgZGVsdGFcclxuXHRcdFx0XHRcdFx0ZGVsdGEgPSBkXHJcblx0XHRcdFx0XHRcdGRlbHRhdHlwZSA9IDNcclxuXHRcdFx0XHRcdFx0ZGVsdGFlZGdlID0gYmVzdGVkZ2VbYl1cclxuXHJcblx0XHRcdGZvciBiIGluIFtudmVydGV4Li4uKDIgKiBudmVydGV4KV1cclxuXHRcdFx0XHRpZiBibG9zc29tYmFzZVtiXSA+PSAwICYmIGJsb3Nzb21wYXJlbnRbYl0gPT0gLTEgJiYgbGFiZWxbYl0gPT0gMiAmJiAoZGVsdGF0eXBlID09IC0xIHx8IGR1YWx2YXJbYl0gPCBkZWx0YSlcclxuXHRcdFx0XHRcdGRlbHRhID0gZHVhbHZhcltiXVxyXG5cdFx0XHRcdFx0ZGVsdGF0eXBlID0gNFxyXG5cdFx0XHRcdFx0ZGVsdGFibG9zc29tID0gYlxyXG5cclxuXHRcdFx0aWYgZGVsdGF0eXBlID09IC0xXHJcblx0XHRcdFx0ZGVsdGF0eXBlID0gMVxyXG5cdFx0XHRcdGRlbHRhID0gTWF0aC5tYXgoMCwgTWF0aC5taW4uYXBwbHkobnVsbCwgZHVhbHZhci5zbGljZSgwLCBudmVydGV4KSkpXHJcblxyXG5cdFx0XHRmb3IgdiBpbiBbMC4uLm52ZXJ0ZXhdXHJcblx0XHRcdFx0ZHVhbHZhclt2XSAtPSBkZWx0YSBpZiBsYWJlbFtpbmJsb3Nzb21bdl1dID09IDFcclxuXHRcdFx0XHRkdWFsdmFyW3ZdICs9IGRlbHRhIGlmIGxhYmVsW2luYmxvc3NvbVt2XV0gPT0gMlxyXG5cdFx0XHRmb3IgYiBpbiBbbnZlcnRleC4uLigyICogbnZlcnRleCldXHJcblx0XHRcdFx0aWYgYmxvc3NvbWJhc2VbYl0gPj0gMCAmJiBibG9zc29tcGFyZW50W2JdID09IC0xXHJcblx0XHRcdFx0XHRkdWFsdmFyW2JdICs9IGRlbHRhIGlmIGxhYmVsW2JdID09IDFcclxuXHRcdFx0XHRcdGR1YWx2YXJbYl0gLT0gZGVsdGEgaWYgbGFiZWxbYl0gPT0gMlxyXG5cclxuXHRcdFx0YnJlYWsgaWYgZGVsdGF0eXBlID09IDFcclxuXHRcdFx0YWxsb3dlZGdlW2RlbHRhZWRnZV0gPSB0cnVlIGlmIGRlbHRhdHlwZSA9PSAyXHJcblx0XHRcdFtpLCBqLCB3dF0gPSBlZGdlc1tkZWx0YWVkZ2VdXHJcblx0XHRcdFtpLCBqXSA9IFtqLCBpXSBpZiBsYWJlbFtpbmJsb3Nzb21baV1dID09IDBcclxuXHRcdFx0cXVldWUucHVzaChpKSBpZiBsYWJlbFtpbmJsb3Nzb21baV1dID09IDBcclxuXHRcdFx0YWxsb3dlZGdlW2RlbHRhZWRnZV0gPSB0cnVlIGlmIGRlbHRhdHlwZSA9PSAzXHJcblx0XHRcdFtpLCBqLCB3dF0gPSBlZGdlc1tkZWx0YWVkZ2VdXHJcblx0XHRcdHF1ZXVlLnB1c2goaSkgaWYgZGVsdGF0eXBlID09IDNcclxuXHJcblx0XHRcdGV4cGFuZEJsb3Nzb20oZGVsdGFibG9zc29tLCBmYWxzZSkgaWYgZGVsdGF0eXBlID09IDRcclxuXHJcblx0XHRicmVhayB1bmxlc3MgYXVnbWVudGVkXHJcblxyXG5cdFx0ZXhwYW5kQmxvc3NvbShiLCB0cnVlKSBmb3IgYiBpbiBbbnZlcnRleC4uLigyICogbnZlcnRleCldIHdoZW4gYmxvc3NvbXBhcmVudFtiXSA9PSAtMSAmJiBibG9zc29tYmFzZVtiXSA+PSAwICYmIGxhYmVsW2JdID09IDEgJiYgZHVhbHZhcltiXSA9PSAwXHJcblxyXG5cdG1hdGVbdl0gPSBlbmRwb2ludFttYXRlW3ZdXSBmb3IgdiBpbiBbMC4uLm52ZXJ0ZXhdIGlmIG1hdGVbdl0gPj0gMFxyXG5cclxuXHRtYXRlXHJcbiJdfQ==
//# sourceURL=c:\github\2023\044-Monrad\coffee\mwmatching.coffee