// Generated by CoffeeScript 2.5.1
var maxWeightMatching, print;

print = console.log;

maxWeightMatching = function(edges, maxcardinality = false) {
  var addBlossom, allowedge, assignLabel, augmentBlossom, augmentMatching, augmented, b, base, bestedge, blossomLeaves, blossombase, blossombestedges, blossomchilds, blossomendps, blossomparent, d, delta, deltablossom, deltaedge, deltatype, dualvar, endpoint, expandBlossom, i, i1, inblossom, integer_types, j, j1, k, k1, kslack, l, label, labelend, len1, len2, m, mate, maxweight, n, nedge, neighbend, nvertex, o, p, q, queue, r, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, scanBlossom, slack, t, u, unusedblossoms, v, w, wt, x, y, z;
  integer_types = [Number];
  if (!edges.length) {
    return [];
  }
  nedge = edges.length;
  print('nedge', nedge);
  nvertex = 0;
  for (l = 0, len1 = edges.length; l < len1; l++) {
    [i, j, w] = edges[l];
    if (i >= nvertex) {
      nvertex = i + 1;
    }
    if (j >= nvertex) {
      nvertex = j + 1;
    }
  }
  print('nvertex', nvertex);
  maxweight = Math.max(0, Math.max.apply(null, (function() {
    var len2, m, results;
    results = [];
    for (m = 0, len2 = edges.length; m < len2; m++) {
      [i, j, wt] = edges[m];
      results.push(wt);
    }
    return results;
  })()));
  print('maxweight', maxweight);
  for (p = m = 0, ref = 2 * nedge; (0 <= ref ? m < ref : m > ref); p = 0 <= ref ? ++m : --m) {
    endpoint = edges[Math.floor(p / 2)][p % 2];
  }
  print('endpoint', endpoint);
  neighbend = (function() {
    var n, ref1, results;
    results = [];
    for (i = n = 0, ref1 = nvertex; (0 <= ref1 ? n < ref1 : n > ref1); i = 0 <= ref1 ? ++n : --n) {
      results.push([]);
    }
    return results;
  })();
  for (k = n = 0, ref1 = edges.length; (0 <= ref1 ? n < ref1 : n > ref1); k = 0 <= ref1 ? ++n : --n) {
    [i, j, w] = edges[k];
    neighbend[i].push(2 * k + 1);
    neighbend[j].push(2 * k);
  }
  print('neighbend', neighbend);
  mate = (function() {
    var o, ref2, results;
    results = [];
    for (i = o = 0, ref2 = nvertex; (0 <= ref2 ? o < ref2 : o > ref2); i = 0 <= ref2 ? ++o : --o) {
      results.push(-1);
    }
    return results;
  })();
  print('mate', mate);
  label = (function() {
    var o, ref2, results;
    results = [];
    for (i = o = 0, ref2 = 2 * nvertex; (0 <= ref2 ? o < ref2 : o > ref2); i = 0 <= ref2 ? ++o : --o) {
      results.push(0);
    }
    return results;
  })();
  print('label', label);
  labelend = (function() {
    var o, ref2, results;
    results = [];
    for (i = o = 0, ref2 = 2 * nvertex; (0 <= ref2 ? o < ref2 : o > ref2); i = 0 <= ref2 ? ++o : --o) {
      results.push(-1);
    }
    return results;
  })();
  print('labelend', labelend);
  inblossom = (function() {
    var o, ref2, results;
    results = [];
    for (i = o = 0, ref2 = nvertex; (0 <= ref2 ? o < ref2 : o > ref2); i = 0 <= ref2 ? ++o : --o) {
      results.push(i);
    }
    return results;
  })();
  print('inblossom', inblossom);
  blossomparent = (function() {
    var o, ref2, results;
    results = [];
    for (i = o = 0, ref2 = 2 * nvertex; (0 <= ref2 ? o < ref2 : o > ref2); i = 0 <= ref2 ? ++o : --o) {
      results.push(-1);
    }
    return results;
  })();
  print('blossomparent', blossomparent);
  blossomchilds = (function() {
    var o, ref2, results;
    results = [];
    for (i = o = 0, ref2 = 2 * nvertex; (0 <= ref2 ? o < ref2 : o > ref2); i = 0 <= ref2 ? ++o : --o) {
      results.push(null);
    }
    return results;
  })();
  print('blossomchilds', blossomchilds);
  blossombase = ((function() {
    var o, ref2, results;
    results = [];
    for (i = o = 0, ref2 = nvertex; (0 <= ref2 ? o < ref2 : o > ref2); i = 0 <= ref2 ? ++o : --o) {
      results.push(i);
    }
    return results;
  })()).concat((function() {
    var o, ref2, results;
    results = [];
    for (i = o = 0, ref2 = nvertex; (0 <= ref2 ? o < ref2 : o > ref2); i = 0 <= ref2 ? ++o : --o) {
      results.push(-1);
    }
    return results;
  })());
  print('blossombase', blossombase);
  blossomendps = (function() {
    var o, ref2, results;
    results = [];
    for (i = o = 0, ref2 = 2 * nvertex; (0 <= ref2 ? o < ref2 : o > ref2); i = 0 <= ref2 ? ++o : --o) {
      results.push(null);
    }
    return results;
  })();
  print('blossomendps', blossomendps);
  bestedge = (function() {
    var o, ref2, results;
    results = [];
    for (i = o = 0, ref2 = 2 * nvertex; (0 <= ref2 ? o < ref2 : o > ref2); i = 0 <= ref2 ? ++o : --o) {
      results.push(-1);
    }
    return results;
  })();
  print('bestedge', bestedge);
  blossombestedges = (function() {
    var o, ref2, results;
    results = [];
    for (i = o = 0, ref2 = 2 * nvertex; (0 <= ref2 ? o < ref2 : o > ref2); i = 0 <= ref2 ? ++o : --o) {
      results.push(null);
    }
    return results;
  })();
  print('blossombestedges', blossombestedges);
  unusedblossoms = (function() {
    var o, ref2, ref3, results;
    results = [];
    for (i = o = ref2 = nvertex, ref3 = 2 * nvertex; (ref2 <= ref3 ? o < ref3 : o > ref3); i = ref2 <= ref3 ? ++o : --o) {
      results.push(i);
    }
    return results;
  })();
  print('unusedblossoms', unusedblossoms);
  dualvar = ((function() {
    var o, ref2, results;
    results = [];
    for (i = o = 0, ref2 = nvertex; (0 <= ref2 ? o < ref2 : o > ref2); i = 0 <= ref2 ? ++o : --o) {
      results.push(maxweight);
    }
    return results;
  })()).concat((function() {
    var o, ref2, results;
    results = [];
    for (i = o = 0, ref2 = nvertex; (0 <= ref2 ? o < ref2 : o > ref2); i = 0 <= ref2 ? ++o : --o) {
      results.push(0);
    }
    return results;
  })());
  print('dualvar', dualvar);
  allowedge = (function() {
    var o, ref2, results;
    results = [];
    for (i = o = 0, ref2 = nedge; (0 <= ref2 ? o < ref2 : o > ref2); i = 0 <= ref2 ? ++o : --o) {
      results.push(false);
    }
    return results;
  })();
  print('allowedge', allowedge);
  queue = [];
  slack = function(k) {
    [i, j, wt] = edges[k];
    return dualvar[i] + dualvar[j] - 2 * wt;
  };
  blossomLeaves = function*(b) {
    var len2, o, ref2, results, t, v;
    if (b < nvertex) {
      return (yield b);
    } else {
      ref2 = blossomchilds[b];
      results = [];
      for (o = 0, len2 = ref2.length; o < len2; o++) {
        t = ref2[o];
        if (t < nvertex) {
          results.push((yield t));
        } else {
          results.push((yield* (function*() {
            var len3, q, ref3, results1;
            ref3 = blossomLeaves(t);
            results1 = [];
            for (q = 0, len3 = ref3.length; q < len3; q++) {
              v = ref3[q];
              results1.push((yield v));
            }
            return results1;
          })()));
        }
      }
      return results;
    }
  };
  assignLabel = function(w, t, p) {
    var b, base, len2, o, ref2, results, v;
    b = inblossom[w];
    label[w] = label[b] = t;
    labelend[w] = labelend[b] = p;
    bestedge[w] = bestedge[b] = -1;
    if (t === 1) {
      ref2 = blossomLeaves(b);
      results = [];
      for (o = 0, len2 = ref2.length; o < len2; o++) {
        v = ref2[o];
        results.push(queue.push(v));
      }
      return results;
    } else if (t === 2) {
      base = blossombase[b];
      return assignLabel(endpoint[mate[base]], 1, mate[base] ^ 1);
    }
  };
  scanBlossom = function(v, w) {
    var b, base, len2, o, path;
    path = [];
    base = -1;
    while (v !== -1 || w !== -1) {
      b = inblossom[v];
      if (label[b] & 4) {
        base = blossombase[b];
        break;
      }
      path.push(b);
      label[b] = 5;
      if (labelend[b] === -1) {
        v = -1;
      } else {
        v = endpoint[labelend[b]];
        b = inblossom[v];
        v = endpoint[labelend[b]];
      }
      if (w !== -1) {
        [v, w] = [w, v];
      }
    }
    for (o = 0, len2 = path.length; o < len2; o++) {
      b = path[o];
      label[b] = 1;
    }
    return base;
  };
  addBlossom = function(base, k) {
    var b, bb, bestedgeto, bj, bv, bw, endps, len2, len3, len4, len5, len6, nblist, nblists, o, path, q, r, ref2, ref3, results, u, v, x;
    [v, w, wt] = edges[k];
    bb = inblossom[base];
    bv = inblossom[v];
    bw = inblossom[w];
    b = unusedblossoms.pop();
    blossombase[b] = base;
    blossomparent[b] = -1;
    blossomparent[bb] = b;
    blossomchilds[b] = path = [];
    blossomendps[b] = endps = [];
    while (bv !== bb) {
      blossomparent[bv] = b;
      path.push(bv);
      endps.push(labelend[bv]);
      v = endpoint[labelend[bv]];
      bv = inblossom[v];
    }
    path.push(bb);
    path.reverse();
    endps.reverse();
    endps.push(2 * k);
    while (bw !== bb) {
      blossomparent[bw] = b;
      path.push(bw);
      endps.push(labelend[bw] ^ 1);
      w = endpoint[labelend[bw]];
      bw = inblossom[w];
    }
    label[b] = 1;
    labelend[b] = labelend[bb];
    dualvar[b] = 0;
    ref2 = blossomLeaves(b);
    for (o = 0, len2 = ref2.length; o < len2; o++) {
      v = ref2[o];
      if (label[inblossom[v]] === 2) {
        queue.push(v);
      }
      inblossom[v] = b;
    }
    bestedgeto = (function() {
      var q, ref3, results;
      results = [];
      for (i = q = 0, ref3 = 2 * nvertex; (0 <= ref3 ? q < ref3 : q > ref3); i = 0 <= ref3 ? ++q : --q) {
        results.push(-1);
      }
      return results;
    })();
    for (q = 0, len3 = path.length; q < len3; q++) {
      bv = path[q];
      nblists = blossombestedges[bv] ? [blossombestedges[bv]] : [
        (function() {
          var len4,
        r,
        ref3,
        results;
          ref3 = blossomLeaves(bv);
          results = [];
          for (r = 0, len4 = ref3.length; r < len4; r++) {
            v = ref3[r];
            results.push([
              (function() {
                var len5,
              ref4,
              results1,
              u;
                ref4 = neighbend[v];
                results1 = [];
                for (u = 0, len5 = ref4.length; u < len5; u++) {
                  p = ref4[u];
                  results1.push(p / 2 | 0);
                }
                return results1;
              })()
            ]);
          }
          return results;
        })()
      ];
      for (r = 0, len4 = nblists.length; r < len4; r++) {
        nblist = nblists[r];
        for (u = 0, len5 = nblist.length; u < len5; u++) {
          k = nblist[u];
          [i, j, wt] = edges[k];
          if (inblossom[j] === b) {
            [i, j] = [j, i];
          }
          bj = inblossom[j];
          if (bj !== b && label[bj] === 1 && (bestedgeto[bj] === -1 || slack(k) < slack(bestedgeto[bj]))) {
            bestedgeto[bj] = k;
          }
        }
      }
      blossombestedges[bv] = null;
      bestedge[bv] = -1;
    }
    blossombestedges[b] = (function() {
      var len6, results, x;
      results = [];
      for (x = 0, len6 = bestedgeto.length; x < len6; x++) {
        k = bestedgeto[x];
        if (k !== -1) {
          results.push(k);
        }
      }
      return results;
    })();
    bestedge[b] = -1;
    ref3 = blossombestedges[b];
    results = [];
    for (x = 0, len6 = ref3.length; x < len6; x++) {
      k = ref3[x];
      if (bestedge[b] === -1 || slack(k) < slack(bestedge[b])) {
        results.push(bestedge[b] = k);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };
  expandBlossom = function(b, endstage) {
    var bv, endptrick, entrychild, jstep, len2, len3, len4, o, q, r, ref2, ref3, ref4, s, v;
    ref2 = blossomchilds[b];
    for (o = 0, len2 = ref2.length; o < len2; o++) {
      s = ref2[o];
      blossomparent[s] = -1;
      if (s < nvertex) {
        inblossom[s] = s;
      } else if (endstage && dualvar[s] === 0) {
        expandBlossom(s, endstage);
      } else {
        ref3 = blossomLeaves(s);
        for (q = 0, len3 = ref3.length; q < len3; q++) {
          v = ref3[q];
          inblossom[v] = s;
        }
      }
    }
    if ((!endstage) && label[b] === 2) {
      entrychild = inblossom[endpoint[labelend[b] ^ 1]];
      j = blossomchilds[b].indexOf(entrychild);
      if (j & 1) {
        j -= len(blossomchilds[b]);
        jstep = 1;
        endptrick = 0;
      } else {
        jstep = -1;
        endptrick = 1;
      }
      p = labelend[b];
      while (j !== 0) {
        label[endpoint[p ^ 1]] = 0;
        label[endpoint[blossomendps[b][j - endptrick] ^ endptrick ^ 1]] = 0;
        assignLabel(endpoint[p ^ 1], 2, p);
        allowedge[blossomendps[b][j - endptrick] / 2 | 0] = true;
        j += jstep;
        p = blossomendps[b][j - endptrick] ^ endptrick;
        allowedge[p / 2 | 0] = true;
        j += jstep;
      }
      bv = blossomchilds[b][j];
      label[endpoint[p ^ 1]] = label[bv] = 2;
      labelend[endpoint[p ^ 1]] = labelend[bv] = p;
      bestedge[bv] = -1;
      j += jstep;
      while (blossomchilds[b][j] !== entrychild) {
        bv = blossomchilds[b][j];
        if (label[bv] === 1) {
          j += jstep;
          continue;
        }
        ref4 = blossomLeaves(bv);
        for (r = 0, len4 = ref4.length; r < len4; r++) {
          v = ref4[r];
          if (label[v] !== 0) {
            break;
          }
        }
        if (label[v] !== 0) {
          label[v] = 0;
          label[endpoint[mate[blossombase[bv]]]] = 0;
          assignLabel(v, 2, labelend[v]);
        }
        j += jstep;
      }
    }
    label[b] = labelend[b] = -1;
    blossomchilds[b] = blossomendps[b] = null;
    blossombase[b] = -1;
    blossombestedges[b] = null;
    bestedge[b] = -1;
    return unusedblossoms.push(b);
  };
  augmentBlossom = function(b, v) {
    var endptrick, jstep, t;
    t = v;
    while (blossomparent[t] !== b) {
      t = blossomparent[t];
    }
    if (t >= nvertex) {
      augmentBlossom(t, v);
    }
    i = j = blossomchilds[b].indexOf(t);
    if (i & 1) {
      j -= len(blossomchilds[b]);
      jstep = 1;
      endptrick = 0;
    } else {
      jstep = -1;
      endptrick = 1;
    }
    while (j !== 0) {
      j += jstep;
      t = blossomchilds[b][j];
      p = blossomendps[b][j - endptrick] ^ endptrick;
      if (t >= nvertex) {
        augmentBlossom(t, endpoint[p]);
      }
      j += jstep;
      t = blossomchilds[b][j];
      if (t >= nvertex) {
        augmentBlossom(t, endpoint[p ^ 1]);
      }
      mate[endpoint[p]] = p ^ 1;
      mate[endpoint[p ^ 1]] = p;
    }
    blossomchilds[b] = blossomchilds[b].slice(i).concat(blossomchilds[b].slice(0, i));
    blossomendps[b] = blossomendps[b].slice(i).concat(blossomendps[b].slice(0, i));
    return blossombase[b] = blossombase[blossomchilds[b][0]];
  };
  augmentMatching = function(k) {
    var bs, bt, len2, o, ref2, results, s, t, v;
    [v, w, wt] = edges[k];
    ref2 = [[v, 2 * k + 1], [w, 2 * k]];
    results = [];
    for (o = 0, len2 = ref2.length; o < len2; o++) {
      [s, p] = ref2[o];
      results.push((function() {
        var results1;
        results1 = [];
        while (true) {
          bs = inblossom[s];
          if (bs >= nvertex) {
            augmentBlossom(bs, s);
          }
          mate[s] = p;
          if (labelend[bs] === -1) {
            break;
          }
          t = endpoint[labelend[bs]];
          bt = inblossom[t];
          s = endpoint[labelend[bt]];
          j = endpoint[labelend[bt] ^ 1];
          if (bt >= nvertex) {
            augmentBlossom(bt, j);
          }
          mate[j] = labelend[bt];
          results1.push(p = labelend[bt] ^ 1);
        }
        return results1;
      })());
    }
    return results;
  };
// ... (rest of the functions)
  for (t = o = 0, ref2 = nvertex; (0 <= ref2 ? o < ref2 : o > ref2); t = 0 <= ref2 ? ++o : --o) {
    label.fill(0);
    bestedge.fill(-1);
    blossombestedges.fill(null);
    allowedge.fill(false);
    queue = [];
    for (v = q = 0, ref3 = nvertex; (0 <= ref3 ? q < ref3 : q > ref3); v = 0 <= ref3 ? ++q : --q) {
      if (mate[v] === -1 && label[inblossom[v]] === 0) {
        assignLabel(v, 1, -1);
      }
    }
    augmented = 0;
    while (true) {
      while (queue.length && !augmented) {
        v = queue.pop();
        ref4 = neighbend[v];
        for (r = 0, len2 = ref4.length; r < len2; r++) {
          p = ref4[r];
          k = p / 2 | 0;
          w = endpoint[p];
          if (inblossom[v] === inblossom[w]) {
            next;
          }
          if (!allowedge[k]) {
            kslack = slack(k);
            if (kslack <= 0) {
              allowedge[k] = true;
            }
          }
          if (allowedge[k]) {
            if (label[inblossom[w]] === 0) {
              assignLabel(w, 2, p ^ 1);
            } else if (label[inblossom[w]] === 1) {
              base = scanBlossom(v, w);
              if (base >= 0) {
                addBlossom(base, k);
              } else {
                augmentMatching(k);
                augmented = 1;
                break;
              }
            } else if (label[w] === 0) {
              label[w] = 2;
              labelend[w] = p ^ 1;
            }
          } else if (label[inblossom[w]] === 1) {
            b = inblossom[v];
            if (bestedge[b] === -1 || slack(k) < slack(bestedge[b])) {
              bestedge[b] = k;
            }
          } else if (label[w] === 0) {
            if (bestedge[w] === -1 || slack(k) < slack(bestedge[w])) {
              bestedge[w] = k;
            }
          }
        }
      }
      if (augmented) {
        break;
      }
      deltatype = -1;
      delta = deltaedge = deltablossom = null;
      deltatype = 1;
      if (!maxcardinality) {
        delta = Math.min.apply(null, dualvar.slice(0, nvertex));
      }
      for (v = u = 0, ref5 = nvertex; (0 <= ref5 ? u < ref5 : u > ref5); v = 0 <= ref5 ? ++u : --u) {
        if (label[inblossom[v]] === 0 && bestedge[v] !== -1) {
          d = slack(bestedge[v]);
          if (deltatype === -1 || d < delta) {
            delta = d;
            deltatype = 2;
            deltaedge = bestedge[v];
          }
        }
      }
      for (b = x = 0, ref6 = 2 * nvertex; (0 <= ref6 ? x < ref6 : x > ref6); b = 0 <= ref6 ? ++x : --x) {
        if (blossomparent[b] === -1 && label[b] === 1 && bestedge[b] !== -1) {
          kslack = slack(bestedge[b]);
          if (typeof kslack === "number") {
            d = kslack / 2;
          }
          if (deltatype === -1 || d < delta) {
            delta = d;
            deltatype = 3;
            deltaedge = bestedge[b];
          }
        }
      }
      for (b = y = ref7 = nvertex, ref8 = 2 * nvertex; (ref7 <= ref8 ? y < ref8 : y > ref8); b = ref7 <= ref8 ? ++y : --y) {
        if (blossombase[b] >= 0 && blossomparent[b] === -1 && label[b] === 2 && (deltatype === -1 || dualvar[b] < delta)) {
          delta = dualvar[b];
          deltatype = 4;
          deltablossom = b;
        }
      }
      if (deltatype === -1) {
        deltatype = 1;
        delta = Math.max(0, Math.min.apply(null, dualvar.slice(0, nvertex)));
      }
      for (v = z = 0, ref9 = nvertex; (0 <= ref9 ? z < ref9 : z > ref9); v = 0 <= ref9 ? ++z : --z) {
        if (label[inblossom[v]] === 1) {
          dualvar[v] -= delta;
        }
        if (label[inblossom[v]] === 2) {
          dualvar[v] += delta;
        }
      }
      for (b = i1 = ref10 = nvertex, ref11 = 2 * nvertex; (ref10 <= ref11 ? i1 < ref11 : i1 > ref11); b = ref10 <= ref11 ? ++i1 : --i1) {
        if (blossombase[b] >= 0 && blossomparent[b] === -1) {
          if (label[b] === 1) {
            dualvar[b] += delta;
          }
          if (label[b] === 2) {
            dualvar[b] -= delta;
          }
        }
      }
      if (deltatype === 1) {
        break;
      }
      if (deltatype === 2) {
        allowedge[deltaedge] = true;
      }
      [i, j, wt] = edges[deltaedge];
      if (label[inblossom[i]] === 0) {
        [i, j] = [j, i];
      }
      if (label[inblossom[i]] === 0) {
        queue.push(i);
      }
      if (deltatype === 3) {
        allowedge[deltaedge] = true;
      }
      [i, j, wt] = edges[deltaedge];
      if (deltatype === 3) {
        queue.push(i);
      }
      if (deltatype === 4) {
        expandBlossom(deltablossom, false);
      }
    }
    if (!augmented) {
      break;
    }
    for (b = j1 = ref12 = nvertex, ref13 = 2 * nvertex; (ref12 <= ref13 ? j1 < ref13 : j1 > ref13); b = ref12 <= ref13 ? ++j1 : --j1) {
      if (blossomparent[b] === -1 && blossombase[b] >= 0 && label[b] === 1 && dualvar[b] === 0) {
        expandBlossom(b, true);
      }
    }
  }
  if (mate[v] >= 0) {
    for (v = k1 = 0, ref14 = nvertex; (0 <= ref14 ? k1 < ref14 : k1 > ref14); v = 0 <= ref14 ? ++k1 : --k1) {
      mate[v] = endpoint[mate[v]];
    }
  }
  return mate;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023\044-Monrad\coffee\mwmatching.coffee