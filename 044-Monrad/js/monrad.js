// Generated by CoffeeScript 2.5.1
  // import maxWeightMatching from './js/mwmatching.js'
var ALFABET, Button, DY, N, R, a, adjustForColors, antal, assert, b, buttons, calcScore, calcT, colorize, copyToClipboard, createAllButtons, createURL, datum, fetchURL, getMet, i, invert, j, k, l, len, len1, len2, lightbulb, lotta, lotta_inner, message, moveAllButtons, mw, nameList, pair, pairings, persons, prRes, print, random, range, ref, ref1, ref2, released, res, resultat, rond, scorex, seed, selectRounds, setPrompt, setT0, showHeader, showNames, showResult, showTables, showType, start, state, sum, sumBW, temp, title, transferResult, txt, updateAllButtons, z,
  indexOf = [].indexOf;

ALFABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-/'; // ½

N = 0; // antal personer

R = 0; // antal ronder

DY = 30; // radavstånd i pixlar


// States:
// 2 Names
// 3 Tables
// 4 Result
seed = 14; // Math.random()

random = function() {
  return (((Math.sin(seed++) / 2 + 0.5) * 10000) % 100) / 100;
};

print = console.log;

range = _.range;

title = '';

datum = '';

persons = []; // stabil, sorterad på id

nameList = []; // stabil, sorterad på namn

pairings = []; // varierar med varje rond

state = 0;

rond = 0;

resultat = []; // 012 sorterad på id

antal = 0;

showType = function(a) {
  if (typeof a === 'string') {
    return `'${a}'`;
  } else {
    return a;
  }
};

assert = function(a, b) {
  if (!_.isEqual(a, b)) {
    return print(`Assert failure: ${showType(a)} != ${showType(b)}`);
  }
};

selectRounds = function(n) { // antal ronder ska vara cirka 150% av antalet matcher i en cup. Samt jämnt.
  var res;
  res = Math.floor(1.50 * Math.log2(n));
  res += res % 2;
  if (2 * res > n) {
    res -= 1;
  }
  if (n === 4) {
    res = 2;
  }
  return res;
};

assert(2, selectRounds(4));

assert(3, selectRounds(6));

assert(4, selectRounds(10));

assert(6, selectRounds(12));

assert(6, selectRounds(24));

assert(8, selectRounds(26));

assert(8, selectRounds(60));

assert(10, selectRounds(64));

buttons = [[], [], [], [], []];

released = true;

message = ''; //This is a tutorial tournament. Use it or edit the URL'

fetchURL = function(url = location.search) {
  var i, j, len, ref, ref1, ref2, ref3, ref4, res, urlParams;
  res = {};
  urlParams = new URLSearchParams(url);
  persons = [];
  title = urlParams.get('T').replace('_', ' ');
  datum = urlParams.get('D') || "";
  res.N = urlParams.get('N').replaceAll('_', ' ').split('|');
  N = res.N.length;
  if (N < 4) {
    print("Error: Number of players must be 4 or more!");
    return;
  }
  if (N > 64) {
    print("Error: Number of players must be 64 or less!");
    return;
  }
  if (res.O && res.C && res.R) {
    res.O = urlParams.get('O').split('|');
    res.C = urlParams.get('C').split('|');
    res.R = urlParams.get('R').split('|');
    if (((res.N.length !== (ref1 = res.O.length) && ref1 !== (ref = res.C.length)) && ref !== res.R.length)) {
      print("Error: Illegal number of players in O, C or R!");
      return;
    }
    R = res.R[0].length;
    res.O = _.map(res.O, function(r) {
      return _.map(r, function(ch) {
        return ALFABET.indexOf(ch);
      });
    });
    res.C = _.map(res.C, function(r) {
      return _.map(r, function(ch) {
        return {
          B: -1,
          W: 1
        }[ch];
      });
    });
    res.R = _.map(res.R, function(r) {
      return _.map(r, function(ch) {
        return parseInt(ch);
      });
    });
    ref2 = range(N);
    for (j = 0, len = ref2.length; j < len; j++) {
      i = ref2[j];
      if (((R !== (ref4 = res.O[i].length) && ref4 !== (ref3 = res.C[i].length)) && ref3 !== res.R[i].length)) {
        print(`Error: Illegal number of rounds for player ${res.N[i]}!`);
        return;
      }
      persons.push({
        id: i,
        n: res.N[i],
        c: res.C[i],
        r: res.R[i],
        s: 0,
        opps: res.O[i],
        T: [0, 0, 0]
      });
    }
  } else {
    if (N % 2 === 1) {
      res.N.push('-frirond-');
      N += 1;
    }
    res.N = _.shuffle(res.N);
    persons = _.map(range(N), function(i) {
      return {
        id: i,
        n: res.N[i],
        c: '',
        r: '',
        s: 0,
        opps: [],
        T: []
      };
    });
    R = selectRounds(N);
  }
  return nameList = _.sortBy(persons, ['n']);
};

copyToClipboard = function(text) {
  var textarea;
  if (!navigator.clipboard) {
    textarea = document.createElement('textarea');
    textarea.value = text;
    document.boF.appendChild(textarea);
    textarea.select();
    document.execCommand('copy');
    document.boF.removeChild(textarea);
    return message = 'Urlen har kopierats till klippbordet 1';
  } else {
    return navigator.clipboard.writeText(text).then(() => {
      return message = 'Urlen har kopierats till klippbordet 2';
    }).catch((err) => {
      return message('Kopiering till klippbordet misslyckades');
    });
  }
};

Button = class Button {
  constructor(prompt1, fill1, click) {
    this.prompt = prompt1;
    this.fill = fill1;
    this.click = click;
    this.active = true;
  }

  setExtent(x1, y1, w, h) {
    this.x = x1;
    this.y = y1;
    this.w = w;
    this.h = h;
  }

  draw() {
    if (!this.active) {
      return;
    }
    textAlign(CENTER, CENTER);
    if (this.prompt === 'next') {
      fill('black');
      rectMode(CENTER);
      rect(this.x, this.y, this.w, this.h);
    }
    fill(this.fill);
    return text(this.prompt, this.x, this.y + 0.5);
  }

  inside(mx, my) {
    return (this.x - this.w / 2 <= mx && mx <= this.x + this.w / 2) && (this.y - this.h / 2 <= my && my <= this.y + this.h / 2) && this.active;
  }

};

createURL = function() {
  var res;
  res = "https://christernilsson.github.io/2023/044-Monrad";
  res += "?T=" + "Wasa SK KM blixt";
  res += "&D=" + "2023-11-25";
  res += "&N=" + (_.map(persons, function(person) {
    return person.n.replaceAll(" ", "_");
  })).join("|");
  if (persons[0].opps.length > 0) {
    res += "&O=" + (_.map(persons, function(person) {
      return (_.map(person.opps, function(opp) {
        return ALFABET[opp];
      })).join("");
    })).join("|");
    res += "&C=" + (_.map(persons, function(person) {
      return person.c;
    })).join("|");
    res += "&R=" + (_.map(persons, function(person) {
      return person.r;
    })).join("|");
  }
  return res;
};

sum = function(s) {
  var item, j, len, res;
  res = 0;
  for (j = 0, len = s.length; j < len; j++) {
    item = s[j];
    res += parseInt(item);
  }
  return res;
};

assert(6, sum('012012'));

sumBW = function(s) {
  var item, j, len, res;
  res = 0;
  for (j = 0, len = s.length; j < len; j++) {
    item = s[j];
    res += item === 'B' ? -1 : 1;
  }
  return res;
};

assert(0, sumBW(''));

assert(0, sumBW('BWBWWB'));

assert(-6, sumBW('BBBBBB'));

assert(6, sumBW('WWWWWW'));

scorex = function(person) {
  // print 'scorex',person
  return sum(person.r);
};

getMet = function(a, b) {
  var ref;
  return ref = b.id, indexOf.call(persons[a.id].opps, ref) >= 0;
};

colorize = function(persons) {
  var i, j, len, pa, pac, pb, pbc, ref, results;
  ref = range(Math.floor(persons.length / 2));
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    pa = persons[2 * i];
    pb = persons[2 * i + 1];
    pac = 'B W'[pa.mandatory + 1];
    pbc = 'B W'[pb.mandatory + 1];
    if (pac === pbc) {
      if (pa.colorComp <= pb.colorComp) {
        pac = 'W';
      } else {
        pac = 'B';
      }
    }
    pa.c += pac;
    results.push(pb.c += pac === 'W' ? 'B' : 'W');
  }
  return results;
};

pair = function(persons, pairing = []) {
  var a, b, j, len, mandatory, newPairing, newPersons, p, result;
  //print 'persons',persons
  //print 'pairing',pairing
  if (pairing.length === N) {
    return pairing;
  }
  antal += 1;
  a = persons[0];
  for (j = 0, len = persons.length; j < len; j++) {
    b = persons[j];
    if (a === b) {
      continue; // man kan inte möta sig själv
    }
    if (getMet(a, b)) {
      continue; // a och b får ej ha mötts tidigare
    }
    mandatory = a.mandatory + b.mandatory;
    if (2 === Math.abs(mandatory)) {
      continue; // Spelarna kan inte ha samma färg.
    }
    // print "pair: #{pairing.length//2} #{a.id} - #{b.id}"
    newPersons = (function() {
      var k, len1, results;
      results = [];
      for (k = 0, len1 = persons.length; k < len1; k++) {
        p = persons[k];
        if (p !== a && p !== b) {
          results.push(p);
        }
      }
      return results;
    })();
    newPairing = pairing.concat([a, b]);
    result = pair(newPersons, newPairing);
    if (result.length === N) {
      return result;
    }
  }
  return [];
};

adjustForColors = function(pairings) {
  var i, j, len, ref, res;
  res = [];
  ref = range(Math.floor(N / 2));
  //print 'adjustForColors',pairings
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    if (pairings[2 * i].c.length === 0 || 'W' === _.last(pairings[2 * i].c)) {
      res.push(pairings[2 * i]);
      res.push(pairings[2 * i + 1]);
    } else {
      res.push(pairings[2 * i + 1]);
      res.push(pairings[2 * i]);
    }
  }
  //print 'adjustForColors',res
  return res;
};

lotta_inner = function(pairings) { // personer sorterade
  var _, a, arr, b, i, ia, ib, j, k, l, len, len1, len2, len3, len4, lst, m, mandatory, o, ref, ref1, ref2, res, result, reverse, z;
  // denna funktion anpassar till maxWeightMatching
  arr = [];
  print('aaa', pairings);
  for (j = 0, len = pairings.length; j < len; j++) {
    a = pairings[j];
    for (k = 0, len1 = pairings.length; k < len1; k++) {
      b = pairings[k];
      if (a.id >= b.id) {
        continue;
      }
      if (getMet(a, b)) {
        continue;
      }
      mandatory = a.mandatory + b.mandatory;
      if (Math.abs(mandatory) === 2) {
        continue; // Spelarna kan inte ha samma färg.
      }
      arr.push([a.id + 1, b.id + 1, 1000 - Math.abs(scorex(a) - scorex(b))]);
    }
  }
  print('arr', arr);
  z = maxWeightMatching(arr);
  print('z', z);
  z = z.slice(1); //[1:N+1]
  res = [];
  ref = range(N);
  for (l = 0, len2 = ref.length; l < len2; l++) {
    i = ref[l];
    if (i < z[i] - 1) {
      res.concat([i, z[i] - 1]);
    }
  }
  // res är ej sorterad i bordsordning ännu
  print('adam', res);
  result = [];
  ref1 = range(Math.floor(N / 2));
  for (m = 0, len3 = ref1.length; m < len3; m++) {
    i = ref1[m];
    ia = res[2 * i];
    ib = res[2 * i + 1];
    a = persons[ia];
    b = persons[ib];
    lst = [scorex(a), scorex(b)];
    lst.sort(reverse = True);
    result.append([lst, ia, ib]);
  }
  result.sort(reverse = True);
  resultat = [];
  ref2 = range(Math.floor(N / 2));
  for (o = 0, len4 = ref2.length; o < len4; o++) {
    i = ref2[o];
    [_, ia, ib] = result[i];
    resultat.concat([ia, ib]);
  }
  // a = persons[ia]
  // b = persons[ib]
  // pa = scorex(a) # sum(a['result'])/2
  // pb = scorex(b) # sum(b['result'])/2
  // print('',i+1,' ',pa,a["name"],'         ',b["name"],' ',pb)
  return resultat;
};

lotta = function() {
  var a, b, colorSum, i, j, k, latest, latest2, len, len1, p, ref;
// prepare pairing
  for (j = 0, len = persons.length; j < len; j++) {
    p = persons[j];
    colorSum = sumBW(p.c);
    latest = p.c.length === 0 ? '' : _.last(p.c);
    latest2 = p.c.length < 2 ? '' : sumBW(_.slice(p.c, p.c.length - 2));
    p.mandatory = 0;
    if (colorSum <= -1 || latest2 === -2) {
      p.mandatory = 1;
    }
    if (colorSum >= 1 || latest2 === 2) {
      p.mandatory = -1;
    }
    p.colorComp = [
      colorSum,
      latest // fundera på ordningen här.
    ];
  }
  calcScore();
  if (rond === 0) {
    pairings = persons;
  } else {
    pairings = _.sortBy(persons, ['s']);
    pairings = pairings.reverse();
    //start = new Date()
    //antal = 0

    // pairings = pair pairings
    print('pairings', pairings);
    pairings = lotta_inner(pairings);
  }
  //print rond, "#{antal} #{new Date() - start} milliseconds"
  colorize(pairings);
  pairings = adjustForColors(pairings);
  ref = range(Math.floor(N / 2));
  for (k = 0, len1 = ref.length; k < len1; k++) {
    i = ref[k];
    a = pairings[2 * i];
    b = pairings[2 * i + 1];
    a.opps.push(b.id);
    b.opps.push(a.id);
  }
  return state = 2;
};

// print {'pairings efter lottning',pairings}
prRes = function(score) {
  var a, b;
  score = parseInt(score);
  if (score === 1) {
    return '½';
  }
  a = `${Math.floor(score / 2)}`;
  b = score % 2 === 1 ? '½' : '';
  return a + b;
};

assert('0', prRes('0'));

assert('½', prRes('1'));

assert('1', prRes('2'));

assert('1½', prRes(3));

assert('10', prRes(20));

assert('10½', prRes(21));

invert = function(arr) {
  var i, j, len, ref, res;
  res = [];
  ref = range(arr.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    res[arr[i]] = i;
  }
  return res;
};

assert([0, 1, 2, 3], invert([0, 1, 2, 3]));

assert([3, 2, 0, 1], invert([2, 3, 1, 0]));

calcScore = function() {
  var j, len, person, results;
  results = [];
  for (j = 0, len = persons.length; j < len; j++) {
    person = persons[j];
    results.push(person.s = parseInt(sum(person.r)));
  }
  return results;
};

setT0 = function(p, q) {
  var r;
  if (indexOf.call(persons[p].opps, q) >= 0) {
    r = persons[p].opps.indexOf(q);
    return persons[p].T[0] = persons[p].r[r];
  }
};

calcT = function() {
  var i, j, k, key, len, len1, p, person, q, ref, results, scores;
  // T ska beräknas först när allt är klart!
  // Beräkna T1 bara för de poänggrupper som har exakt två personer och då enbart om de har mött varandra.
  // Oklart om detta används för grupper med t ex tre personer. Låg sannolikhet att alla mött varandra.
  scores = {};
  ref = range(persons.length);
  for (j = 0, len = ref.length; j < len; j++) {
    p = ref[j];
    person = persons[p];
    key = sum(person.r);
    if (key in scores) {
      scores[key].push(p);
    } else {
      scores[key] = [p];
    }
    person.T[0] = 0;
  }
  for (key in scores) {
    if (scores[key].length === 2) {
      [p, q] = scores[key];
      setT0(p, q);
      setT0(q, p);
    }
  }
  results = [];
  for (k = 0, len1 = persons.length; k < len1; k++) {
    p = persons[k];
    p.T[1] = p.r.split("").filter((x) => {
      return x === '2';
    }).length;
    p.T[2] = 0;
    results.push((function() {
      var l, len2, ref1, results1;
      ref1 = p.opps;
      results1 = [];
      for (l = 0, len2 = ref1.length; l < len2; l++) {
        i = ref1[l];
        results1.push(p.T[2] += sum(persons[i].r)); // Buchholz: summan av motståndarnas poäng
      }
      return results1;
    })());
  }
  return results;
};

mw = function(x) {
  return x / 1000 * width; // (milliWidth)
};


//########## GUI ############
showHeader = function(header) {
  var y;
  y = DY / 2;
  textAlign(CENTER, CENTER);
  txt(`${title} ${datum}`, mw(7), y, LEFT, 'black');
  txt(header, mw(500), y, CENTER);
  return txt(rond + 1, mw(900), y, RIGHT);
};

txt = function(value, x, y, align = null, color = null) {
  if (align) {
    textAlign(align, CENTER);
  }
  if (color) {
    fill(color);
  }
  return text(value, x, y);
};

showNames = function() {
  var bord, i, j, len, person, x, y;
  showHeader('Names');
  textSize(0.5 * DY);
  txt('Table Name', mw(5), DY * 1.5, LEFT);
  txt('Table Name', mw(505), DY * 1.5, LEFT);
  for (i = j = 0, len = pairings.length; j < len; i = ++j) {
    person = pairings[i];
    x = mw(500) * (Math.floor(person.id / (Math.floor(N / 2))));
    y = DY * (2.5 + person.id % (Math.floor(N / 2)));
    bord = 1 + Math.floor(i / 2);
    fill('B' === _.last(person.c) ? 'black' : 'white');
    txt(bord, 0.75 * DY + x, y, RIGHT);
    txt(person.n, DY + x, y, LEFT);
  }
  return buttons[3][0].active = false;
};

showTables = function() {
  var a, b, i, j, len, nr, pa, pb, ref, results, y;
  showHeader('Tables');
  y = 1.5 * DY;
  txt('#', mw(75), y, CENTER, 'white');
  txt('Score', mw(150), y);
  txt('White', mw(300), y);
  txt('Result', mw(500), y, CENTER, 'lightgray');
  txt('Black', mw(700), y, CENTER, 'black');
  txt('Score', mw(850), y);
  txt('#', mw(925), y);
  ref = range(Math.floor(N / 2));
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    y = DY * (i + 2.5);
    a = pairings[2 * i];
    b = pairings[2 * i + 1];
    pa = sum(a.r);
    pb = sum(b.r);
    nr = i + 1;
    txt(nr, mw(75), y, CENTER, 'white');
    txt(prRes(pa), mw(150), y);
    txt('-', mw(500), y, CENTER, 'lightgray');
    txt(prRes(pb), mw(850), y, CENTER, 'black');
    results.push(txt(nr, mw(925), y));
  }
  return results;
};

lightbulb = function(color, x, y, result, opponent) {
  var strokeWeight;
  push();
  fill('red yellow green'.split(' ')[result]);
  circle(x, y, 0.9 * DY);
  fill({
    B: 'black',
    W: 'white'
  }[color]);
  textSize(DY * 0.6);
  if (result === '1' && color === 'W') {
    stroke('black');
    strokeWeight = 1;
  } else {
    noStroke();
    strokeWeight = 0;
  }
  txt(1 + opponent, x, y + 2, CENTER);
  return pop();
};

showResult = function() {
  var i, inv, j, k, l, len, len1, len2, p, person, r, ref, ref1, results, score, temp, x, y;
  showHeader('Result');
  if (pairings.length === 0) {
    txt("This round can't be paired! (Too many rounds)", width / 2, height / 2, CENTER);
    return;
  }
  noStroke();
  calcT();
  calcScore();
  temp = _.sortBy(persons, ['s', 'T']);
  temp = temp.reverse();
  inv = (function() {
    var j, len, results;
    results = [];
    for (j = 0, len = temp.length; j < len; j++) {
      p = temp[j];
      results.push(p.id);
    }
    return results;
  })();
  inv = invert(inv);
  y = 1.5 * DY;
  textAlign(CENTER);
  ref = range(R);
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    txt(r + 1, mw(330) + DY * r, y);
  }
  txt("Score", mw(850), y);
  txt("D", mw(900), y);
  txt("W", mw(930), y);
  txt("B", mw(960), y);
  fill('white');
  textSize(DY * 0.5);
  results = [];
  for (i = k = 0, len1 = temp.length; k < len1; i = ++k) {
    person = temp[i];
    y = DY * (i + 2.5);
    txt(1 + i, mw(40), y, RIGHT);
    txt(person.n, mw(50), y, LEFT);
    ref1 = range(rond + 1);
    for (l = 0, len2 = ref1.length; l < len2; l++) {
      r = ref1[l];
      x = mw(330) + DY * r;
      lightbulb(person.c[r][0], x, y, person.r[r], inv[person.opps[r]]);
    }
    score = prRes(sum(person.r));
    txt(score, mw(850), y, CENTER, 'white');
    txt(prRes(person.T[0]), mw(900), y);
    txt(person.T[1], mw(930), y);
    results.push(txt(prRes(person.T[2]), mw(960), y));
  }
  return results;
};

setPrompt = function(button, prompt) {
  var j, len, ref;
  button.prompt = button.prompt === prompt ? '-' : prompt;
  ref = buttons[3].slice(1);
  for (j = 0, len = ref.length; j < len; j++) {
    button = ref[j];
    if (button.prompt === '-') {
      buttons[3][0].active = false;
      return;
    }
  }
  return buttons[3][0].active = true;
};

window.windowResized = function() {
  DY = mw(50);
  if (state < 4) {
    resizeCanvas(windowWidth, DY * (Math.floor(N / 2) + 2));
  } else {
    resizeCanvas(windowWidth, DY * (N + 2));
  }
  return moveAllButtons();
};

transferResult = function() {
  var button, i, j, len, ref, results, white;
  ref = range(Math.floor(N / 2));
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    button = buttons[3][2 + 3 * i];
    white = {
      '1 - 0': 2,
      '½ - ½': 1,
      '0 - 1': 0
    }[button.prompt];
    pairings[2 * i + 0].r += "012"[white];
    pairings[2 * i + 1].r += "012"[2 - white];
    results.push(button.prompt = '-');
  }
  return results;
};

moveAllButtons = function() {
  var i, j, len, ref, results, y;
  buttons[2][0].setExtent(mw(950), 0.45 * DY, mw(60), 0.55 * DY);
  buttons[3][0].setExtent(mw(950), 0.45 * DY, mw(60), 0.55 * DY);
  buttons[4][0].setExtent(mw(950), 0.45 * DY, mw(60), 0.55 * DY);
  ref = range(Math.floor(N / 2));
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    y = DY * (i + 2.5);
    buttons[3][3 * i + 1].setExtent(mw(300), y, mw(200), 30);
    buttons[3][3 * i + 2].setExtent(mw(500), y, mw(200), 30);
    results.push(buttons[3][3 * i + 3].setExtent(mw(700), y, mw(200), 30));
  }
  return results;
};

updateAllButtons = function() {
  var black, i, j, len, ref, results, white;
  ref = range(Math.floor(N / 2));
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    white = pairings[2 * i + 0];
    black = pairings[2 * i + 1];
    buttons[3][3 * i + 1].prompt = white.n;
    buttons[3][3 * i + 2].prompt = '-';
    results.push(buttons[3][3 * i + 3].prompt = black.n);
  }
  return results;
};

createAllButtons = function() {
  var i, j, len, n, ref;
  buttons = [[], [], [], [], []];
  buttons[2].push(new Button('next', 'yellow', function() {
    state = 3;
    return updateAllButtons();
  }));
  buttons[3] = [];
  buttons[3].push(new Button('next', 'yellow', function() {
    state = 4;
    transferResult();
    return windowResized();
  }));
  ref = range(Math.floor(N / 2));
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    n = buttons[3].length;
    (function(n) {
      buttons[3].push(new Button('white', 'white', function() {
        return setPrompt(buttons[3][n + 1], '1 - 0');
      }));
      buttons[3].push(new Button('-', 'lightgray', function() {
        return setPrompt(buttons[3][n + 1], '½ - ½');
      }));
      return buttons[3].push(new Button('black', 'black', function() {
        return setPrompt(buttons[3][n + 1], '0 - 1');
      }));
    })(n);
  }
  buttons[4].push(new Button('next', 'yellow', function() {
    var s;
    resizeCanvas(windowWidth, DY * (Math.floor(N / 2) + 2));
    s = createURL();
    print(s);
    copyToClipboard(s);
    if (rond < R - 1) {
      rond += 1;
      lotta();
      return print({pairings});
    }
  }));
  return print(`${buttons[3].length + 2} buttons created`);
};

// if location.search == ''
// 	title = 'Tutorial Tournament'
// 	#datum = new Date()
// 	#datum = datum.toISOString().split('T')[0]
// 	url = "?T=#{title.replace(" ","_")}&N=ANDERSSON_Anders|BENGTSSON_Bertil|CARLSEN_Christer|DANIELSSON_Daniel|ERIKSSON_Erik|FRANSSON_Ferdinand|GREIDER_Göran|HARALDSSON_Helge"
// 	location.href = url
// else
// 	fetchURL()
// 	pairings = persons

// window.setup = ->
// 	createCanvas windowWidth,windowHeight
// 	createAllButtons()
// 	moveAllButtons()

// 	# print N + ' players ' + R + ' rounds'
// 	textAlign CENTER,CENTER
// 	lotta()

// window.draw = ->
// 	background 'gray'
// 	for button in buttons[state]
// 		button.draw()
// 	if state <= 1 then text "State #{state}",100,100
// 	else if state == 2 then showNames()
// 	else if state == 3 then showTables()
// 	else if state == 4 then showResult()

// window.mousePressed = (event) ->
// 	event.preventDefault()
// 	if not released then return
// 	released = false
// 	for button in buttons[state]
// 		if button.inside mouseX,mouseY then button.click()
// 	false

// window.mouseReleased = (event) ->
// 	event.preventDefault()
// 	released = true
// 	false

//############################
N = 16;

ref = range(N);
for (j = 0, len = ref.length; j < len; j++) {
  i = ref[j];
  persons.push({
    id: i,
    n: i,
    c: "",
    r: "",
    s: 0,
    opps: [],
    T: [0, 0, 0]
  });
}

start = new Date();

ref1 = range(2);
// N//2
for (k = 0, len1 = ref1.length; k < len1; k++) {
  rond = ref1[k];
  lotta();
  ref2 = range(Math.floor(N / 2));
  for (l = 0, len2 = ref2.length; l < len2; l++) {
    i = ref2[l];
    a = pairings[2 * i + 0];
    b = pairings[2 * i + 1];
    z = random();
    if (z < 0.1) {
      res = 1;
    } else if (z < 0.5) {
      res = 0;
    } else {
      res = 2;
    }
    a.r += res.toString();
    b.r += (2 - res).toString();
  }
  print(`${new Date() - start} milliseconds`);
}

calcT();

temp = _.sortBy(persons, ['s', 'T']);

temp = temp.reverse();

print(temp);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023\044-Monrad\coffee\monrad.coffee