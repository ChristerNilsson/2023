// Generated by CoffeeScript 2.5.1
var ALFABET, N, R, a, antal, b, calcScore, calcT, colorSum, colorize, createURL, fejkaData, fetchURL, getMet, i, ids, invert, j, k, l, latest, latest2, len, len1, len2, lotta, nameList, p, persons, prRes, print, random, range, ref, ref1, res, rond, score, seed, setT0, spara, start, sum, temp, visaBordslista, visaLottning, visaNamnlista, visaResultat, x,
  indexOf = [].indexOf;

ALFABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-/';

N = 0; // antal personer

R = 0; // antal ronder

seed = 12; // Math.random()

random = function() {
  return (((Math.sin(seed++) / 2 + 0.5) * 10000) % 100) / 100;
};

print = console.log;

range = _.range;

persons = [];

nameList = [];

createURL = function() {
  var res;
  res = "";
  res += "?T=" + "Wasa SK KM blixt";
  res += "&D=" + "2023-11-25";
  res += "&N=" + (_.map(persons, function(person) {
    return person.n.replaceAll(" ", "_");
  })).join("|");
  if (persons[0].opps.length > 0) {
    res += "&O=" + (_.map(persons, function(person) {
      return (_.map(person.opps, function(opp) {
        return ALFABET[opp];
      })).join("");
    })).join("|");
    res += "&C=" + (_.map(persons, function(person) {
      return person.c;
    })).join("|");
    res += "&R=" + (_.map(persons, function(person) {
      return person.r;
    })).join("|");
  }
  return res;
};

fetchURL = function() {
  var i, j, k, len, len1, ref, ref1, ref2, ref3, ref4, ref5, res, urlParams;
  res = {};
  urlParams = new URLSearchParams(window.location.search);
  persons = [];
  res.T = urlParams.get('T');
  res.D = urlParams.get('D');
  res.N = urlParams.get('N').replaceAll('_', ' ').split('|');
  N = res.N.length;
  if (!((4 <= N && N <= 64))) {
    print("Error: Number players must be between 4 and 64!");
    return;
  }
  if (res.O && res.C && res.R) {
    res.O = urlParams.get('O').split('|');
    res.C = urlParams.get('C').split('|');
    res.R = urlParams.get('R').split('|');
    if (((res.N.length !== (ref1 = res.O.length) && ref1 !== (ref = res.C.length)) && ref !== res.R.length)) {
      print("Error: Illegal number of players in O, C or R!");
      return;
    }
    R = res.R[0].length;
    res.O = _.map(res.O, function(r) {
      return _.map(r, function(ch) {
        return ALFABET.indexOf(ch);
      });
    });
    res.C = _.map(res.C, function(r) {
      return _.map(r, function(ch) {
        return {
          B: -1,
          W: 1
        }[ch];
      });
    });
    res.R = _.map(res.R, function(r) {
      return _.map(r, function(ch) {
        return parseInt(ch);
      });
    });
    ref2 = range(N);
    for (j = 0, len = ref2.length; j < len; j++) {
      i = ref2[j];
      if (((R !== (ref4 = res.O[i].length) && ref4 !== (ref3 = res.C[i].length)) && ref3 !== res.R[i].length)) {
        print(`Error: Illegal number of rounds for player ${res.N[i]}!`);
        return;
      }
      persons.push({
        id: i,
        n: res.N[i],
        c: res.C[i],
        r: res.R[i],
        s: 0,
        opps: res.O[i],
        T: [0, 0, 0]
      });
    }
  } else {
    ref5 = range(N);
    for (k = 0, len1 = ref5.length; k < len1; k++) {
      i = ref5[k];
      persons.push({
        id: i,
        n: res.N[i],
        c: '',
        r: '',
        s: 0,
        opps: []
      });
    }
    R = Math.round(1.5 * Math.log2(N)); // antal ronder
    if (N < 10) {
      return R = 3;
    }
  }
};

fejkaData = function() {
  var efternamn, förnamn, i, j, len, namn, ref, results;
  förnamn = 'ABCDEFGH'; //.split ""
  efternamn = 'ABCDEFGH'; // _.map förnamn, (namn) -> namn + "sson"
  persons = [];
  N = 64;
  R = 9;
  ref = range(64);
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    namn = förnamn[Math.floor(i / 8)] + efternamn[i % 8];
    results.push(persons.push({
      id: i,
      n: namn,
      c: '',
      r: '',
      s: 0,
      opps: [],
      T: [0, 0, 0]
    }));
  }
  return results;
};

//fetchURL()
fejkaData();

start = new Date();

sum = function(s) {
  var item, j, len, res;
  res = 0;
  for (j = 0, len = s.length; j < len; j++) {
    item = s[j];
    res += parseInt(item);
  }
  return res;
};

spara = function(name) {
  return persons.push({
    s: 0,
    id: persons.length,
    n: name,
    c: '',
    mandatory: 0,
    colorComp: [],
    r: '',
    opps: [],
    T: [0, 0, 0]
  });
};

//for i in range 16
//	spara(i)
print(N + ' players ' + R + ' rounds');

print();

score = function(p) {
  return sum(persons[p].r);
};

getMet = function(a, b) {
  return indexOf.call(persons[a].opps, b) >= 0;
};

colorize = function(ids) {
  var i, j, len, pa, pac, pb, ref, results;
  ref = range(Math.floor(ids.length / 2));
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    pa = persons[ids[2 * i]];
    pb = persons[ids[2 * i + 1]];
    if (pa.mandatory) {
      pac = pa.mandatory === 1 ? 'W' : 'B';
    } else if (pb.mandatory) {
      pac = pa.mandatory === 1 ? 'B' : 'W';
    } else {
      if (pa.colorComp < pb.colorComp) {
        pac = 'W';
      } else {
        pac = 'B';
      }
    }
    pa.c += pac;
    results.push(pb.c += pac === 'W' ? 'B' : 'W');
  }
  return results;
};

lotta = function(ids, pairing = []) {
  var a, b, id, j, k, len, len1, mandatory, newPairing, newids, result;
  if (pairing.length === N) {
    return pairing;
  }
// a är ett personindex
  for (j = 0, len = ids.length; j < len; j++) {
    a = ids[j];
// b är ett personindex
    for (k = 0, len1 = ids.length; k < len1; k++) {
      b = ids[k];
      if (a === b) {
        continue; // man kan inte möta sig själv
      }
      if (getMet(a, b)) {
        continue; // a och b får ej ha mötts tidigare
      }
      mandatory = persons[a].mandatory + persons[b].mandatory;
      if (2 === Math.abs(mandatory)) {
        continue; // Spelarna kan inte ha samma färg.
      }
      newids = (function() {
        var l, len2, results;
        results = [];
        for (l = 0, len2 = ids.length; l < len2; l++) {
          id = ids[l];
          if (id !== a && id !== b) {
            results.push(id);
          }
        }
        return results;
      })();
      newPairing = pairing.concat([a, b]);
      result = lotta(newids, newPairing);
      if (result.length === N) {
        return result;
      }
    }
  }
  return [];
};

visaNamnlista = function(rond, ids) {
  var bord, i, j, len, person, ref;
  print('=== Namelist Round', rond + 1, '===');
  print('Table Colour Name');
  ids = invert(ids);
  ref = range(N);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    person = persons[nameList[i]];
    bord = (1 + Math.floor(ids[i] / 2)).toString().padStart(2);
    print(`${bord}${_.last(person.c)} ${person.n}`);
  }
  return print();
};

visaBordslista = function(rond, ids) {
  var a, b, i, j, len, nr, pa, pb, ref;
  print('=== Tables Round', rond + 1, '===');
  print(' # Score W R B Score');
  ref = range(Math.floor(N / 2));
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    a = persons[ids[2 * i]];
    b = persons[ids[2 * i + 1]];
    pa = sum(a.r);
    pb = sum(b.r);
    nr = (i + 1).toString();
    if (nr.length === 1) {
      nr = ' ' + nr;
    }
    print(nr, ' ', prRes(pa).padEnd(2), a.n.padEnd(2), '-', b.n.padEnd(2), ' ', prRes(pb));
  }
  return print();
};

visaLottning = function(ids) {
  var j, len, p, person, results;
  print('Lottning');
  results = [];
  for (j = 0, len = ids.length; j < len; j++) {
    p = ids[j];
    results.push(person = persons[p]);
  }
  return results;
};

prRes = function(score) {
  var remis;
  if (score % 2 === 1) {
    remis = '½';
  } else {
    remis = '';
  }
  score = (Math.floor(score / 2)).toString();
  score = score + remis;
  if (score === '0½') {
    score = '½';
  }
  return score;
};

invert = function(arr) {
  var i, j, len, ref, res;
  res = [0, 0, 0, 0, 0, 0, 0, 0];
  ref = range(arr.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    res[arr[i]] = i;
  }
  return res;
};

antal = function(p, color) {
  var c;
  return sum([
    (function() {
      var j,
    len,
    ref,
    results;
      ref = p.c;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        c = ref[j];
        if (color === c) {
          results.push(1);
        }
      }
      return results;
    })()
  ]);
};

visaResultat = function(rond, ids) {
  var T0, T1, T2, i, inv, j, len, nr, p, pn, results, sRonder, temp;
  calcT(rond);
  calcScore();
  sRonder = _.map(range(rond + 1), function(i) {
    return `R${i + 1}`.padStart(5);
  });
  sRonder = sRonder.join('');
  temp = _.sortBy(persons, ['s', 'T']);
  ids = _.map(temp, function(person) {
    return person.id;
  });
  ids = ids.reverse();
  inv = invert(ids); // pga korstabell
  print('=== Result after round', rond + 1, '===');
  print(' # N', sRonder, 'Score Tie');
  results = [];
  for (j = 0, len = ids.length; j < len; j++) {
    i = ids[j];
    p = persons[i];
    T0 = prRes(p.T[0]);
    T1 = p.T[1];
    T2 = prRes(p.T[2]);
    sRonder = _.map(range(rond + 1), function(r) {
      return `${1 + inv[p.opps[r]]}${p.c[r][0]}${prRes(p.r[r])}`.padStart(5);
    });
    sRonder = sRonder.join('');
    nr = (1 + inv[p.id]).toString();
    if (nr.length === 1) {
      nr = ' ' + nr;
    }
    pn = p.n.padEnd(2); //20
    score = prRes(sum(p.r)).padEnd(2);
    results.push(print(`${nr} ${pn} ${sRonder}   ${score}   ${T0}  ${T1} ${T2}`));
  }
  return results;
};

calcScore = function() {
  var j, len, person, results;
  results = [];
  for (j = 0, len = persons.length; j < len; j++) {
    person = persons[j];
    results.push(person.s = parseInt(sum(person.r)));
  }
  return results;
};

setT0 = function(p, q) {
  var rond;
  if (indexOf.call(persons[p].opps, q) >= 0) {
    rond = persons[p].opps.indexOf(q);
    return persons[p].T[0] = persons[p].r[rond];
  }
};

calcT = function(rond) {
  var i, j, k, key, len, len1, p, person, q, ref, results, scores;
  // T ska beräknas först när allt är klart!
  // Beräkna T1 bara för de poänggrupper som har exakt två personer och då enbart om de har mött varandra.
  // Oklart om detta används för grupper med t ex tre personer. Låg sannolikhet att alla mött varandra.
  scores = {};
  ref = range(persons.length);
  for (j = 0, len = ref.length; j < len; j++) {
    p = ref[j];
    person = persons[p];
    key = sum(person.r);
    if (key in scores) {
      scores[key].push(p);
    } else {
      scores[key] = [p];
    }
    person.T[0] = 0;
  }
  for (key in scores) {
    if (scores[key].length === 2) {
      [p, q] = scores[key];
      setT0(p, q);
      setT0(q, p);
    }
  }
  results = [];
  for (k = 0, len1 = persons.length; k < len1; k++) {
    p = persons[k];
    p.T[1] = p.r.split("").filter((x) => {
      return x === '2';
    }).length;
    p.T[2] = 0;
    results.push((function() {
      var l, len2, ref1, results1;
      ref1 = p.opps;
      results1 = [];
      for (l = 0, len2 = ref1.length; l < len2; l++) {
        i = ref1[l];
        results1.push(p.T[2] += sum(persons[i].r)); // Buchholz: summan av motståndarnas poäng
      }
      return results1;
    })());
  }
  return results;
};

print(persons);

ref = range(R);
for (j = 0, len = ref.length; j < len; j++) {
  rond = ref[j];
  nameList = range(persons.length);
  nameList.sort(function(p) {
    return persons[p].n;
  });
  for (k = 0, len1 = persons.length; k < len1; k++) {
    p = persons[k];
    colorSum = sum(p.c);
    latest = p.c.length === 0 ? 0 : _.last(p.c);
    latest2 = p.c.length < 2 ? 0 : sum(_.slice(p.c, p.c.length - 2));
    p.mandatory = 0;
    if (colorSum <= -1 || latest2 === -2) {
      p.mandatory = 1;
    }
    if (colorSum >= 1 || latest2 === 2) {
      p.mandatory = -1;
    }
    p.colorComp = [
      colorSum,
      latest // fundera på ordningen här.
    ];
  }
  calcScore();
  temp = _.sortBy(persons, ['s']);
  ids = _.map(temp, function(person) {
    return person.id;
  });
  ids = ids.reverse();
  print({ids});
  ids = lotta(ids, []);
  if (ids.length === 0) {
    print("Denna rond kan inte lottas! (Troligen för många ronder)");
    break;
  }
  colorize(ids);
  visaNamnlista(rond, ids);
  print(temp.reverse());
  visaBordslista(rond, ids);
  ref1 = range(Math.floor(N / 2));
  for (l = 0, len2 = ref1.length; l < len2; l++) {
    i = ref1[l];
    a = ids[2 * i];
    b = ids[2 * i + 1];
    persons[a].opps.push(b);
    persons[b].opps.push(a);
    x = random();
    if (x < 0.1) {
      res = "11";
    } else if (x < 0.5) {
      res = "02";
    } else {
      res = "20";
    }
    persons[a].r += res[0];
    persons[b].r += res[1];
  }
  visaLottning(ids);
  if (rond === R - 1) {
    visaResultat(rond, ids);
  }
}

print(persons);

print(createURL());

print();

print(new Date() - start);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ucmFkLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXG1vbnJhZC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsT0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsU0FBQSxFQUFBLEtBQUEsRUFBQSxRQUFBLEVBQUEsUUFBQSxFQUFBLFNBQUEsRUFBQSxTQUFBLEVBQUEsUUFBQSxFQUFBLE1BQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLE1BQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxNQUFBLEVBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxRQUFBLEVBQUEsQ0FBQSxFQUFBLE9BQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUEsRUFBQSxLQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxjQUFBLEVBQUEsWUFBQSxFQUFBLGFBQUEsRUFBQSxZQUFBLEVBQUEsQ0FBQTtFQUFBOztBQUFBLE9BQUEsR0FBVTs7QUFDVixDQUFBLEdBQUksRUFESjs7QUFFQSxDQUFBLEdBQUksRUFGSjs7QUFJQSxJQUFBLEdBQU8sR0FKUDs7QUFLQSxNQUFBLEdBQVMsUUFBQSxDQUFBLENBQUE7U0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBTCxDQUFTLElBQUEsRUFBVCxDQUFBLEdBQWlCLENBQWpCLEdBQW1CLEdBQXBCLENBQUEsR0FBeUIsS0FBMUIsQ0FBQSxHQUFpQyxHQUFsQyxDQUFBLEdBQXVDO0FBQTFDOztBQUVULEtBQUEsR0FBUSxPQUFPLENBQUM7O0FBQ2hCLEtBQUEsR0FBUSxDQUFDLENB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QUFYLElBQWdCLEdBQUcsQ0FBQyxDQUFEO0lBQ25CLE9BQU8sQ0FBQyxDQUFELENBQUcsQ0FBQyxDQUFYLElBQWdCLEdBQUcsQ0FBQyxDQUFEO0VBVnBCO0VBWUEsWUFBQSxDQUFhLEdBQWI7RUFDQSxJQUFHLElBQUEsS0FBUSxDQUFBLEdBQUUsQ0FBYjtJQUFvQixZQUFBLENBQWEsSUFBYixFQUFrQixHQUFsQixFQUFwQjs7QUE3Q0Q7O0FBK0NBLEtBQUEsQ0FBTSxPQUFOOztBQUNBLEtBQUEsQ0FBTSxTQUFBLENBQUEsQ0FBTjs7QUFFQSxLQUFBLENBQUE7O0FBQ0EsS0FBQSxDQUFNLElBQUksSUFBSixDQUFBLENBQUEsR0FBYSxLQUFuQiIsInNvdXJjZXNDb250ZW50IjpbIkFMRkFCRVQgPSAnMDEyMzQ1Njc4OWFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVotLydcclxuTiA9IDAgIyBhbnRhbCBwZXJzb25lclxyXG5SID0gMCAjIGFudGFsIHJvbmRlclxyXG5cclxuc2VlZCA9IDEyICMgTWF0aC5yYW5kb20oKVxyXG5yYW5kb20gPSAtPiAoKChNYXRoLnNpbihzZWVkKyspLzIrMC41KSoxMDAwMCklMTAwKS8xMDBcclxuXHJcbnByaW50ID0gY29uc29sZS5sb2dcclxucmFuZ2UgPSBfLnJhbmdlXHJcbnBlcnNvbnMgPSBbXVxyXG5uYW1lTGlzdCA9IFtdXHJcblxyXG5jcmVhdGVVUkwgPSAoKSAtPlxyXG5cdHJlcyA9IFwiXCJcclxuXHRyZXMgKz0gXCI/VD1cIiArIFwiV2FzYSBTSyBLTSBibGl4dFwiXHJcblx0cmVzICs9IFwiJkQ9XCIgKyBcIjIwMjMtMTEtMjVcIlxyXG5cdHJlcyArPSBcIiZOPVwiICsgKF8ubWFwIHBlcnNvbnMsIChwZXJzb24pIC0+IHBlcnNvbi5uLnJlcGxhY2VBbGwgXCIgXCIsXCJfXCIpLmpvaW4gXCJ8XCJcclxuXHRpZiBwZXJzb25zWzBdLm9wcHMubGVuZ3RoPiAwXHJcblx0XHRyZXMgKz0gXCImTz1cIiArIChfLm1hcCBwZXJzb25zLCAocGVyc29uKSAtPiAoXy5tYXAgcGVyc29uLm9wcHMsIChvcHApIC0+IEFMRkFCRVRbb3BwXSkuam9pbiBcIlwiKS5qb2luIFwifFwiXHJcblx0XHRyZXMgKz0gXCImQz1cIiArIChfLm1hcCBwZXJzb25zLCAocGVyc29uKSAtPiBwZXJzb24uYykuam9pbiBcInxcIlxyXG5cdFx0cmVzICs9IFwiJlI9XCIgKyAoXy5tYXAgcGVyc29ucywgKHBlcnNvbikgLT4gcGVyc29uLnIpLmpvaW4gXCJ8XCJcclxuXHRyZXNcclxuXHJcbmZldGNoVVJMID0gKCkgLT5cclxuXHRyZXMgPSB7fVxyXG5cdHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMgd2luZG93LmxvY2F0aW9uLnNlYXJjaFxyXG5cdHBlcnNvbnMgPSBbXVxyXG5cdHJlcy5UID0gdXJsUGFyYW1zLmdldCAnVCdcclxuXHRyZXMuRCA9IHVybFBhcmFtcy5nZXQgJ0QnXHJcblxyXG5cdHJlcy5OID0gdXJsUGFyYW1zLmdldCgnTicpLnJlcGxhY2VBbGwoJ18nLCcgJykuc3BsaXQgJ3wnXHJcblx0TiA9IHJlcy5OLmxlbmd0aFxyXG5cclxuXHRpZiBub3QgKDQgPD0gTiA8PSA2NClcclxuXHRcdHByaW50IFwiRXJyb3I6IE51bWJlciBwbGF5ZXJzIG11c3QgYmUgYmV0d2VlbiA0IGFuZCA2NCFcIlxyXG5cdFx0cmV0dXJuXHJcblxyXG5cdGlmIHJlcy5PIGFuZCByZXMuQyBhbmQgcmVzLlJcclxuXHJcblx0XHRyZXMuTyA9IHVybFBhcmFtcy5nZXQoJ08nKS5zcGxpdCAnfCdcclxuXHRcdHJlcy5DID0gdXJsUGFyYW1zLmdldCgnQycpLnNwbGl0ICd8J1xyXG5cdFx0cmVzLlIgPSB1cmxQYXJhbXMuZ2V0KCdSJykuc3BsaXQgJ3wnXHJcblx0XHRpZiByZXMuTi5sZW5ndGggIT0gcmVzLk8ubGVuZ3RoICE9IHJlcy5DLmxlbmd0aCAhPSByZXMuUi5sZW5ndGhcclxuXHRcdFx0cHJpbnQgXCJFcnJvcjogSWxsZWdhbCBudW1iZXIgb2YgcGxheWVycyBpbiBPLCBDIG9yIFIhXCJcclxuXHRcdFx0cmV0dXJuXHJcblx0XHRSID0gcmVzLlJbMF0ubGVuZ3RoXHJcblxyXG5cdFx0cmVzLk8gPSBfLm1hcCByZXMuTywgKHIpIC0+IF8ubWFwIHIsIChjaCkgLT4gQUxGQUJFVC5pbmRleE9mIGNoXHJcblx0XHRyZXMuQyA9IF8ubWFwIHJlcy5DLCAocikgLT4gXy5tYXAgciwgKGNoKSAtPiB7QjotMSxXOjF9W2NoXVxyXG5cdFx0cmVzLlIgPSBfLm1hcCByZXMuUiwgKHIpIC0+IF8ubWFwIHIsIChjaCkgLT4gcGFyc2VJbnQgY2hcclxuXHJcblx0XHRmb3IgaSBpbiByYW5nZSBOXHJcblx0XHRcdGlmIFIgIT0gcmVzLk9baV0ubGVuZ3RoICE9IHJlcy5DW2ldLmxlbmd0aCAhPSByZXMuUltpXS5sZW5ndGhcclxuXHRcdFx0XHRwcmludCBcIkVycm9yOiBJbGxlZ2FsIG51bWJlciBvZiByb3VuZHMgZm9yIHBsYXllciAje3Jlcy5OW2ldfSFcIlxyXG5cdFx0XHRcdHJldHVyblxyXG5cdFx0XHRwZXJzb25zLnB1c2gge2lkOmksIG46IHJlcy5OW2ldLCBjOnJlcy5DW2ldLCByOnJlcy5SW2ldLCBzOjAsIG9wcHM6cmVzLk9baV0sIFQ6WzAsMCwwXSB9XHJcblxyXG5cdGVsc2VcclxuXHRcdGZvciBpIGluIHJhbmdlIE5cclxuXHRcdFx0cGVyc29ucy5wdXNoIHtpZDppLCBuOiByZXMuTltpXSwgYzonJywgcjonJywgczowLCBvcHBzOltdfVxyXG5cdFx0UiA9IE1hdGgucm91bmQgMS41ICogTWF0aC5sb2cyIE4gIyBhbnRhbCByb25kZXJcclxuXHRcdGlmIE4gPCAxMCB0aGVuIFIgPSAzXHJcblxyXG5mZWprYURhdGEgPSAoKSAtPlxyXG5cdGbDtnJuYW1uID0gJ0FCQ0RFRkdIJyAjLnNwbGl0IFwiXCJcclxuXHRlZnRlcm5hbW4gPSAnQUJDREVGR0gnICMgXy5tYXAgZsO2cm5hbW4sIChuYW1uKSAtPiBuYW1uICsgXCJzc29uXCJcclxuXHRwZXJzb25zID0gW11cclxuXHROID0gNjRcclxuXHRSID0gOVxyXG5cdGZvciBpIGluIHJhbmdlIDY0XHJcblx0XHRuYW1uID0gZsO2cm5hbW5baS8vOF0gKyBlZnRlcm5hbW5baSU4XVxyXG5cdFx0cGVyc29ucy5wdXNoIHtpZDppLCBuOiBuYW1uLCBjOicnLCByOiAnJywgczowLCBvcHBzOltdLCBUOlswLDAsMF0gfVxyXG4jZmV0Y2hVUkwoKVxyXG5mZWprYURhdGEoKVxyXG5cclxuc3RhcnQgPSBuZXcgRGF0ZSgpXHJcblxyXG5zdW0gPSAocykgLT5cclxuXHRyZXMgPSAwXHJcblx0Zm9yIGl0ZW0gaW4gc1xyXG5cdFx0cmVzICs9IHBhcnNlSW50IGl0ZW1cclxuXHRyZXNcclxuXHJcbnNwYXJhID0gKG5hbWUpIC0+XHJcblx0cGVyc29ucy5wdXNoIHtzOjAsIGlkOnBlcnNvbnMubGVuZ3RoLCBuOm5hbWUsIGM6JycsIG1hbmRhdG9yeTowLCBjb2xvckNvbXA6W10sIHI6JycsIG9wcHM6W10sIFQ6WzAsMCwwXX1cclxuI2ZvciBpIGluIHJhbmdlIDE2XHJcbiNcdHNwYXJhKGkpXHJcblxyXG5wcmludCBOICsgJyBwbGF5ZXJzICcgKyBSICsgJyByb3VuZHMnXHJcbnByaW50KClcclxuXHJcbnNjb3JlID0gIChwKSAtPiBzdW0gcGVyc29uc1twXS5yXHJcbmdldE1ldCA9IChhLGIpIC0+IGIgaW4gcGVyc29uc1thXS5vcHBzXHJcblxyXG5jb2xvcml6ZSA9IChpZHMpIC0+XHJcblx0Zm9yIGkgaW4gcmFuZ2UgaWRzLmxlbmd0aC8vMlxyXG5cdFx0cGEgPSBwZXJzb25zW2lkc1syKmldXVxyXG5cdFx0cGIgPSBwZXJzb25zW2lkc1syKmkrMV1dXHJcblx0XHRpZiBwYS5tYW5kYXRvcnlcclxuXHRcdFx0cGFjID0gaWYgcGEubWFuZGF0b3J5PT0xIHRoZW4gJ1cnICBlbHNlICdCJ1xyXG5cdFx0ZWxzZSBpZiBwYi5tYW5kYXRvcnlcclxuXHRcdFx0cGFjID0gaWYgcGEubWFuZGF0b3J5PT0xIHRoZW4gJ0InICBlbHNlICdXJ1xyXG5cdFx0ZWxzZSBcclxuXHRcdFx0aWYgcGEuY29sb3JDb21wIDwgcGIuY29sb3JDb21wIHRoZW4gcGFjID0gJ1cnIGVsc2UgcGFjID0gJ0InXHJcblx0XHRwYS5jICs9IHBhY1xyXG5cdFx0cGIuYyArPSBpZiBwYWM9PSdXJyB0aGVuICdCJyAgZWxzZSAnVydcclxuXHJcbmxvdHRhID0gKGlkcyxwYWlyaW5nPVtdKSAtPlxyXG5cdGlmIHBhaXJpbmcubGVuZ3RoID09IE4gdGhlbiByZXR1cm4gcGFpcmluZ1xyXG5cdGZvciBhIGluIGlkcyAjIGEgw6RyIGV0dCBwZXJzb25pbmRleFxyXG5cdFx0Zm9yIGIgaW4gaWRzICMgYiDDpHIgZXR0IHBlcnNvbmluZGV4XHJcblx0XHRcdGlmIGEgPT0gYiB0aGVuIGNvbnRpbnVlICMgbWFuIGthbiBpbnRlIG3DtnRhIHNpZyBzasOkbHZcclxuXHRcdFx0aWYgZ2V0TWV0IGEsYiB0aGVuIGNvbnRpbnVlICMgYSBvY2ggYiBmw6VyIGVqIGhhIG3DtnR0cyB0aWRpZ2FyZVxyXG5cdFx0XHRtYW5kYXRvcnkgPSBwZXJzb25zW2FdLm1hbmRhdG9yeSArIHBlcnNvbnNbYl0ubWFuZGF0b3J5XHJcblx0XHRcdGlmIDIgPT0gTWF0aC5hYnMgbWFuZGF0b3J5IHRoZW4gY29udGludWUgIyBTcGVsYXJuYSBrYW4gaW50ZSBoYSBzYW1tYSBmw6RyZy5cclxuXHRcdFx0bmV3aWRzID0gKGlkIGZvciBpZCBpbiBpZHMgd2hlbiBpZCBub3QgaW4gW2EsYl0pXHJcblx0XHRcdG5ld1BhaXJpbmcgPSBwYWlyaW5nLmNvbmNhdCBbYSxiXVxyXG5cdFx0XHRyZXN1bHQgPSBsb3R0YSBuZXdpZHMsbmV3UGFpcmluZ1xyXG5cdFx0XHRpZiByZXN1bHQubGVuZ3RoID09IE4gdGhlbiByZXR1cm4gcmVzdWx0XHJcblx0cmV0dXJuIFtdXHJcblxyXG52aXNhTmFtbmxpc3RhID0gKHJvbmQsaWRzKSAtPlxyXG5cdHByaW50ICc9PT0gTmFtZWxpc3QgUm91bmQnLHJvbmQrMSwnPT09J1xyXG5cdHByaW50ICdUYWJsZSBDb2xvdXIgTmFtZSdcclxuXHRpZHMgPSBpbnZlcnQgaWRzXHJcblx0Zm9yIGkgaW4gcmFuZ2UgTlxyXG5cdFx0cGVyc29uID0gcGVyc29uc1tuYW1lTGlzdFtpXV1cclxuXHRcdGJvcmQgPSAoMStpZHNbaV0vLzIpLnRvU3RyaW5nKCkucGFkU3RhcnQgMlxyXG5cdFx0cHJpbnQgXCIje2JvcmR9I3tfLmxhc3QocGVyc29uLmMpfSAje3BlcnNvbi5ufVwiXHJcblx0cHJpbnQoKVxyXG5cclxudmlzYUJvcmRzbGlzdGEgPSAocm9uZCxpZHMpIC0+XHJcblx0cHJpbnQgJz09PSBUYWJsZXMgUm91bmQnLHJvbmQrMSwnPT09J1xyXG5cdHByaW50ICcgIyBTY29yZSBXIFIgQiBTY29yZSdcclxuXHRmb3IgaSBpbiByYW5nZSBOLy8yXHJcblx0XHRhID0gcGVyc29uc1tpZHNbMippXV1cclxuXHRcdGIgPSBwZXJzb25zW2lkc1syKmkrMV1dXHJcblx0XHRwYSA9IHN1bSBhLnJcclxuXHRcdHBiID0gc3VtIGIuclxyXG5cdFx0bnIgPSAoaSsxKS50b1N0cmluZygpXHJcblx0XHRpZiBuci5sZW5ndGg9PTEgdGhlbiBuciA9ICcgJyArIG5yXHJcblx0XHRwcmludCBuciwnICcscHJSZXMocGEpLnBhZEVuZCgyKSxhLm4ucGFkRW5kKDIpLCctJyxiLm4ucGFkRW5kKDIpLCcgJyxwclJlcyhwYilcclxuXHRwcmludCgpXHJcblxyXG52aXNhTG90dG5pbmcgPSAoaWRzKSAtPlxyXG5cdHByaW50ICdMb3R0bmluZydcclxuXHRmb3IgcCBpbiBpZHNcclxuXHRcdHBlcnNvbiA9IHBlcnNvbnNbcF1cclxuXHJcbnByUmVzID0gKHNjb3JlKSAtPlxyXG5cdGlmIHNjb3JlICUgMiA9PSAxIHRoZW4gcmVtaXMgPSAnwr0nIGVsc2UgcmVtaXMgPSAnJ1xyXG5cdHNjb3JlID0gKHNjb3JlLy8yKS50b1N0cmluZygpXHJcblx0c2NvcmUgPSBzY29yZSArIHJlbWlzXHJcblx0aWYgc2NvcmUgPT0gJzDCvScgdGhlbiBzY29yZSA9ICfCvSdcclxuXHRzY29yZVxyXG5cclxuaW52ZXJ0ID0gKGFycikgLT5cclxuXHRyZXMgPSBbMCwwLDAsMCwwLDAsMCwwXVxyXG5cdGZvciBpIGluIHJhbmdlIGFyci5sZW5ndGhcclxuXHRcdHJlc1thcnJbaV1dID0gaVxyXG5cdHJldHVybiByZXNcclxuXHJcbmFudGFsID0gKHAsY29sb3IpIC0+XHJcblx0cmV0dXJuIHN1bSBbMSBmb3IgYyBpbiBwLmMgd2hlbiBjb2xvcj09Y11cclxuXHJcbnZpc2FSZXN1bHRhdCA9IChyb25kLGlkcykgLT5cclxuXHRjYWxjVCByb25kXHJcblx0Y2FsY1Njb3JlKClcclxuXHRzUm9uZGVyID0gXy5tYXAgcmFuZ2Uocm9uZCsxKSwgKGkpIC0+IFwiUiN7aSsxfVwiLnBhZFN0YXJ0IDVcclxuXHRzUm9uZGVyID0gc1JvbmRlci5qb2luICcnXHJcblxyXG5cdHRlbXAgPSBfLnNvcnRCeSBwZXJzb25zLCBbJ3MnLCAnVCddXHJcblx0aWRzID0gXy5tYXAgdGVtcCwgKHBlcnNvbikgLT4gcGVyc29uLmlkXHJcblxyXG5cdGlkcyA9IGlkcy5yZXZlcnNlKClcclxuXHRpbnYgPSBpbnZlcnQgaWRzICMgcGdhIGtvcnN0YWJlbGxcclxuXHRwcmludCAnPT09IFJlc3VsdCBhZnRlciByb3VuZCcscm9uZCsxLCc9PT0nXHJcblx0cHJpbnQgJyAjIE4nLHNSb25kZXIsICdTY29yZSBUaWUnXHJcblx0Zm9yIGkgaW4gaWRzXHJcblx0XHRwID0gcGVyc29uc1tpXVxyXG5cdFx0VDAgPSBwclJlcyBwLlRbMF1cclxuXHRcdFQxID0gcC5UWzFdXHJcblx0XHRUMiA9IHByUmVzIHAuVFsyXVxyXG5cdFx0c1JvbmRlciA9IF8ubWFwIHJhbmdlKHJvbmQrMSksIChyKSAtPiBcIiN7MStpbnZbcC5vcHBzW3JdXX0je3AuY1tyXVswXX0je3ByUmVzKHAucltyXSl9XCIucGFkU3RhcnQgNVxyXG5cdFx0c1JvbmRlciA9IHNSb25kZXIuam9pbiAnJ1xyXG5cclxuXHRcdG5yID0gKDEraW52W3AuaWRdKS50b1N0cmluZygpXHJcblx0XHRpZiBuci5sZW5ndGg9PTEgdGhlbiBuciA9ICcgJyArIG5yXHJcblx0XHRwbiA9IHAubi5wYWRFbmQgMiAjMjBcclxuXHRcdHNjb3JlID0gcHJSZXMoc3VtKHAucikpLnBhZEVuZCAyXHJcblx0XHRwcmludCBcIiN7bnJ9ICN7cG59ICN7c1JvbmRlcn0gICAje3Njb3JlfSAgICN7VDB9ICAje1QxfSAje1QyfVwiICAjLCBhbnRhbChwLDEpLCBhbnRhbChwLC0xKVwiXHJcblxyXG5jYWxjU2NvcmUgPSAoKSAtPlxyXG5cdGZvciBwZXJzb24gaW4gcGVyc29uc1xyXG5cdFx0cGVyc29uLnMgPSBwYXJzZUludCBzdW0gcGVyc29uLnJcclxuXHJcbnNldFQwID0gKHAscSkgLT5cclxuXHRpZiBxIGluIHBlcnNvbnNbcF0ub3Bwc1xyXG5cdFx0cm9uZCA9IHBlcnNvbnNbcF0ub3Bwcy5pbmRleE9mIHFcclxuXHRcdHBlcnNvbnNbcF0uVFswXSA9IHBlcnNvbnNbcF0ucltyb25kXVxyXG5cclxuY2FsY1QgPSAocm9uZCkgLT5cclxuXHQjIFQgc2thIGJlcsOka25hcyBmw7Zyc3QgbsOkciBhbGx0IMOkciBrbGFydCFcclxuXHQjIEJlcsOka25hIFQxIGJhcmEgZsO2ciBkZSBwb8OkbmdncnVwcGVyIHNvbSBoYXIgZXhha3QgdHbDpSBwZXJzb25lciBvY2ggZMOlIGVuYmFydCBvbSBkZSBoYXIgbcO2dHQgdmFyYW5kcmEuXHJcblx0IyBPa2xhcnQgb20gZGV0dGEgYW52w6RuZHMgZsO2ciBncnVwcGVyIG1lZCB0IGV4IHRyZSBwZXJzb25lci4gTMOlZyBzYW5ub2xpa2hldCBhdHQgYWxsYSBtw7Z0dCB2YXJhbmRyYS5cclxuXHRzY29yZXMgPSB7fVxyXG5cdGZvciBwIGluIHJhbmdlIHBlcnNvbnMubGVuZ3RoXHJcblx0XHRwZXJzb24gPSBwZXJzb25zW3BdXHJcblx0XHRrZXkgPSBzdW0gcGVyc29uLnJcclxuXHRcdGlmIGtleSBvZiBzY29yZXMgdGhlbiBzY29yZXNba2V5XS5wdXNoIHBcclxuXHRcdGVsc2Ugc2NvcmVzW2tleV0gPSBbcF1cclxuXHRcdHBlcnNvbi5UWzBdID0gMFxyXG5cdGZvciBrZXkgb2Ygc2NvcmVzXHJcblx0XHRpZiBzY29yZXNba2V5XS5sZW5ndGggPT0gMlxyXG5cdFx0XHRbcCxxXSA9IHNjb3Jlc1trZXldXHJcblx0XHRcdHNldFQwIHAscVxyXG5cdFx0XHRzZXRUMCBxLHBcclxuXHJcblx0Zm9yIHAgaW4gcGVyc29uc1xyXG5cdFx0cC5UWzFdID0gcC5yLnNwbGl0KFwiXCIpLmZpbHRlcigoeCkgPT4geCA9PSAnMicpLmxlbmd0aFxyXG5cdFx0cC5UWzJdID0gMFxyXG5cdFx0Zm9yIGkgaW4gcC5vcHBzXHJcblx0XHRcdHAuVFsyXSArPSBzdW0gcGVyc29uc1tpXS5yICMgQnVjaGhvbHo6IHN1bW1hbiBhdiBtb3RzdMOlbmRhcm5hcyBwb8OkbmdcclxuXHJcbnByaW50IHBlcnNvbnNcclxuXHJcbmZvciByb25kIGluIHJhbmdlIFJcclxuXHRuYW1lTGlzdCA9IHJhbmdlIHBlcnNvbnMubGVuZ3RoXHJcblx0bmFtZUxpc3Quc29ydCAocCkgLT4gcGVyc29uc1twXS5uXHJcblxyXG5cdGZvciBwIGluIHBlcnNvbnNcclxuXHRcdGNvbG9yU3VtID0gc3VtIHAuY1xyXG5cdFx0bGF0ZXN0ID0gaWYgcC5jLmxlbmd0aD09IDAgdGhlbiAwIGVsc2UgXy5sYXN0IHAuY1xyXG5cdFx0bGF0ZXN0MiA9IGlmIHAuYy5sZW5ndGggPCAyIHRoZW4gMCBlbHNlIHN1bSBfLnNsaWNlIHAuYywgcC5jLmxlbmd0aCAtIDJcclxuXHJcblx0XHRwLm1hbmRhdG9yeSA9IDBcclxuXHRcdGlmIGNvbG9yU3VtIDw9IC0xIG9yIGxhdGVzdDIgPT0gLTIgdGhlbiBwLm1hbmRhdG9yeSA9ICAxXHJcblx0XHRpZiBjb2xvclN1bSA+PSAgMSBvciBsYXRlc3QyID09ICAyIHRoZW4gcC5tYW5kYXRvcnkgPSAtMVxyXG5cdFx0cC5jb2xvckNvbXAgPSBbY29sb3JTdW0sbGF0ZXN0XSAjIGZ1bmRlcmEgcMOlIG9yZG5pbmdlbiBow6RyLlxyXG5cclxuXHRjYWxjU2NvcmUoKVxyXG5cdHRlbXAgPSBfLnNvcnRCeSBwZXJzb25zLCBbJ3MnXVxyXG5cdGlkcyA9IF8ubWFwIHRlbXAsIChwZXJzb24pIC0+IHBlcnNvbi5pZFxyXG5cdGlkcyA9IGlkcy5yZXZlcnNlKClcclxuXHJcblx0cHJpbnQoe2lkc30pXHJcblxyXG5cdGlkcyA9IGxvdHRhIGlkcyxbXVxyXG5cdGlmIGlkcy5sZW5ndGggPT0gMFxyXG5cdFx0cHJpbnQgXCJEZW5uYSByb25kIGthbiBpbnRlIGxvdHRhcyEgKFRyb2xpZ2VuIGbDtnIgbcOlbmdhIHJvbmRlcilcIlxyXG5cdFx0YnJlYWtcclxuXHJcblx0Y29sb3JpemUgaWRzXHJcblxyXG5cdHZpc2FOYW1ubGlzdGEgcm9uZCxpZHNcclxuXHRwcmludCB0ZW1wLnJldmVyc2UoKVxyXG5cdHZpc2FCb3Jkc2xpc3RhIHJvbmQsaWRzXHJcblxyXG5cdGZvciBpIGluIHJhbmdlIE4vLzJcclxuXHRcdGEgPSBpZHNbMippXVxyXG5cdFx0YiA9IGlkc1syKmkrMV1cclxuXHRcdHBlcnNvbnNbYV0ub3Bwcy5wdXNoIGJcclxuXHRcdHBlcnNvbnNbYl0ub3Bwcy5wdXNoIGFcclxuXHRcdHggPSByYW5kb20oKVxyXG5cdFx0aWYgeCA8IDAuMSB0aGVuIHJlcyA9IFwiMTFcIlxyXG5cdFx0ZWxzZSBpZiB4IDwgMC41IHRoZW4gcmVzID0gXCIwMlwiXHJcblx0XHRlbHNlIHJlcyA9IFwiMjBcIlxyXG5cdFx0cGVyc29uc1thXS5yICs9IHJlc1swXVxyXG5cdFx0cGVyc29uc1tiXS5yICs9IHJlc1sxXVxyXG5cclxuXHR2aXNhTG90dG5pbmcgaWRzXHJcblx0aWYgcm9uZCA9PSBSLTEgdGhlbiB2aXNhUmVzdWx0YXQgcm9uZCxpZHNcclxuXHJcbnByaW50IHBlcnNvbnNcclxucHJpbnQgY3JlYXRlVVJMKClcclxuXHJcbnByaW50KClcclxucHJpbnQobmV3IERhdGUoKSAtIHN0YXJ0KVxyXG4iXX0=
//# sourceURL=c:\github\2023\044-Monrad\coffee\monrad.coffee