// Generated by CoffeeScript 2.7.0
  // LOW ########################################
  // Återinför scorepoints vid GAMES == 1

// TODO #######################################
  // Inför Swiss
  // Hantera kontrollinmatning av resultat
  // Hantera frirond
  // Skriv ut URL i samband med lottning till egen fil.

// Ge perfekt felmeddelande för fel i URL-en. (EASY)
  //   Fel antal ronder i Color, Result
  //   Fel antal ELO

// Välj Monrad eller Swiss i URL-en (LOW)
  // Parkera spelare

// localStorage (i princip urlen)
  // Hastighetsjämförelser (javafo, swiss-manager, min kod, monrad, swiss)

// Testa på Mac. (klippbordet)

// DONE #########################################
  // Alfabetisk Namnlista? Namn Bord Färg
  // Print bordslista
  // Hantera 1 till 8 partier per team/person GAMES=1 (default)

// NOT TODO #####################################
  // Repetition av piltangenter (NIX, går för fort)
  // Två kolumner vid många spelare
  // Backa en eller flera ronder? (Kan göras mha sparade URL:er)
  // Ange färg för första bordet i URL-en (EASY) FIRST=WHITE, FIRST=BLACK (default)
var ASCII, DY, FIRST, GAMES, HELP, N, ROUND, ROUNDS, TOUR, adjustForColors, antal, assert, calcScore, calcT, colorize, copyToClipboard, createURL, currentTable, datum, downloadFile, fetchURL, getMet, invert, lightbulb, lotta, makeTableFile, message, mw, myRound, pair, pairings, persons, prBoth, prRes, print, range, resultat, scorex, setT0, showHeader, showHelp, showResult, showTables, showType, state, sum, sumBW, title, txt, txtT, url, xdraw,
  indexOf = [].indexOf,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

HELP = `How to use the Schwisch Chess Tournament Program:
	Enter = Switch between Tables and Result
	Home = Select First Table
	Up   = Select Previous Table
	Down = Select Next Table
	End  = Select Last Table
	0 = Enter a Loss for White Player
	space = Enter a Draw
	1 = Enter a Win for White Player
	P = Perform Pairing
	S = Make text smaller
	L = Make text larger
	? = Show this Help Page
	H = Show Help for constructing the URL`.split('\n');

ASCII = '0123456789abcdefg';

N = 0; // number of players

ROUNDS = 0; // number of rounds

DY = 75; // vertical line distance

DY = 40; // vertical line distance

TOUR = '';

GAMES = 1;

FIRST = 'black';

print = console.log;

range = _.range;

title = '';

datum = '';

currentTable = 0;

persons = []; // stabil, sorterad på id

pairings = []; // varierar med varje rond

state = 0; // 0=Tables 1=Result 2=Help

ROUND = 1;

resultat = []; // 012 sorterad på id

antal = 0;

showType = function(a) {
  if (typeof a === 'string') {
    return `'${a}'`;
  } else {
    return a;
  }
};

assert = function(a, b) {
  if (!_.isEqual(a, b)) {
    return print(`Assert failure: ${showType(a)} != ${showType(b)}`);
  }
};

message = ''; //This is a tutorial tournament. Use it or edit the URL'

myRound = function(x, decs) {
  var s;
  s = (_.round(x, decs)).toString();
  if (indexOf.call(s, '.') < 0) {
    s += '.0';
  }
  return s;
};

assert("2.0", myRound(1.99, 1));

assert("0.6", myRound(0.6, 1));

fetchURL = function(url = location.search) {
  var R, i, j, len, ref, ref1, ref2, ref3, ref4, ref5, res, urlParams;
  res = {};
  urlParams = new URLSearchParams(url);
  persons = [];
  TOUR = urlParams.get('TOUR').replace('_', ' ');
  datum = urlParams.get('DATE') || "";
  ROUNDS = parseInt(urlParams.get('ROUNDS'));
  ROUND = parseInt(urlParams.get('ROUND'));
  res.NAME = urlParams.get('NAME').replaceAll('_', ' ').split('|');
  res.ELO = urlParams.get('ELO').split('|');
  res.ELO = _.map(res.ELO, function(r) {
    return parseInt(r);
  });
  N = res.NAME.length;
  if (N < 4) {
    print("Error: Number of players must be 4 or more!");
    return;
  }
  if (N > 64) {
    print("Error: Number of players must be 64 or less!");
    return;
  }
  GAMES = urlParams.get('GAMES') ? parseInt(urlParams.get('GAMES')) : 1;
  FIRST = urlParams.get('FIRST') ? urlParams.get('FIRST') : 'black';
  print({GAMES, FIRST});
  if (ROUND > 0) {
    res.OPP = urlParams.get('OPP').split('|');
    res.COL = urlParams.get('COL').split('|');
    res.RES = urlParams.get('RES').split('|');
    if ((((res.NAME.length !== (ref2 = res.OPP.length) && ref2 !== (ref1 = res.COL.length)) && ref1 !== (ref = res.RES.length)) && ref !== res.ELO.length)) {
      print("Error: Illegal number of players in OPP, COL, ELO or RES!");
      return;
    }
    R = res.RES[0].length;
    res.OPP = _.map(res.OPP, function(r) {
      return _.map(r.split(',')); //, (ch) -> ALFABET.indexOf ch
    });
    res.COL = _.map(res.COL, function(r) {
      return _.map(r, function(ch) {
        return {
          B: -1,
          W: 1
        }[ch];
      });
    });
    res.RES = _.map(res.RES, function(r) {
      return _.map(r, function(ch) {
        return parseInt(ch);
      });
    });
    ref3 = range(N);
    for (j = 0, len = ref3.length; j < len; j++) {
      i = ref3[j];
      if (((R !== (ref5 = res.OPP[i].length) && ref5 !== (ref4 = res.COL[i].length)) && ref4 !== res.RES[i].length)) {
        print(`Error: Illegal number of rounds for player ${res.NAME[i]}!`);
        return;
      }
      persons.push({
        id: i,
        name: res.NAME[i],
        col: res.COL[i],
        res: res.RES[i],
        bal: 0,
        opp: res.OPP[i],
        T: [0, 0, 0],
        elo: res.ELO[i]
      });
    }
    calcScore();
  } else {
    if (N % 2 === 1) {
      res.NAME.push('-frirond-');
      N += 1;
    }
    persons = _.map(range(N), function(i) {
      return {
        id: i,
        name: res.NAME[i],
        elo: res.ELO[i],
        col: '',
        res: '',
        bal: 0,
        opp: [],
        T: []
      };
    });
  }
  return print(persons);
};

copyToClipboard = function(text) {
  var textarea;
  if (!navigator.clipboard) {
    textarea = document.createElement('textarea');
    textarea.value = text;
    document.boF.appendChild(textarea);
    textarea.select();
    document.execCommand('copy');
    document.boF.removeChild(textarea);
    return message = 'Urlen har kopierats till klippbordet 1';
  } else {
    return navigator.clipboard.writeText(text).then(() => {
      return message = 'Urlen har kopierats till klippbordet 2';
    }).catch((err) => {
      return message('Kopiering till klippbordet misslyckades');
    });
  }
};

createURL = function() {
  var res;
  res = [];
  //res.push "https://christernilsson.github.io/2023/044-Monrad"
  res.push("http://127.0.0.1:5500");
  res.push("?TOUR=" + TOUR);
  res.push("&DATE=" + "2023-11-25");
  res.push("&ROUNDS=" + ROUNDS);
  res.push("&ROUND=" + ROUND);
  res.push("&NAME=" + (_.map(persons, function(person) {
    return person.name.replaceAll(" ", "_");
  })).join("|"));
  res.push("&ELO=" + (_.map(persons, function(person) {
    return person.elo;
  })).join("|"));
  //if persons[0].opp.length> 0
  res.push("&OPP=" + (_.map(persons, function(person) {
    return (_.map(person.opp, function(opp) {
      return str(opp);
    })).join(",");
  })).join("|"));
  res.push("&COL=" + (_.map(persons, function(person) {
    return person.col;
  })).join("|"));
  res.push("&RES=" + (_.map(persons, function(person) {
    return person.res;
  })).join("|"));
  return res.join('\n');
};

sum = function(s) {
  var item, j, len, res;
  res = 0;
  for (j = 0, len = s.length; j < len; j++) {
    item = s[j];
    res += parseInt(item);
  }
  return res;
};

assert(6, sum('012012'));

sumBW = function(s) {
  var item, j, len, res;
  res = 0;
  for (j = 0, len = s.length; j < len; j++) {
    item = s[j];
    res += item === 'B' ? -1 : 1;
  }
  return res;
};

assert(0, sumBW(''));

assert(0, sumBW('BWBWWB'));

assert(-6, sumBW('BBBBBB'));

assert(6, sumBW('WWWWWW'));

scorex = function(res) {
  var i, index, j, len, ref, result;
  result = 0;
  ref = range(ROUND);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    index = ASCII.indexOf(res[i]);
    if (index >= 0) {
      result += parseInt(index);
    }
  }
  return result / 2;
};

// print('scorex',round,res,result)
getMet = function(a, b) {
  var ref;
  return ref = b.id, indexOf.call(persons[a.id].opp, ref) >= 0;
};

colorize = function(persons) {
  var i, j, len, pa, pac, pb, pbc, ref, results;
  ref = range(Math.floor(persons.length / 2));
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    pa = persons[2 * i];
    pb = persons[2 * i + 1];
    pac = 'B W'[pa.mandatory + 1];
    pbc = 'B W'[pb.mandatory + 1];
    if (pac === pbc) {
      if (pa.colorComp <= pb.colorComp) {
        pac = 'W';
      } else {
        pac = 'B';
      }
    }
    pa.col += pac;
    results.push(pb.col += pac === 'W' ? 'B' : 'W');
  }
  return results;
};

pair = function(persons, pairing = []) {
  var a, b, j, len, mandatory, newPairing, newPersons, p, result;
  if (pairing.length === N) {
    return pairing;
  }
  antal += 1;
  a = persons[0];
  for (j = 0, len = persons.length; j < len; j++) {
    b = persons[j];
    if (a === b) {
      continue; // you cannot meet yourself
    }
    if (getMet(a, b)) {
      continue; // a and b must not have met before
    }
    mandatory = a.mandatory + b.mandatory;
    if (2 === Math.abs(mandatory)) {
      continue; // Players can not have the same color
    }
    newPersons = (function() {
      var k, len1, results;
      results = [];
      for (k = 0, len1 = persons.length; k < len1; k++) {
        p = persons[k];
        if (p !== a && p !== b) {
          results.push(p);
        }
      }
      return results;
    })();
    newPairing = pairing.concat([a, b]);
    result = pair(newPersons, newPairing);
    if (result.length === N) {
      return result;
    }
  }
  return [];
};

adjustForColors = function(pairings) {
  var i, j, len, ref, res;
  res = [];
  ref = range(Math.floor(N / 2));
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    if (pairings[2 * i].col.length === 0 || 'W' === _.last(pairings[2 * i].col)) {
      res.push(pairings[2 * i]);
      res.push(pairings[2 * i + 1]);
    } else {
      res.push(pairings[2 * i + 1]);
      res.push(pairings[2 * i]);
    }
  }
  return res;
};

downloadFile = function(txt, filename) {
  var a, blob, url;
  blob = new Blob([txt], {
    type: 'text/plain'
  });
  url = URL.createObjectURL(blob);
  a = document.createElement('a');
  a.href = url;
  a.download = filename;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  return URL.revokeObjectURL(url);
};

makeTableFile = function(header) {
  var a, b, i, j, k, len, len1, p, players, ref, res;
  res = [];
  players = (function() {
    var j, len, ref, results;
    ref = range(N);
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      results.push([pairings[i], i]);
    }
    return results;
  })();
  players = _.sortBy(players, function(p) {
    return p[0].name;
  });
  players = (function() {
    var j, len, results;
    results = [];
    for (j = 0, len = players.length; j < len; j++) {
      [p, i] = players[j];
      results.push(`${_.pad((1 + Math.floor(i / 2)).toString() + 'WB'[i % 2], 5)} ${p.name}`);
    }
    return results;
  })();
  res.push("NAMES" + header);
  res.push("");
  res.push("Table Name");
  for (j = 0, len = players.length; j < len; j++) {
    p = players[j];
    res.push(p);
  }
  res.push("\f");
  res.push("TABLES" + header);
  res.push("");
  res.push("Table White".padEnd(6 + 25) + _.pad("", 20) + 'Black'.padEnd(25));
  ref = range(Math.floor(N / 2));
  for (k = 0, len1 = ref.length; k < len1; k++) {
    i = ref[k];
    a = pairings[2 * i];
    b = pairings[2 * i + 1];
    res.push("");
    res.push(_.pad(i + 1, 6) + a.name.padEnd(25) + _.pad("|____| - |____|", 20) + b.name.padEnd(25));
  }
  return res.join("\n");
};

lotta = function() {
  var a, b, colorSum, i, j, k, l, latest, latest2, len, len1, len2, p, ref, start, timestamp;
  print('Lottning av rond ', ROUND);
  print(persons);
  for (j = 0, len = persons.length; j < len; j++) {
    p = persons[j];
    if (p.res.length !== p.col.length) {
      return;
    }
  }
  print('genomförs!');
  for (k = 0, len1 = persons.length; k < len1; k++) {
    p = persons[k];
    colorSum = sumBW(p.col);
    latest = p.col.length === 0 ? '' : _.last(p.col);
    latest2 = p.col.length < 2 ? '' : sumBW(_.slice(p.col, p.col.length - 2));
    p.mandatory = 0;
    if (colorSum <= -1 || latest2 === -2) {
      p.mandatory = 1;
    }
    if (colorSum >= 1 || latest2 === 2) {
      p.mandatory = -1;
    }
    p.colorComp = [
      colorSum,
      latest // fundera på ordningen här.
    ];
  }
  calcScore();
  if (ROUND === 0) {
    pairings = persons;
    print('pairings', pairings);
    ROUND = 1;
  } else {
    ROUND += 1;
    pairings = _.sortBy(persons, ['score']);
    pairings = pairings.reverse();
    start = new Date();
    antal = 0;
    pairings = pair(pairings);
    print('pairings', pairings);
    print(ROUND, `${antal} ${new Date() - start} milliseconds`);
  }
  colorize(pairings);
  pairings = adjustForColors(pairings);
  ref = range(Math.floor(N / 2));
  for (l = 0, len2 = ref.length; l < len2; l++) {
    i = ref[l];
    a = pairings[2 * i];
    b = pairings[2 * i + 1];
    a.opp.push(b.id);
    b.opp.push(a.id);
  }
  state = 0;
  timestamp = new Date().toLocaleString('se-SE');
  downloadFile(makeTableFile(" for " + TOUR + ` in Round ${ROUND}    ${timestamp}`), TOUR + ` Round ${ROUND}.txt`);
  downloadFile(createURL(), "URL for " + TOUR + ` Round ${ROUND}.txt`);
  return print({'pairings after pairing': 'pairings after pairing', pairings});
};

// Beror på GAMES som varierar mellan 1 och 8
prBoth = function(score) {
  var a, ax, b, bx;
  a = ASCII.indexOf(score);
  b = 2 * GAMES - a;
  ax = prRes(score);
  bx = prRes(ASCII[b]);
  if (ax.length === 1) {
    ax = ' ' + ax;
  }
  if (bx.length === 1) {
    bx = bx + ' ';
  }
  return ax + ' - ' + bx;
};

prRes = function(score) {
  var a, b;
  score = ASCII.indexOf(score);
  a = `${Math.floor(score / 2)}`;
  if (a === "0") {
    a = "";
  }
  b = score % 2 === 1 ? '½' : '';
  if (a + b === "") {
    return '0';
  }
  return a + b;
};

assert('0', prRes('0'));

assert('½', prRes('1'));

assert('1', prRes('2'));

assert('1½', prRes('3'));

assert('4', prRes('8'));

assert('5', prRes('a'));

assert('5½', prRes('b'));

invert = function(arr) {
  var i, j, len, ref, res;
  res = [];
  ref = range(arr.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    res[arr[i]] = i;
  }
  return res;
};

assert([0, 1, 2, 3], invert([0, 1, 2, 3]));

assert([3, 2, 0, 1], invert([2, 3, 1, 0]));

calcScore = function() {
  var j, len, person;
  for (j = 0, len = persons.length; j < len; j++) {
    person = persons[j];
    person.score = scorex(person.res);
  }
  return print('calcScore', persons);
};

setT0 = function(p, q) {
  var r;
  if (indexOf.call(persons[p].opp, q) >= 0) {
    r = persons[p].opp.indexOf(q);
    return persons[p].T[0] = persons[p].res[r];
  }
};

calcT = function() {
  var i, j, k, key, len, len1, p, person, q, ref, results, scores;
  // T ska beräknas först när allt är klart!
  // Beräkna T1 bara för de poänggrupper som har exakt två personer och då enbart om de har mött varandra.
  // Oklart om detta används för grupper med t ex tre personer. Låg sannolikhet att alla mött varandra.
  scores = {};
  ref = range(persons.length);
  for (j = 0, len = ref.length; j < len; j++) {
    p = ref[j];
    person = persons[p];
    key = sum(person.res);
    if (key in scores) {
      scores[key].push(p);
    } else {
      scores[key] = [p];
    }
    person.T[0] = 0;
  }
  for (key in scores) {
    if (scores[key].length === 2) {
      [p, q] = scores[key];
      setT0(p, q);
      setT0(q, p);
    }
  }
  results = [];
  for (k = 0, len1 = persons.length; k < len1; k++) {
    p = persons[k];
    p.T[1] = p.res.split("").filter((x) => {
      return x === '2';
    }).length;
    p.T[2] = 0;
    results.push((function() {
      var l, len2, ref1, results1;
      ref1 = p.opp;
      results1 = [];
      for (l = 0, len2 = ref1.length; l < len2; l++) {
        i = ref1[l];
        results1.push(p.T[2] += sum(persons[i].res)); // Buchholz: the sum of opposition scores
      }
      return results1;
    })());
  }
  return results;
};

mw = function(x) {
  return x / 1000 * width;
};

//########## GUI ############
txtT = function(value, w, align = window.CENTER) {
  var diff, lt, res, rt;
  if (value.length > w) {
    value = value.substring(0, w);
  }
  if (align === window.LEFT) {
    res = value + _.repeat(' ', w - value.length);
  }
  if (align === window.RIGHT) {
    res = _.repeat(' ', w - value.length) + value;
  }
  if (align === window.CENTER) {
    diff = w - value.length;
    lt = _.repeat(' ', Math.floor((1 + diff) / 2));
    rt = _.repeat(' ', Math.floor(diff / 2));
    res = lt + value + rt;
  }
  return res;
};

assert("   Sven   ", txtT("Sven", 10));

showHeader = function(header) {
  var s, y;
  y = DY / 2;
  textAlign(LEFT, CENTER);
  s = '';
  s += txtT(`${title} ${datum}`, 30, window.LEFT);
  s += ' ' + txtT(header, 22, window.CENTER);
  s += ' ' + txtT('Round ' + ROUND, 30, window.RIGHT);
  fill('black');
  return text(s, 10, y);
};

txt = function(value, x, y, align = null, color = null) {
  if (align) {
    textAlign(align, CENTER);
  }
  if (color) {
    fill(color);
  }
  return text(value, x, y);
};

showTables = function() {
  var a, b, both, i, j, len, nr, pa, pb, ref, results, s, y;
  showHeader('Tables');
  y = 1.5 * DY;
  s = "";
  s += txtT('#', 2, window.RIGHT);
  s += ' ' + txtT('Score', 5, window.RIGHT);
  s += ' ' + txtT('Elo', 4, window.LEFT);
  s += ' ' + txtT('White', 25, window.LEFT);
  s += ' ' + txtT('Result', 7, window.CENTER);
  s += ' ' + txtT('Black', 25, window.LEFT);
  s += ' ' + txtT('Elo', 4, window.LEFT);
  s += ' ' + txtT('Score', 5, window.RIGHT);
  fill('black');
  textAlign(window.LEFT);
  text(s, 10, y);
  ref = range(Math.floor(N / 2));
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    y += DY * 0.5;
    a = pairings[2 * i];
    b = pairings[2 * i + 1];
    // pa = myRound scorex(a.res), 1
    // pb = myRound scorex(b.res), 1
    pa = myRound(a.score, 1);
    pb = myRound(b.score, 1);
    both = a.res.length === a.col.length ? prBoth(_.last(a.res)) : "   -   ";
    nr = i + 1;
    s = "";
    s += txtT(nr.toString(), 2, window.RIGHT);
    s += ' ' + txtT(pa, 5);
    s += ' ' + txtT(a.elo, 4);
    s += ' ' + txtT(a.name, 25, window.LEFT);
    s += ' ' + txtT(both, 7, window.CENTER);
    s += ' ' + txtT(b.name, 25, window.LEFT);
    s += ' ' + txtT(b.elo, 4);
    s += ' ' + txtT(pb, 5, window.CENTER);
    fill(currentTable === i ? 'yellow' : 'black');
    results.push(text(s, 10, y));
  }
  return results;
};

lightbulb = function(color, x, y, result, opponent) {
  var strokeWeight;
  push();
  print('lightbulb', result);
  fill('red gray green'.split(' ')[result]);
  rectMode(CENTER);
  rect(x, y, 0.8 * DY, 0.45 * DY);
  fill({
    B: 'black',
    W: 'white'
  }[color]);
  noStroke();
  strokeWeight = 0;
  txt(1 + opponent, x, y + 1, CENTER);
  return pop();
};

showResult = function() {
  var i, inv, j, len, p, person, r, results, rheader, s, score, temp, x, y;
  showHeader('Result');
  if (pairings.length === 0) {
    txt("This ROUND can't be paired! (Too many rounds)", width / 2, height / 2, CENTER);
    return;
  }
  noStroke();
  calcT();
  // calcScore()
  temp = _.sortBy(persons, ['score', 'T']);
  temp = temp.reverse();
  inv = (function() {
    var j, len, results;
    results = [];
    for (j = 0, len = temp.length; j < len; j++) {
      p = temp[j];
      results.push(p.id);
    }
    return results;
  })();
  inv = invert(inv);
  y = 1.5 * DY;
  textAlign(LEFT);
  rheader = _.map(range(1, ROUNDS + 1), function(i) {
    return `${i % 10} `;
  });
  rheader = rheader.join(' ');
  s = "";
  s += txtT("#", 2);
  s += ' ' + txtT("Elo", 4, window.LEFT);
  s += ' ' + txtT("Name", 25, window.LEFT);
  s += ' ' + txtT(rheader, 3 * ROUNDS, window.LEFT);
  s += ' ' + txtT("Score", 5, window.RIGHT);
  s += ' ' + txtT("D", 2, window.CENTER);
  s += ' ' + txtT("W", 1, window.CENTER);
  s += ' ' + txtT("B", 2, window.CENTER);
  text(s, 10, y);
  fill('white');

  //textSize DY * 0.5
  results = [];
  for (i = j = 0, len = temp.length; j < len; i = ++j) {
    person = temp[i];
    y += DY * 0.5;
    s = "";
    s += txtT((1 + i).toString(), 2, window.RIGHT);
    s += ' ' + txtT(person.elo, 4, window.LEFT);
    s += ' ' + txtT(person.name, 25, window.LEFT);
    s += ' ' + txtT('', 3 * ROUNDS, window.CENTER);
    score = person.score; // scorex person.res
    score = myRound(score, 1);
    s += ' ' + txtT(score, 5, window.RIGHT);
    s += ' ' + txtT(prRes(person.T[0]), 2, window.CENTER);
    s += ' ' + txtT(person.T[1], 2, window.CENTER);
    s += ' ' + txtT(prRes(person.T[2]), 2, window.CENTER);
    text(s, 10, y);
    results.push((function() {
      var k, len1, ref, results1;
      ref = range(ROUND - 1);
      //print('round',round)
      results1 = [];
      for (k = 0, len1 = ref.length; k < len1; k++) {
        r = ref[k];
        x = DY * (10.5 + 0.9 * r);
        print(r, person.col[r][0], x, y, person.res[r], inv[person.opp[r]]);
        results1.push(lightbulb(person.col[r][0], x, y, person.res[r], inv[person.opp[r]]));
      }
      return results1;
    })());
  }
  return results;
};

if (location.search === '') {
  title = 'Tutorial Tournament';
  datum = new Date();
  datum = datum.toISOString().split('T')[0];
  url = `?T=${title.replace(" ", "_")}&NAME=ANDERSSON_Anders|BENGTSSON_Bertil|CARLSEN_Christer|DANIELSSON_Daniel|ERIKSSON_Erik|FRANSSON_Ferdinand|GREIDER_Göran|HARALDSSON_Helge`;
  location.href = url;
} else {
  fetchURL();
  pairings = persons;
}

showHelp = function() {
  var i, j, len, ref, results;
  textAlign(LEFT);
  ref = range(HELP.length);
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    results.push(text(HELP[i], 100, 50 + 50 * i));
  }
  return results;
};

window.windowResized = function() {
  resizeCanvas(windowWidth - 4, windowHeight - 4);
  return xdraw();
};

window.setup = function() {
  createCanvas(windowWidth - 4, windowHeight - 4);
  textFont('Courier New');
  textAlign(CENTER, CENTER);
  lotta();
  state = 0;
  return xdraw();
};

xdraw = function() {
  background('gray');
  textSize(DY * 0.5);
  if (state === 0) {
    showTables();
  }
  if (state === 1) {
    showResult();
  }
  if (state === 2) {
    return showHelp();
  }
};

window.keyPressed = function() {
  var a, b, index;
  if (key === 'Home') {
    currentTable = 0;
  }
  if (key === 'ArrowUp') {
    currentTable = modulo(currentTable - 1, Math.floor(N / 2));
  }
  if (key === 'ArrowDown') {
    currentTable = modulo(currentTable + 1, Math.floor(N / 2));
  }
  if (key === 'End') {
    currentTable = (Math.floor(N / 2)) - 1;
  }
  index = 2 * currentTable;
  a = pairings[index];
  b = pairings[index + 1];
  if (indexOf.call('0 1q2w3e4r5t6y7u8', key) >= 0) {
    index = '0 1q2w3e4r5t6y7u8'.indexOf(key);
    if (index <= 2 * GAMES) {
      if (a.res.length < a.col.length) {
        a.res += ASCII[index];
      }
      if (b.res.length < b.col.length) {
        b.res += ASCII[2 * GAMES - index];
      }
      currentTable = modulo(currentTable + 1, Math.floor(N / 2));
    }
  }
  if (key === 'Enter') {
    state = 1 - state;
    if (state === 1) {
      calcT();
    }
  }
  //calcScore()
  //temp = _.sortBy persons, ['score', 'T']
  //temp = temp.reverse()
  //print temp
  if (indexOf.call('pP', key) >= 0) {
    lotta();
  }
  if (indexOf.call('lL', key) >= 0) {
    DY += 1;
  }
  if (indexOf.call('sS', key) >= 0) {
    DY -= 1;
  }
  return xdraw();
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ucmFkLmpzIiwic291cmNlUm9vdCI6Ii4uXFwiLCJzb3VyY2VzIjpbImNvZmZlZVxcbW9ucmFkLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBOEJnRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUEsS0FBQSxFQUFBLEVBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLElBQUEsRUFBQSxDQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUEsRUFBQSxJQUFBLEVBQUEsZUFBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLEVBQUEsU0FBQSxFQUFBLEtBQUEsRUFBQSxRQUFBLEVBQUEsZUFBQSxFQUFBLFNBQUEsRUFBQSxZQUFBLEVBQUEsS0FBQSxFQUFBLFlBQUEsRUFBQSxRQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxTQUFBLEVBQUEsS0FBQSxFQUFBLGFBQUEsRUFBQSxPQUFBLEVBQUEsRUFBQSxFQUFBLE9BQUEsRUFBQSxJQUFBLEVBQUEsUUFBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsUUFBQSxFQUFBLE1BQUEsRUFBQSxLQUFBLEVBQUEsVUFBQSxFQUFBLFFBQUEsRUFBQSxVQUFBLEVBQUEsVUFBQSxFQUFBLFFBQUEsRUFBQSxLQUFBLEVBQUEsR0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsS0FBQTtFQUFBOzs7QUFFaEYsSUFBQSxHQUFPLENBQUE7Ozs7Ozs7Ozs7Ozs7dUNBQUEsQ0FlSixDQUFDLEtBZkcsQ0FlRyxJQWZIOztBQWlCUCxLQUFBLEdBQVE7O0FBRVIsQ0FBQSxHQUFJLEVBckI0RTs7QUFzQmhGLE1BQUEsR0FBUyxFQXRCdUU7O0FBdUJoRixFQUFBLEdBQUssR0F2QjJFOztBQXdCaEYsRUFBQSxHQUFLLEdBeEIyRTs7QUEwQmhGLElBQUEsR0FBTzs7QUFDUCxLQUFBLEdBQVE7O0FBQ1Is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QUFDLENBQUMsR0FBRyxDQUFDLE1BQXhCO1FBQW9DLENBQUMsQ0FBQyxHQUFGLElBQVMsS0FBSyxDQUFDLEtBQUQsRUFBbEQ7O01BQ0EsSUFBRyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU4sR0FBZSxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQXhCO1FBQW9DLENBQUMsQ0FBQyxHQUFGLElBQVMsS0FBSyxDQUFDLENBQUEsR0FBRSxLQUFGLEdBQVUsS0FBWCxFQUFsRDs7TUFDQSxZQUFBLFVBQWdCLFlBQUEsR0FBZSxjQUFPLElBQUcsSUFIMUM7S0FGRDs7RUFNQSxJQUFHLEdBQUEsS0FBTyxPQUFWO0lBQ0MsS0FBQSxHQUFRLENBQUEsR0FBSTtJQUNaLElBQUcsS0FBQSxLQUFTLENBQVo7TUFDQyxLQUFBLENBQUEsRUFERDtLQUZEO0dBYkQ7Ozs7O0VBcUJDLGlCQUFVLE1BQVAsU0FBSDtJQUFvQixLQUFBLENBQUEsRUFBcEI7O0VBQ0EsaUJBQVUsTUFBUCxTQUFIO0lBQW9CLEVBQUEsSUFBTSxFQUExQjs7RUFDQSxpQkFBVSxNQUFQLFNBQUg7SUFBb0IsRUFBQSxJQUFNLEVBQTFCOztTQUNBLEtBQUEsQ0FBQTtBQXpCbUIiLCJzb3VyY2VzQ29udGVudCI6WyIjIExPVyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcbiMgw4V0ZXJpbmbDtnIgc2NvcmVwb2ludHMgdmlkIEdBTUVTID09IDFcclxuXHJcbiMgVE9ETyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuIyBJbmbDtnIgU3dpc3NcclxuIyBIYW50ZXJhIGtvbnRyb2xsaW5tYXRuaW5nIGF2IHJlc3VsdGF0XHJcbiMgSGFudGVyYSBmcmlyb25kXHJcbiMgU2tyaXYgdXQgVVJMIGkgc2FtYmFuZCBtZWQgbG90dG5pbmcgdGlsbCBlZ2VuIGZpbC5cclxuXHJcbiMgR2UgcGVyZmVrdCBmZWxtZWRkZWxhbmRlIGbDtnIgZmVsIGkgVVJMLWVuLiAoRUFTWSlcclxuIyAgIEZlbCBhbnRhbCByb25kZXIgaSBDb2xvciwgUmVzdWx0XHJcbiMgICBGZWwgYW50YWwgRUxPXHJcblxyXG4jIFbDpGxqIE1vbnJhZCBlbGxlciBTd2lzcyBpIFVSTC1lbiAoTE9XKVxyXG4jIFBhcmtlcmEgc3BlbGFyZVxyXG5cclxuIyBsb2NhbFN0b3JhZ2UgKGkgcHJpbmNpcCB1cmxlbilcclxuIyBIYXN0aWdoZXRzasOkbWbDtnJlbHNlciAoamF2YWZvLCBzd2lzcy1tYW5hZ2VyLCBtaW4ga29kLCBtb25yYWQsIHN3aXNzKVxyXG5cclxuIyBUZXN0YSBww6UgTWFjLiAoa2xpcHBib3JkZXQpXHJcblxyXG4jIERPTkUgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuIyBBbGZhYmV0aXNrIE5hbW5saXN0YT8gTmFtbiBCb3JkIEbDpHJnXHJcbiMgUHJpbnQgYm9yZHNsaXN0YVxyXG4jIEhhbnRlcmEgMSB0aWxsIDggcGFydGllciBwZXIgdGVhbS9wZXJzb24gR0FNRVM9MSAoZGVmYXVsdClcclxuXHJcbiMgTk9UIFRPRE8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG4jIFJlcGV0aXRpb24gYXYgcGlsdGFuZ2VudGVyIChOSVgsIGfDpXIgZsO2ciBmb3J0KVxyXG4jIFR2w6Uga29sdW1uZXIgdmlkIG3DpW5nYSBzcGVsYXJlXHJcbiMgQmFja2EgZW4gZWxsZXIgZmxlcmEgcm9uZGVyPyAoS2FuIGfDtnJhcyBtaGEgc3BhcmFkZSBVUkw6ZXIpXHJcbiMgQW5nZSBmw6RyZyBmw7ZyIGbDtnJzdGEgYm9yZGV0IGkgVVJMLWVuIChFQVNZKSBGSVJTVD1XSElURSwgRklSU1Q9QkxBQ0sgKGRlZmF1bHQpXHJcblxyXG5IRUxQID0gXCJcIlwiXHJcbkhvdyB0byB1c2UgdGhlIFNjaHdpc2NoIENoZXNzIFRvdXJuYW1lbnQgUHJvZ3JhbTpcclxuXHRFbnRlciA9IFN3aXRjaCBiZXR3ZWVuIFRhYmxlcyBhbmQgUmVzdWx0XHJcblx0SG9tZSA9IFNlbGVjdCBGaXJzdCBUYWJsZVxyXG5cdFVwICAgPSBTZWxlY3QgUHJldmlvdXMgVGFibGVcclxuXHREb3duID0gU2VsZWN0IE5leHQgVGFibGVcclxuXHRFbmQgID0gU2VsZWN0IExhc3QgVGFibGVcclxuXHQwID0gRW50ZXIgYSBMb3NzIGZvciBXaGl0ZSBQbGF5ZXJcclxuXHRzcGFjZSA9IEVudGVyIGEgRHJhd1xyXG5cdDEgPSBFbnRlciBhIFdpbiBmb3IgV2hpdGUgUGxheWVyXHJcblx0UCA9IFBlcmZvcm0gUGFpcmluZ1xyXG5cdFMgPSBNYWtlIHRleHQgc21hbGxlclxyXG5cdEwgPSBNYWtlIHRleHQgbGFyZ2VyXHJcblx0PyA9IFNob3cgdGhpcyBIZWxwIFBhZ2VcclxuXHRIID0gU2hvdyBIZWxwIGZvciBjb25zdHJ1Y3RpbmcgdGhlIFVSTFxyXG5cIlwiXCIuc3BsaXQgJ1xcbidcclxuXHJcbkFTQ0lJID0gJzAxMjM0NTY3ODlhYmNkZWZnJ1xyXG5cclxuTiA9IDAgIyBudW1iZXIgb2YgcGxheWVyc1xyXG5ST1VORFMgPSAwICMgbnVtYmVyIG9mIHJvdW5kc1xyXG5EWSA9IDc1ICMgdmVydGljYWwgbGluZSBkaXN0YW5jZVxyXG5EWSA9IDQwICMgdmVydGljYWwgbGluZSBkaXN0YW5jZVxyXG5cclxuVE9VUiA9ICcnXHJcbkdBTUVTID0gMVxyXG5GSVJTVCA9ICdibGFjaydcclxuXHJcbnByaW50ID0gY29uc29sZS5sb2dcclxucmFuZ2UgPSBfLnJhbmdlXHJcbnRpdGxlID0gJydcclxuZGF0dW0gPSAnJ1xyXG5jdXJyZW50VGFibGUgPSAwXHJcblxyXG5wZXJzb25zID0gW10gIyBzdGFiaWwsIHNvcnRlcmFkIHDDpSBpZFxyXG5wYWlyaW5ncyA9IFtdICMgdmFyaWVyYXIgbWVkIHZhcmplIHJvbmRcclxuXHJcbnN0YXRlID0gMCAjIDA9VGFibGVzIDE9UmVzdWx0IDI9SGVscFxyXG5ST1VORCA9IDEgXHJcbnJlc3VsdGF0ID0gW10gIyAwMTIgc29ydGVyYWQgcMOlIGlkXHJcbmFudGFsID0gMCBcclxuXHJcbnNob3dUeXBlID0gKGEpIC0+IGlmIHR5cGVvZiBhID09ICdzdHJpbmcnIHRoZW4gXCInI3thfSdcIiBlbHNlIGFcclxuYXNzZXJ0ID0gKGEsYikgLT4gaWYgbm90IF8uaXNFcXVhbCBhLGIgdGhlbiBwcmludCBcIkFzc2VydCBmYWlsdXJlOiAje3Nob3dUeXBlIGF9ICE9ICN7c2hvd1R5cGUgYn1cIlxyXG5cclxubWVzc2FnZSA9ICcnICNUaGlzIGlzIGEgdHV0b3JpYWwgdG91cm5hbWVudC4gVXNlIGl0IG9yIGVkaXQgdGhlIFVSTCdcclxuXHJcbm15Um91bmQgPSAoeCxkZWNzKSAtPiBcclxuXHRzID0gKF8ucm91bmQgeCxkZWNzKS50b1N0cmluZygpXHJcblx0aWYgJy4nIG5vdCBpbiBzIHRoZW4gcyArPSAnLjAnXHJcblx0c1xyXG5hc3NlcnQgXCIyLjBcIiwgbXlSb3VuZCAxLjk5LDFcclxuYXNzZXJ0IFwiMC42XCIsIG15Um91bmQgMC42LDFcclxuXHJcbmZldGNoVVJMID0gKHVybCA9IGxvY2F0aW9uLnNlYXJjaCkgLT5cclxuXHRyZXMgPSB7fVxyXG5cdHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMgdXJsXHJcblx0cGVyc29ucyA9IFtdXHJcblx0VE9VUiA9IHVybFBhcmFtcy5nZXQoJ1RPVVInKS5yZXBsYWNlICdfJywnICdcclxuXHRkYXR1bSA9IHVybFBhcmFtcy5nZXQoJ0RBVEUnKSBvciBcIlwiXHJcblx0Uk9VTkRTID0gcGFyc2VJbnQgdXJsUGFyYW1zLmdldCgnUk9VTkRTJylcclxuXHRST1VORCA9IHBhcnNlSW50IHVybFBhcmFtcy5nZXQoJ1JPVU5EJylcclxuXHJcblx0cmVzLk5BTUUgPSB1cmxQYXJhbXMuZ2V0KCdOQU1FJykucmVwbGFjZUFsbCgnXycsJyAnKS5zcGxpdCAnfCdcclxuXHRyZXMuRUxPID0gdXJsUGFyYW1zLmdldCgnRUxPJykuc3BsaXQgJ3wnXHJcblx0cmVzLkVMTyA9IF8ubWFwIHJlcy5FTE8sIChyKSAtPiBwYXJzZUludCByXHJcblx0TiA9IHJlcy5OQU1FLmxlbmd0aFxyXG5cclxuXHRpZiBOIDwgNFxyXG5cdFx0cHJpbnQgXCJFcnJvcjogTnVtYmVyIG9mIHBsYXllcnMgbXVzdCBiZSA0IG9yIG1vcmUhXCJcclxuXHRcdHJldHVyblxyXG5cdGlmIE4gPiA2NFxyXG5cdFx0cHJpbnQgXCJFcnJvcjogTnVtYmVyIG9mIHBsYXllcnMgbXVzdCBiZSA2NCBvciBsZXNzIVwiXHJcblx0XHRyZXR1cm5cclxuXHJcblx0R0FNRVMgPSBpZiB1cmxQYXJhbXMuZ2V0ICdHQU1FUycgdGhlbiBwYXJzZUludCB1cmxQYXJhbXMuZ2V0ICdHQU1FUycgZWxzZSAxXHJcblx0RklSU1QgPSBpZiB1cmxQYXJhbXMuZ2V0ICdGSVJTVCcgdGhlbiB1cmxQYXJhbXMuZ2V0ICdGSVJTVCcgZWxzZSAnYmxhY2snXHJcblxyXG5cdHByaW50IHtHQU1FUyxGSVJTVH1cclxuXHJcblx0aWYgUk9VTkQgPiAwXHJcblxyXG5cdFx0cmVzLk9QUCA9IHVybFBhcmFtcy5nZXQoJ09QUCcpLnNwbGl0ICd8J1xyXG5cdFx0cmVzLkNPTCA9IHVybFBhcmFtcy5nZXQoJ0NPTCcpLnNwbGl0ICd8J1xyXG5cdFx0cmVzLlJFUyA9IHVybFBhcmFtcy5nZXQoJ1JFUycpLnNwbGl0ICd8J1xyXG5cdFx0aWYgcmVzLk5BTUUubGVuZ3RoICE9IHJlcy5PUFAubGVuZ3RoICE9IHJlcy5DT0wubGVuZ3RoICE9IHJlcy5SRVMubGVuZ3RoICE9IHJlcy5FTE8ubGVuZ3RoXHJcblx0XHRcdHByaW50IFwiRXJyb3I6IElsbGVnYWwgbnVtYmVyIG9mIHBsYXllcnMgaW4gT1BQLCBDT0wsIEVMTyBvciBSRVMhXCJcclxuXHRcdFx0cmV0dXJuXHJcblx0XHRSID0gcmVzLlJFU1swXS5sZW5ndGhcclxuXHJcblx0XHRyZXMuT1BQID0gXy5tYXAgcmVzLk9QUCwgKHIpIC0+IF8ubWFwIHIuc3BsaXQoJywnKSAjLCAoY2gpIC0+IEFMRkFCRVQuaW5kZXhPZiBjaFxyXG5cdFx0cmVzLkNPTCA9IF8ubWFwIHJlcy5DT0wsIChyKSAtPiBfLm1hcCByLCAoY2gpIC0+IHtCOi0xLFc6MX1bY2hdXHJcblx0XHRyZXMuUkVTID0gXy5tYXAgcmVzLlJFUywgKHIpIC0+IF8ubWFwIHIsIChjaCkgLT4gcGFyc2VJbnQgY2hcclxuXHJcblx0XHRmb3IgaSBpbiByYW5nZSBOXHJcblx0XHRcdGlmIFIgIT0gcmVzLk9QUFtpXS5sZW5ndGggIT0gcmVzLkNPTFtpXS5sZW5ndGggIT0gcmVzLlJFU1tpXS5sZW5ndGhcclxuXHRcdFx0XHRwcmludCBcIkVycm9yOiBJbGxlZ2FsIG51bWJlciBvZiByb3VuZHMgZm9yIHBsYXllciAje3Jlcy5OQU1FW2ldfSFcIlxyXG5cdFx0XHRcdHJldHVyblxyXG5cdFx0XHRwZXJzb25zLnB1c2gge2lkOmksIG5hbWU6IHJlcy5OQU1FW2ldLCBjb2w6cmVzLkNPTFtpXSwgcmVzOnJlcy5SRVNbaV0sIGJhbDowLCBvcHA6cmVzLk9QUFtpXSwgVDpbMCwwLDBdLCBlbG86cmVzLkVMT1tpXSB9XHJcblx0XHRjYWxjU2NvcmUoKVxyXG5cclxuXHRlbHNlXHJcblx0XHRpZiBOICUgMiA9PSAxXHJcblx0XHRcdHJlcy5OQU1FLnB1c2ggJy1mcmlyb25kLSdcclxuXHRcdFx0TiArPSAxXHJcblx0XHRwZXJzb25zID0gXy5tYXAgcmFuZ2UoTiksIChpKSAtPiB7aWQ6aSwgbmFtZTogcmVzLk5BTUVbaV0sIGVsbzogcmVzLkVMT1tpXSwgY29sOicnLCByZXM6JycsIGJhbDowLCBvcHA6W10sIFQ6W119XHJcblx0cHJpbnQgcGVyc29uc1xyXG5cclxuY29weVRvQ2xpcGJvYXJkID0gKHRleHQpIC0+XHJcblx0aWYgIW5hdmlnYXRvci5jbGlwYm9hcmRcclxuXHRcdHRleHRhcmVhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAndGV4dGFyZWEnXHJcblx0XHR0ZXh0YXJlYS52YWx1ZSA9IHRleHRcclxuXHRcdGRvY3VtZW50LmJvRi5hcHBlbmRDaGlsZCB0ZXh0YXJlYVxyXG5cdFx0dGV4dGFyZWEuc2VsZWN0KClcclxuXHRcdGRvY3VtZW50LmV4ZWNDb21tYW5kICdjb3B5J1xyXG5cdFx0ZG9jdW1lbnQuYm9GLnJlbW92ZUNoaWxkIHRleHRhcmVhXHJcblx0XHRtZXNzYWdlID0gJ1VybGVuIGhhciBrb3BpZXJhdHMgdGlsbCBrbGlwcGJvcmRldCAxJ1xyXG5cdGVsc2VcclxuXHRcdG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0IHRleHRcclxuXHRcdC50aGVuID0+IG1lc3NhZ2UgPSAnVXJsZW4gaGFyIGtvcGllcmF0cyB0aWxsIGtsaXBwYm9yZGV0IDInXHJcblx0XHQuY2F0Y2ggKGVycikgPT4gbWVzc2FnZSAnS29waWVyaW5nIHRpbGwga2xpcHBib3JkZXQgbWlzc2x5Y2thZGVzJ1xyXG5cclxuY3JlYXRlVVJMID0gLT5cclxuXHRyZXMgPSBbXVxyXG5cdCNyZXMucHVzaCBcImh0dHBzOi8vY2hyaXN0ZXJuaWxzc29uLmdpdGh1Yi5pby8yMDIzLzA0NC1Nb25yYWRcIlxyXG5cdHJlcy5wdXNoIFwiaHR0cDovLzEyNy4wLjAuMTo1NTAwXCJcclxuXHRyZXMucHVzaCBcIj9UT1VSPVwiICsgVE9VUlxyXG5cdHJlcy5wdXNoIFwiJkRBVEU9XCIgKyBcIjIwMjMtMTEtMjVcIlxyXG5cdHJlcy5wdXNoIFwiJlJPVU5EUz1cIiArIFJPVU5EU1xyXG5cdHJlcy5wdXNoIFwiJlJPVU5EPVwiICsgUk9VTkRcclxuXHRyZXMucHVzaCBcIiZOQU1FPVwiICsgKF8ubWFwIHBlcnNvbnMsIChwZXJzb24pIC0+IHBlcnNvbi5uYW1lLnJlcGxhY2VBbGwgXCIgXCIsXCJfXCIpLmpvaW4gXCJ8XCJcclxuXHRyZXMucHVzaCBcIiZFTE89XCIgKyAoXy5tYXAgcGVyc29ucywgKHBlcnNvbikgLT4gcGVyc29uLmVsbykuam9pbiBcInxcIlxyXG5cdCNpZiBwZXJzb25zWzBdLm9wcC5sZW5ndGg+IDBcclxuXHRyZXMucHVzaCBcIiZPUFA9XCIgKyAoXy5tYXAgcGVyc29ucywgKHBlcnNvbikgLT4gKF8ubWFwIHBlcnNvbi5vcHAsIChvcHApIC0+IHN0cihvcHApKS5qb2luIFwiLFwiKS5qb2luIFwifFwiXHJcblx0cmVzLnB1c2ggXCImQ09MPVwiICsgKF8ubWFwIHBlcnNvbnMsIChwZXJzb24pIC0+IHBlcnNvbi5jb2wpLmpvaW4gXCJ8XCJcclxuXHRyZXMucHVzaCBcIiZSRVM9XCIgKyAoXy5tYXAgcGVyc29ucywgKHBlcnNvbikgLT4gcGVyc29uLnJlcykuam9pbiBcInxcIlxyXG5cdHJlcy5qb2luICdcXG4nXHJcblxyXG5zdW0gPSAocykgLT5cclxuXHRyZXMgPSAwXHJcblx0Zm9yIGl0ZW0gaW4gc1xyXG5cdFx0cmVzICs9IHBhcnNlSW50IGl0ZW1cclxuXHRyZXNcclxuYXNzZXJ0IDYsIHN1bSAnMDEyMDEyJ1xyXG5cclxuc3VtQlcgPSAocykgLT5cclxuXHRyZXMgPSAwXHJcblx0Zm9yIGl0ZW0gaW4gc1xyXG5cdFx0cmVzICs9IGlmIGl0ZW09PSdCJyB0aGVuIC0xIGVsc2UgMVxyXG5cdHJlc1xyXG5hc3NlcnQgMCwgc3VtQlcgJydcclxuYXNzZXJ0IDAsIHN1bUJXICdCV0JXV0InXHJcbmFzc2VydCAtNiwgc3VtQlcgJ0JCQkJCQidcclxuYXNzZXJ0IDYsIHN1bUJXICdXV1dXV1cnXHJcblxyXG5zY29yZXggPSAocmVzKSAtPlxyXG5cdHJlc3VsdCA9IDBcclxuXHRmb3IgaSBpbiByYW5nZSBST1VORFxyXG5cdFx0aW5kZXggPSBBU0NJSS5pbmRleE9mIHJlc1tpXVxyXG5cdFx0aWYgaW5kZXggPj0gMCB0aGVuIHJlc3VsdCArPSBwYXJzZUludCBpbmRleFxyXG5cdHJlc3VsdCAvIDJcclxuXHQjIHByaW50KCdzY29yZXgnLHJvdW5kLHJlcyxyZXN1bHQpXHJcblxyXG5nZXRNZXQgPSAoYSxiKSAtPiBiLmlkIGluIHBlcnNvbnNbYS5pZF0ub3BwXHJcblxyXG5jb2xvcml6ZSA9IChwZXJzb25zKSAtPlxyXG5cdGZvciBpIGluIHJhbmdlIHBlcnNvbnMubGVuZ3RoLy8yXHJcblx0XHRwYSA9IHBlcnNvbnNbMippXVxyXG5cdFx0cGIgPSBwZXJzb25zWzIqaSsxXVxyXG5cdFx0cGFjID0gJ0IgVydbcGEubWFuZGF0b3J5KzFdXHJcblx0XHRwYmMgPSAnQiBXJ1twYi5tYW5kYXRvcnkrMV1cclxuXHRcdGlmIHBhYyA9PSBwYmNcclxuXHRcdFx0aWYgcGEuY29sb3JDb21wIDw9IHBiLmNvbG9yQ29tcCB0aGVuIHBhYyA9ICdXJyBlbHNlIHBhYyA9ICdCJ1xyXG5cdFx0cGEuY29sICs9IHBhY1xyXG5cdFx0cGIuY29sICs9IGlmIHBhYz09J1cnIHRoZW4gJ0InICBlbHNlICdXJ1xyXG5cclxucGFpciA9IChwZXJzb25zLHBhaXJpbmc9W10pIC0+XHJcblx0aWYgcGFpcmluZy5sZW5ndGggPT0gTiB0aGVuIHJldHVybiBwYWlyaW5nXHJcblx0YW50YWwgKz0gMVxyXG5cdGEgID0gcGVyc29uc1swXVxyXG5cdGZvciBiIGluIHBlcnNvbnNcclxuXHRcdGlmIGEgPT0gYiB0aGVuIGNvbnRpbnVlICMgeW91IGNhbm5vdCBtZWV0IHlvdXJzZWxmXHJcblx0XHRpZiBnZXRNZXQgYSxiIHRoZW4gY29udGludWUgIyBhIGFuZCBiIG11c3Qgbm90IGhhdmUgbWV0IGJlZm9yZVxyXG5cdFx0bWFuZGF0b3J5ID0gYS5tYW5kYXRvcnkgKyBiLm1hbmRhdG9yeVxyXG5cdFx0aWYgMiA9PSBNYXRoLmFicyBtYW5kYXRvcnkgdGhlbiBjb250aW51ZSAjIFBsYXllcnMgY2FuIG5vdCBoYXZlIHRoZSBzYW1lIGNvbG9yXHJcblx0XHRuZXdQZXJzb25zID0gKHAgZm9yIHAgaW4gcGVyc29ucyB3aGVuIHAgbm90IGluIFthLGJdKVxyXG5cdFx0bmV3UGFpcmluZyA9IHBhaXJpbmcuY29uY2F0IFthLGJdXHJcblx0XHRyZXN1bHQgPSBwYWlyIG5ld1BlcnNvbnMsbmV3UGFpcmluZ1xyXG5cdFx0aWYgcmVzdWx0Lmxlbmd0aCA9PSBOIHRoZW4gcmV0dXJuIHJlc3VsdFxyXG5cdHJldHVybiBbXVxyXG5cclxuYWRqdXN0Rm9yQ29sb3JzID0gKHBhaXJpbmdzKSAtPlxyXG5cdHJlcyA9IFtdXHJcblx0Zm9yIGkgaW4gcmFuZ2UgTi8vMlxyXG5cdFx0aWYgcGFpcmluZ3NbMippXS5jb2wubGVuZ3RoID09IDAgb3IgJ1cnID09IF8ubGFzdChwYWlyaW5nc1syKmldLmNvbClcclxuXHRcdFx0cmVzLnB1c2ggcGFpcmluZ3NbMippXSAjIFdcclxuXHRcdFx0cmVzLnB1c2ggcGFpcmluZ3NbMippKzFdICMgQlxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRyZXMucHVzaCBwYWlyaW5nc1syKmkrMV0gIyBXXHJcblx0XHRcdHJlcy5wdXNoIHBhaXJpbmdzWzIqaV0gIyBCXHJcblx0cmVzXHJcblxyXG5kb3dubG9hZEZpbGUgPSAodHh0LGZpbGVuYW1lKSAtPlxyXG5cdGJsb2IgPSBuZXcgQmxvYiBbdHh0XSwgeyB0eXBlOiAndGV4dC9wbGFpbicgfVxyXG5cdHVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwgYmxvYlxyXG5cdGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50ICdhJ1xyXG5cdGEuaHJlZiA9IHVybFxyXG5cdGEuZG93bmxvYWQgPSBmaWxlbmFtZVxyXG5cdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQgYVxyXG5cdGEuY2xpY2soKVxyXG5cdGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQgYVxyXG5cdFVSTC5yZXZva2VPYmplY3RVUkwgdXJsXHJcblxyXG5tYWtlVGFibGVGaWxlID0gKGhlYWRlcikgLT5cclxuXHRyZXMgPSBbXVxyXG5cclxuXHRwbGF5ZXJzID0gKFtwYWlyaW5nc1tpXSxpXSBmb3IgaSBpbiByYW5nZSBOKVxyXG5cdHBsYXllcnMgPSBfLnNvcnRCeSBwbGF5ZXJzLCAocCkgLT4gcFswXS5uYW1lXHJcblx0cGxheWVycyA9IChcIiN7Xy5wYWQoKDEraS8vMikudG9TdHJpbmcoKSsnV0InW2klMl0gLDUpfSAje3AubmFtZX1cIiBmb3IgW3AsaV0gaW4gcGxheWVycylcclxuXHJcblx0cmVzLnB1c2ggXCJOQU1FU1wiICsgaGVhZGVyXHJcblx0cmVzLnB1c2ggXCJcIlxyXG5cdHJlcy5wdXNoIFwiVGFibGUgTmFtZVwiXHJcblx0Zm9yIHAgaW4gcGxheWVyc1xyXG5cdFx0cmVzLnB1c2ggcFxyXG5cdHJlcy5wdXNoIFwiXFxmXCJcclxuXHJcblx0cmVzLnB1c2ggXCJUQUJMRVNcIiArIGhlYWRlclxyXG5cdHJlcy5wdXNoIFwiXCJcclxuXHRyZXMucHVzaCBcIlRhYmxlIFdoaXRlXCIucGFkRW5kKDYrMjUpICsgXy5wYWQoXCJcIiwyMCkgKyAnQmxhY2snLnBhZEVuZCgyNSlcclxuXHRmb3IgaSBpbiByYW5nZSBOLy8yXHJcblx0XHRhID0gcGFpcmluZ3NbMippXVxyXG5cdFx0YiA9IHBhaXJpbmdzWzIqaSsxXVxyXG5cdFx0cmVzLnB1c2ggXCJcIlxyXG5cdFx0cmVzLnB1c2ggXy5wYWQoaSsxLDYpICsgYS5uYW1lLnBhZEVuZCgyNSkgKyBfLnBhZChcInxfX19ffCAtIHxfX19ffFwiLDIwKSArICBiLm5hbWUucGFkRW5kKDI1KVxyXG5cdHJlcy5qb2luIFwiXFxuXCJcdFxyXG5cclxubG90dGEgPSAtPlxyXG5cdHByaW50ICdMb3R0bmluZyBhdiByb25kICcsUk9VTkRcclxuXHRwcmludCBwZXJzb25zXHJcblx0Zm9yIHAgaW4gcGVyc29uc1xyXG5cdFx0aWYgcC5yZXMubGVuZ3RoICE9IHAuY29sLmxlbmd0aCB0aGVuIHJldHVyblxyXG5cdHByaW50ICdnZW5vbWbDtnJzISdcclxuXHRmb3IgcCBpbiBwZXJzb25zXHJcblx0XHRjb2xvclN1bSA9IHN1bUJXIHAuY29sXHJcblx0XHRsYXRlc3QgPSBpZiBwLmNvbC5sZW5ndGg9PSAwIHRoZW4gJycgZWxzZSBfLmxhc3QgcC5jb2xcclxuXHRcdGxhdGVzdDIgPSBpZiBwLmNvbC5sZW5ndGggPCAyIHRoZW4gJycgZWxzZSBzdW1CVyBfLnNsaWNlIHAuY29sLCBwLmNvbC5sZW5ndGggLSAyXHJcblxyXG5cdFx0cC5tYW5kYXRvcnkgPSAwXHJcblx0XHRpZiBjb2xvclN1bSA8PSAtMSBvciBsYXRlc3QyID09IC0yIHRoZW4gcC5tYW5kYXRvcnkgPSAgMVxyXG5cdFx0aWYgY29sb3JTdW0gPj0gIDEgb3IgbGF0ZXN0MiA9PSAgMiB0aGVuIHAubWFuZGF0b3J5ID0gLTFcclxuXHRcdHAuY29sb3JDb21wID0gW2NvbG9yU3VtLGxhdGVzdF0gIyBmdW5kZXJhIHDDpSBvcmRuaW5nZW4gaMOkci5cclxuXHJcblx0Y2FsY1Njb3JlKClcclxuXHRpZiBST1VORCA9PSAwXHJcblx0XHRwYWlyaW5ncyA9IHBlcnNvbnNcclxuXHRcdHByaW50ICdwYWlyaW5ncycscGFpcmluZ3NcclxuXHRcdFJPVU5EID0gMVxyXG5cdGVsc2VcclxuXHRcdFJPVU5EICs9IDFcclxuXHRcdHBhaXJpbmdzID0gXy5zb3J0QnkgcGVyc29ucywgWydzY29yZSddXHJcblx0XHRwYWlyaW5ncyA9IHBhaXJpbmdzLnJldmVyc2UoKVxyXG5cdFx0c3RhcnQgPSBuZXcgRGF0ZSgpXHJcblx0XHRhbnRhbCA9IDBcclxuXHJcblx0XHRwYWlyaW5ncyA9IHBhaXIgcGFpcmluZ3NcclxuXHRcdHByaW50ICdwYWlyaW5ncycscGFpcmluZ3NcclxuXHRcdHByaW50IFJPVU5ELCBcIiN7YW50YWx9ICN7bmV3IERhdGUoKSAtIHN0YXJ0fSBtaWxsaXNlY29uZHNcIlxyXG5cclxuXHRjb2xvcml6ZSBwYWlyaW5nc1xyXG5cdHBhaXJpbmdzID0gYWRqdXN0Rm9yQ29sb3JzIHBhaXJpbmdzXHJcblx0Zm9yIGkgaW4gcmFuZ2UgTi8vMlxyXG5cdFx0YSA9IHBhaXJpbmdzWzIqaV1cclxuXHRcdGIgPSBwYWlyaW5nc1syKmkrMV1cclxuXHRcdGEub3BwLnB1c2ggYi5pZFxyXG5cdFx0Yi5vcHAucHVzaCBhLmlkXHJcblxyXG5cdHN0YXRlID0gMFxyXG5cclxuXHR0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpLnRvTG9jYWxlU3RyaW5nICdzZS1TRSdcclxuXHRkb3dubG9hZEZpbGUgbWFrZVRhYmxlRmlsZShcIiBmb3IgXCIgKyBUT1VSICsgXCIgaW4gUm91bmQgI3tST1VORH0gICAgI3t0aW1lc3RhbXB9XCIpLCBUT1VSICsgXCIgUm91bmQgI3tST1VORH0udHh0XCJcclxuXHRkb3dubG9hZEZpbGUgY3JlYXRlVVJMKCksIFwiVVJMIGZvciBcIiArIFRPVVIgKyBcIiBSb3VuZCAje1JPVU5EfS50eHRcIlxyXG5cclxuXHRwcmludCB7J3BhaXJpbmdzIGFmdGVyIHBhaXJpbmcnLHBhaXJpbmdzfVxyXG5cclxuIyBCZXJvciBww6UgR0FNRVMgc29tIHZhcmllcmFyIG1lbGxhbiAxIG9jaCA4XHJcbnByQm90aCA9IChzY29yZSkgLT5cclxuXHRhID0gQVNDSUkuaW5kZXhPZiBzY29yZVxyXG5cdGIgPSAyICogR0FNRVMgLSBhXHJcblx0YXggPSBwclJlcyBzY29yZVxyXG5cdGJ4ID0gcHJSZXMgQVNDSUlbYl1cclxuXHRpZiBheC5sZW5ndGggPT0gMSB0aGVuIGF4ID0gJyAnICsgYXhcclxuXHRpZiBieC5sZW5ndGggPT0gMSB0aGVuIGJ4ID0gYnggKyAnICdcclxuXHRheCArICcgLSAnICsgYnhcclxuXHJcbnByUmVzID0gKHNjb3JlKSAtPlxyXG5cdHNjb3JlID0gQVNDSUkuaW5kZXhPZiBzY29yZVxyXG5cdGEgPSBcIiN7c2NvcmUgLy8gMn1cIlxyXG5cdGlmIGEgPT0gXCIwXCIgdGhlbiBhPVwiXCJcclxuXHRiID0gaWYgc2NvcmUgJSAyID09IDEgdGhlbiAnwr0nIGVsc2UgJydcclxuXHRpZiBhK2IgPT0gXCJcIiB0aGVuIHJldHVybiAnMCdcclxuXHRhK2JcclxuYXNzZXJ0ICcwJywgIHByUmVzICcwJ1xyXG5hc3NlcnQgJ8K9JywgIHByUmVzICcxJ1xyXG5hc3NlcnQgJzEnLCAgcHJSZXMgJzInXHJcbmFzc2VydCAnMcK9JywgcHJSZXMgJzMnXHJcbmFzc2VydCAnNCcsICBwclJlcyAnOCdcclxuYXNzZXJ0ICc1JywgIHByUmVzICdhJ1xyXG5hc3NlcnQgJzXCvScsIHByUmVzICdiJ1xyXG5cclxuaW52ZXJ0ID0gKGFycikgLT5cclxuXHRyZXMgPSBbXVxyXG5cdGZvciBpIGluIHJhbmdlIGFyci5sZW5ndGhcclxuXHRcdHJlc1thcnJbaV1dID0gaVxyXG5cdHJldHVybiByZXNcclxuYXNzZXJ0IFswLDEsMiwzXSwgaW52ZXJ0IFswLDEsMiwzXVxyXG5hc3NlcnQgWzMsMiwwLDFdLCBpbnZlcnQgWzIsMywxLDBdXHJcblxyXG5jYWxjU2NvcmUgPSAtPlxyXG5cdGZvciBwZXJzb24gaW4gcGVyc29uc1xyXG5cdFx0cGVyc29uLnNjb3JlID0gc2NvcmV4IHBlcnNvbi5yZXNcclxuXHRwcmludCgnY2FsY1Njb3JlJyxwZXJzb25zKVxyXG5cclxuc2V0VDAgPSAocCxxKSAtPlxyXG5cdGlmIHEgaW4gcGVyc29uc1twXS5vcHBcclxuXHRcdHIgPSBwZXJzb25zW3BdLm9wcC5pbmRleE9mIHFcclxuXHRcdHBlcnNvbnNbcF0uVFswXSA9IHBlcnNvbnNbcF0ucmVzW3JdXHJcblxyXG5jYWxjVCA9IC0+XHJcblx0IyBUIHNrYSBiZXLDpGtuYXMgZsO2cnN0IG7DpHIgYWxsdCDDpHIga2xhcnQhXHJcblx0IyBCZXLDpGtuYSBUMSBiYXJhIGbDtnIgZGUgcG/DpG5nZ3J1cHBlciBzb20gaGFyIGV4YWt0IHR2w6UgcGVyc29uZXIgb2NoIGTDpSBlbmJhcnQgb20gZGUgaGFyIG3DtnR0IHZhcmFuZHJhLlxyXG5cdCMgT2tsYXJ0IG9tIGRldHRhIGFudsOkbmRzIGbDtnIgZ3J1cHBlciBtZWQgdCBleCB0cmUgcGVyc29uZXIuIEzDpWcgc2Fubm9saWtoZXQgYXR0IGFsbGEgbcO2dHQgdmFyYW5kcmEuXHJcblx0c2NvcmVzID0ge31cclxuXHRmb3IgcCBpbiByYW5nZSBwZXJzb25zLmxlbmd0aFxyXG5cdFx0cGVyc29uID0gcGVyc29uc1twXVxyXG5cdFx0a2V5ID0gc3VtIHBlcnNvbi5yZXNcclxuXHRcdGlmIGtleSBvZiBzY29yZXMgdGhlbiBzY29yZXNba2V5XS5wdXNoIHBcclxuXHRcdGVsc2Ugc2NvcmVzW2tleV0gPSBbcF1cclxuXHRcdHBlcnNvbi5UWzBdID0gMFxyXG5cdGZvciBrZXkgb2Ygc2NvcmVzXHJcblx0XHRpZiBzY29yZXNba2V5XS5sZW5ndGggPT0gMlxyXG5cdFx0XHRbcCxxXSA9IHNjb3Jlc1trZXldXHJcblx0XHRcdHNldFQwIHAscVxyXG5cdFx0XHRzZXRUMCBxLHBcclxuXHJcblx0Zm9yIHAgaW4gcGVyc29uc1xyXG5cdFx0cC5UWzFdID0gcC5yZXMuc3BsaXQoXCJcIikuZmlsdGVyKCh4KSA9PiB4ID09ICcyJykubGVuZ3RoXHJcblx0XHRwLlRbMl0gPSAwXHJcblx0XHRmb3IgaSBpbiBwLm9wcFxyXG5cdFx0XHRwLlRbMl0gKz0gc3VtIHBlcnNvbnNbaV0ucmVzICMgQnVjaGhvbHo6IHRoZSBzdW0gb2Ygb3Bwb3NpdGlvbiBzY29yZXNcclxuXHJcbm13ID0gKHgpIC0+IHgvMTAwMCAqIHdpZHRoXHJcblxyXG4jIyMjIyMjIyMjIyBHVUkgIyMjIyMjIyMjIyMjXHJcblxyXG50eHRUID0gKHZhbHVlLCB3LCBhbGlnbj13aW5kb3cuQ0VOVEVSKSAtPiBcclxuXHRpZiB2YWx1ZS5sZW5ndGggPiB3IHRoZW4gdmFsdWUgPSB2YWx1ZS5zdWJzdHJpbmcgMCx3XHJcblx0aWYgYWxpZ249PXdpbmRvdy5MRUZUIHRoZW4gcmVzID0gdmFsdWUgKyBfLnJlcGVhdCAnICcsdy12YWx1ZS5sZW5ndGhcclxuXHRpZiBhbGlnbj09d2luZG93LlJJR0hUIHRoZW4gcmVzID0gXy5yZXBlYXQoJyAnLHctdmFsdWUubGVuZ3RoKSArIHZhbHVlXHJcblx0aWYgYWxpZ249PXdpbmRvdy5DRU5URVIgXHJcblx0XHRkaWZmID0gdy12YWx1ZS5sZW5ndGhcclxuXHRcdGx0ID0gXy5yZXBlYXQgJyAnLCgxK2RpZmYpLy8yXHJcblx0XHRydCA9IF8ucmVwZWF0ICcgJyxkaWZmLy8yXHJcblx0XHRyZXMgPSBsdCArIHZhbHVlICsgcnRcclxuXHRyZXNcclxuYXNzZXJ0IFwiICAgU3ZlbiAgIFwiLCB0eHRUIFwiU3ZlblwiLDEwXHJcblxyXG5zaG93SGVhZGVyID0gKGhlYWRlcikgLT5cclxuXHR5ID0gRFkvMlxyXG5cdHRleHRBbGlnbiBMRUZULENFTlRFUlxyXG5cdHMgPSAnJ1xyXG5cdHMgKz0gdHh0VCBcIiN7dGl0bGV9ICN7ZGF0dW19XCIgLDMwLCB3aW5kb3cuTEVGVFxyXG5cdHMgKz0gJyAnICsgdHh0VCBoZWFkZXIsIDIyLCB3aW5kb3cuQ0VOVEVSXHJcblx0cyArPSAnICcgKyB0eHRUICdSb3VuZCAnICsgUk9VTkQsIDMwLCB3aW5kb3cuUklHSFRcclxuXHRmaWxsICdibGFjaydcclxuXHR0ZXh0IHMsMTAseVxyXG5cclxudHh0ID0gKHZhbHVlLCB4LCB5LCBhbGlnbj1udWxsLCBjb2xvcj1udWxsKSAtPlxyXG5cdGlmIGFsaWduIHRoZW4gdGV4dEFsaWduIGFsaWduLENFTlRFUlxyXG5cdGlmIGNvbG9yIHRoZW4gZmlsbCBjb2xvclxyXG5cdHRleHQgdmFsdWUseCx5XHJcblxyXG5zaG93VGFibGVzID0gLT5cclxuXHRzaG93SGVhZGVyICdUYWJsZXMnXHJcblx0eSA9IDEuNSAqIERZXHJcblx0cyA9IFwiXCJcclxuXHRzICs9ICAgICAgIHR4dFQgJyMnLCAyLHdpbmRvdy5SSUdIVFxyXG5cdHMgKz0gJyAnICsgdHh0VCAnU2NvcmUnLCA1LHdpbmRvdy5SSUdIVFxyXG5cdHMgKz0gJyAnICsgdHh0VCAnRWxvJywgICA0LHdpbmRvdy5MRUZUXHJcblx0cyArPSAnICcgKyB0eHRUICdXaGl0ZScsIDI1LHdpbmRvdy5MRUZUXHJcblx0cyArPSAnICcgKyB0eHRUICdSZXN1bHQnLDcsd2luZG93LkNFTlRFUlxyXG5cdHMgKz0gJyAnICsgdHh0VCAnQmxhY2snLCAyNSx3aW5kb3cuTEVGVFxyXG5cdHMgKz0gJyAnICsgdHh0VCAnRWxvJywgICA0LHdpbmRvdy5MRUZUXHJcblx0cyArPSAnICcgKyB0eHRUICdTY29yZScsIDUsd2luZG93LlJJR0hUXHJcblx0ZmlsbCAnYmxhY2snXHJcblx0dGV4dEFsaWduIHdpbmRvdy5MRUZUXHJcblx0dGV4dCBzLDEwLHlcclxuXHJcblx0Zm9yIGkgaW4gcmFuZ2UgTi8vMlxyXG5cdFx0eSArPSBEWSowLjVcclxuXHRcdGEgPSBwYWlyaW5nc1syKmkgIF0gIyBXaGl0ZVxyXG5cdFx0YiA9IHBhaXJpbmdzWzIqaSsxXSAjIEJsYWNrXHJcblx0XHQjIHBhID0gbXlSb3VuZCBzY29yZXgoYS5yZXMpLCAxXHJcblx0XHQjIHBiID0gbXlSb3VuZCBzY29yZXgoYi5yZXMpLCAxXHJcblx0XHRwYSA9IG15Um91bmQgYS5zY29yZSwgMVxyXG5cdFx0cGIgPSBteVJvdW5kIGIuc2NvcmUsIDFcclxuXHRcdGJvdGggPSBpZiBhLnJlcy5sZW5ndGggPT0gYS5jb2wubGVuZ3RoIHRoZW4gcHJCb3RoIF8ubGFzdChhLnJlcykgZWxzZSBcIiAgIC0gICBcIlxyXG5cclxuXHRcdG5yID0gaSsxXHJcblx0XHRzID0gXCJcIlxyXG5cdFx0cyArPSB0eHRUIG5yLnRvU3RyaW5nKCksIDIsIHdpbmRvdy5SSUdIVFxyXG5cdFx0cyArPSAnICcgKyB0eHRUIHBhLCA1XHJcblx0XHRzICs9ICcgJyArIHR4dFQgYS5lbG8sIDRcclxuXHRcdHMgKz0gJyAnICsgdHh0VCBhLm5hbWUsIDI1LCB3aW5kb3cuTEVGVFxyXG5cclxuXHRcdHMgKz0gJyAnICsgdHh0VCBib3RoLDcsIHdpbmRvdy5DRU5URVJcclxuXHJcblx0XHRzICs9ICcgJyArIHR4dFQgYi5uYW1lLCAyNSwgd2luZG93LkxFRlRcclxuXHRcdHMgKz0gJyAnICsgdHh0VCBiLmVsbywgNFxyXG5cdFx0cyArPSAnICcgKyB0eHRUIHBiLCA1LCB3aW5kb3cuQ0VOVEVSXHJcblx0XHRmaWxsIGlmIGN1cnJlbnRUYWJsZT09aSB0aGVuICd5ZWxsb3cnIGVsc2UgJ2JsYWNrJ1xyXG5cdFx0dGV4dCBzLDEwLHlcclxuXHJcbmxpZ2h0YnVsYiA9IChjb2xvciwgeCwgeSwgcmVzdWx0LCBvcHBvbmVudCkgLT5cclxuXHRwdXNoKClcclxuXHRwcmludCAnbGlnaHRidWxiJyxyZXN1bHRcclxuXHRmaWxsICdyZWQgZ3JheSBncmVlbicuc3BsaXQoJyAnKVtyZXN1bHRdXHJcblx0cmVjdE1vZGUgQ0VOVEVSXHJcblx0cmVjdCB4LHksMC44KkRZLDAuNDUqRFlcclxuXHRmaWxsIHtCOidibGFjaycsIFc6J3doaXRlJ31bY29sb3JdXHJcblx0bm9TdHJva2UoKVxyXG5cdHN0cm9rZVdlaWdodCA9IDBcclxuXHR0eHQgMStvcHBvbmVudCx4LHkrMSxDRU5URVJcclxuXHRwb3AoKVxyXG5cclxuc2hvd1Jlc3VsdCA9IC0+XHJcblx0c2hvd0hlYWRlciAnUmVzdWx0J1xyXG5cdGlmIHBhaXJpbmdzLmxlbmd0aCA9PSAwXHJcblx0XHR0eHQgXCJUaGlzIFJPVU5EIGNhbid0IGJlIHBhaXJlZCEgKFRvbyBtYW55IHJvdW5kcylcIix3aWR0aC8yLGhlaWdodC8yLENFTlRFUlxyXG5cdFx0cmV0dXJuXHJcblxyXG5cdG5vU3Ryb2tlKClcclxuXHRjYWxjVCgpXHJcblx0IyBjYWxjU2NvcmUoKVxyXG5cclxuXHR0ZW1wID0gXy5zb3J0QnkgcGVyc29ucywgWydzY29yZScsICdUJ11cclxuXHR0ZW1wID0gdGVtcC5yZXZlcnNlKClcclxuXHJcblx0aW52ID0gKHAuaWQgZm9yIHAgaW4gdGVtcClcclxuXHRpbnYgPSBpbnZlcnQgaW52XHJcblxyXG5cdHkgPSAxLjUgKiBEWVxyXG5cdHRleHRBbGlnbiBMRUZUXHJcblx0cmhlYWRlciA9IF8ubWFwIHJhbmdlKDEsUk9VTkRTKzEpLCAoaSkgLT4gXCIje2klMTB9IFwiXHJcblx0cmhlYWRlciA9IHJoZWFkZXIuam9pbiAnICdcclxuXHJcblx0cyA9IFwiXCJcclxuXHRzICs9ICAgICAgIHR4dFQgXCIjXCIsICAgIDJcclxuXHRzICs9ICcgJyArIHR4dFQgXCJFbG9cIiwgIDQsd2luZG93LkxFRlRcclxuXHRzICs9ICcgJyArIHR4dFQgXCJOYW1lXCIsIDI1LHdpbmRvdy5MRUZUXHJcblx0cyArPSAnICcgKyB0eHRUIHJoZWFkZXIsMypST1VORFMsd2luZG93LkxFRlQgXHJcblx0cyArPSAnICcgKyB0eHRUIFwiU2NvcmVcIiw1LHdpbmRvdy5SSUdIVFxyXG5cdHMgKz0gJyAnICsgdHh0VCBcIkRcIiwgICAgMix3aW5kb3cuQ0VOVEVSXHJcblx0cyArPSAnICcgKyB0eHRUIFwiV1wiLCAgICAxLHdpbmRvdy5DRU5URVJcclxuXHRzICs9ICcgJyArIHR4dFQgXCJCXCIsICAgIDIsd2luZG93LkNFTlRFUlxyXG5cdHRleHQgcywxMCx5XHJcblxyXG5cdGZpbGwgJ3doaXRlJyBcclxuXHQjdGV4dFNpemUgRFkgKiAwLjVcclxuXHRmb3IgcGVyc29uLGkgaW4gdGVtcFxyXG5cdFx0eSArPSBEWSAqIDAuNVxyXG5cdFx0cyA9IFwiXCJcclxuXHRcdHMgKz0gICAgICAgdHh0VCAoMStpKS50b1N0cmluZygpLCAyLCB3aW5kb3cuUklHSFRcclxuXHRcdHMgKz0gJyAnICsgdHh0VCBwZXJzb24uZWxvLCAgICAgICA0LCB3aW5kb3cuTEVGVFxyXG5cdFx0cyArPSAnICcgKyB0eHRUIHBlcnNvbi5uYW1lLCAgICAgMjUsIHdpbmRvdy5MRUZUXHJcblx0XHRzICs9ICcgJyArIHR4dFQgJycsIDMqUk9VTkRTLCB3aW5kb3cuQ0VOVEVSXHJcblx0XHRzY29yZSA9IHBlcnNvbi5zY29yZSAjIHNjb3JleCBwZXJzb24ucmVzXHJcblx0XHRzY29yZSA9IG15Um91bmQgc2NvcmUsMVxyXG5cdFx0cyArPSAnICcgKyB0eHRUIHNjb3JlLCAgICAgICAgICAgICA1LCB3aW5kb3cuUklHSFRcclxuXHRcdHMgKz0gJyAnICsgdHh0VCBwclJlcyhwZXJzb24uVFswXSksMix3aW5kb3cuQ0VOVEVSXHJcblx0XHRzICs9ICcgJyArIHR4dFQgICAgICAgcGVyc29uLlRbMV0sIDIsd2luZG93LkNFTlRFUlxyXG5cdFx0cyArPSAnICcgKyB0eHRUIHByUmVzKHBlcnNvbi5UWzJdKSwyLHdpbmRvdy5DRU5URVJcclxuXHRcdHRleHQgcywxMCx5XHJcblxyXG5cdFx0I3ByaW50KCdyb3VuZCcscm91bmQpXHJcblx0XHRmb3IgciBpbiByYW5nZSBST1VORC0xXHJcblx0XHRcdHggPSBEWSAqICgxMC41ICsgMC45KnIpXHJcblx0XHRcdHByaW50IHIscGVyc29uLmNvbFtyXVswXSwgeCwgeSwgcGVyc29uLnJlc1tyXSwgaW52W3BlcnNvbi5vcHBbcl1dXHJcblx0XHRcdGxpZ2h0YnVsYiBwZXJzb24uY29sW3JdWzBdLCB4LCB5LCBwZXJzb24ucmVzW3JdLCBpbnZbcGVyc29uLm9wcFtyXV1cclxuXHJcbmlmIGxvY2F0aW9uLnNlYXJjaCA9PSAnJ1xyXG5cdHRpdGxlID0gJ1R1dG9yaWFsIFRvdXJuYW1lbnQnXHJcblx0ZGF0dW0gPSBuZXcgRGF0ZSgpXHJcblx0ZGF0dW0gPSBkYXR1bS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF1cclxuXHR1cmwgPSBcIj9UPSN7dGl0bGUucmVwbGFjZShcIiBcIixcIl9cIil9Jk5BTUU9QU5ERVJTU09OX0FuZGVyc3xCRU5HVFNTT05fQmVydGlsfENBUkxTRU5fQ2hyaXN0ZXJ8REFOSUVMU1NPTl9EYW5pZWx8RVJJS1NTT05fRXJpa3xGUkFOU1NPTl9GZXJkaW5hbmR8R1JFSURFUl9Hw7ZyYW58SEFSQUxEU1NPTl9IZWxnZVwiXHJcblx0bG9jYXRpb24uaHJlZiA9IHVybFxyXG5lbHNlXHJcblx0ZmV0Y2hVUkwoKVxyXG5cdHBhaXJpbmdzID0gcGVyc29uc1xyXG5cclxuc2hvd0hlbHAgPSAtPlxyXG5cdHRleHRBbGlnbiBMRUZUXHJcblx0Zm9yIGkgaW4gcmFuZ2UgSEVMUC5sZW5ndGhcclxuXHRcdHRleHQgSEVMUFtpXSwxMDAsNTArNTAqaVxyXG5cclxud2luZG93LndpbmRvd1Jlc2l6ZWQgPSAtPiBcclxuXHRyZXNpemVDYW52YXMgd2luZG93V2lkdGgtNCx3aW5kb3dIZWlnaHQtNFxyXG5cdHhkcmF3KClcclxuXHJcbndpbmRvdy5zZXR1cCA9IC0+XHJcblx0Y3JlYXRlQ2FudmFzIHdpbmRvd1dpZHRoLTQsd2luZG93SGVpZ2h0LTRcclxuXHR0ZXh0Rm9udCAnQ291cmllciBOZXcnXHJcblx0dGV4dEFsaWduIENFTlRFUixDRU5URVJcclxuXHRsb3R0YSgpXHJcblx0c3RhdGUgPSAwXHJcblx0eGRyYXcoKVxyXG5cclxueGRyYXcgPSAtPlxyXG5cdGJhY2tncm91bmQgJ2dyYXknXHJcblx0dGV4dFNpemUgRFkgKiAwLjVcclxuXHRpZiBzdGF0ZSA9PSAwIHRoZW4gc2hvd1RhYmxlcygpXHJcblx0aWYgc3RhdGUgPT0gMSB0aGVuIHNob3dSZXN1bHQoKVxyXG5cdGlmIHN0YXRlID09IDIgdGhlbiBzaG93SGVscCgpXHJcblxyXG53aW5kb3cua2V5UHJlc3NlZCA9IC0+XHJcblx0aWYga2V5ID09ICdIb21lJyB0aGVuIGN1cnJlbnRUYWJsZSA9IDBcclxuXHRpZiBrZXkgPT0gJ0Fycm93VXAnIHRoZW4gY3VycmVudFRhYmxlID0gKGN1cnJlbnRUYWJsZSAtIDEpICUlIChOLy8yKVxyXG5cdGlmIGtleSA9PSAnQXJyb3dEb3duJyB0aGVuIGN1cnJlbnRUYWJsZSA9IChjdXJyZW50VGFibGUgKyAxKSAlJSAoTi8vMilcclxuXHRpZiBrZXkgPT0gJ0VuZCcgdGhlbiBjdXJyZW50VGFibGUgPSAoTi8vMikgLSAxXHJcblx0aW5kZXggPSAyKmN1cnJlbnRUYWJsZVxyXG5cdGEgPSBwYWlyaW5nc1tpbmRleF1cclxuXHRiID0gcGFpcmluZ3NbaW5kZXgrMV1cclxuXHRpZiBrZXkgaW4gJzAgMXEydzNlNHI1dDZ5N3U4J1xyXG5cdFx0aW5kZXggPSAnMCAxcTJ3M2U0cjV0Nnk3dTgnLmluZGV4T2Yga2V5XHJcblx0XHRpZiBpbmRleCA8PSAyICogR0FNRVNcclxuXHRcdFx0aWYgYS5yZXMubGVuZ3RoIDwgYS5jb2wubGVuZ3RoIHRoZW4gYS5yZXMgKz0gQVNDSUlbaW5kZXhdXHJcblx0XHRcdGlmIGIucmVzLmxlbmd0aCA8IGIuY29sLmxlbmd0aCB0aGVuIGIucmVzICs9IEFTQ0lJWzIqR0FNRVMgLSBpbmRleF1cclxuXHRcdFx0Y3VycmVudFRhYmxlID0gKGN1cnJlbnRUYWJsZSArIDEpICUlIChOLy8yKVxyXG5cdGlmIGtleSA9PSAnRW50ZXInXHJcblx0XHRzdGF0ZSA9IDEgLSBzdGF0ZVxyXG5cdFx0aWYgc3RhdGUgPT0gMVxyXG5cdFx0XHRjYWxjVCgpXHJcblx0XHRcdCNjYWxjU2NvcmUoKVxyXG5cdFx0XHQjdGVtcCA9IF8uc29ydEJ5IHBlcnNvbnMsIFsnc2NvcmUnLCAnVCddXHJcblx0XHRcdCN0ZW1wID0gdGVtcC5yZXZlcnNlKClcclxuXHRcdFx0I3ByaW50IHRlbXBcclxuXHRpZiBrZXkgaW4gJ3BQJyB0aGVuIGxvdHRhKClcclxuXHRpZiBrZXkgaW4gJ2xMJyB0aGVuIERZICs9IDFcclxuXHRpZiBrZXkgaW4gJ3NTJyB0aGVuIERZIC09IDFcclxuXHR4ZHJhdygpXHJcbiJdfQ==
//# sourceURL=c:\github\2023\044-Monrad\coffee\monrad.coffee