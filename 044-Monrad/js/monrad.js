// Generated by CoffeeScript 2.5.1
var ALFABET, Button, N, R, antal, assert, buttons, calcScore, calcT, colorize, copyToClipboard, createURL, fetchURL, getMet, ids, invert, lightbulb, lotta, message, nameList, pair, persons, prRes, print, random, range, released, rond, score, seed, setPrompt, setT0, state, sum, sumBW, transferResult, txt, visaBordslista, visaNamnlista, visaResultat,
  indexOf = [].indexOf;

ALFABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-/';

N = 0; // antal personer

R = 0; // antal ronder


// States:
// 2 Names
// 3 Tables
// 4 Result
seed = Math.random();

random = function() {
  return (((Math.sin(seed++) / 2 + 0.5) * 10000) % 100) / 100;
};

print = console.log;

range = _.range;

persons = [];

nameList = [];

state = 0;

rond = 0;

ids = [];

assert = function(a, b) {
  if (a !== b) {
    return print(`Assert failure: '${a}' != '${b}'`);
  }
};

buttons = [[], [], [], [], []];

released = true;

message = 'This is a tutorial tournament. Use it or edit the URL';

copyToClipboard = function(text) {
  var textarea;
  if (!navigator.clipboard) {
    textarea = document.createElement('textarea');
    textarea.value = text;
    document.body.appendChild(textarea);
    textarea.select();
    document.execCommand('copy');
    document.body.removeChild(textarea);
    return message = 'Urlen har kopierats till klippbordet 1';
  } else {
    return navigator.clipboard.writeText(text).then(() => {
      return message = 'Urlen har kopierats till klippbordet 2';
    }).catch((err) => {
      return message('Kopiering till klippbordet misslyckades');
    });
  }
};

Button = class Button {
  constructor(prompt1, x1, y1, w, h, click) {
    this.prompt = prompt1;
    this.x = x1;
    this.y = y1;
    this.w = w;
    this.h = h;
    this.click = click;
    this.active = true;
  }

  draw() {
    if (!this.active) {
      return;
    }
    textAlign(CENTER, CENTER);
    rectMode(CENTER);
    if (this.prompt === 'next') {
      fill('black');
      rect(this.x, this.y, this.w, this.h);
      fill('yellow');
    }
    return text(this.prompt, this.x, this.y + 0.5);
  }

  inside(mx, my) {
    return (this.x - this.w / 2 <= mx && mx <= this.x + this.w / 2) && (this.y - this.h / 2 <= my && my <= this.y + this.h / 2) && this.active;
  }

};

createURL = function() {
  var res;
  res = "https://christernilsson.github.io/2023/044-Monrad";
  res += "?T=" + "Wasa SK KM blixt";
  res += "&D=" + "2023-11-25";
  res += "&N=" + (_.map(persons, function(person) {
    return person.n.replaceAll(" ", "_");
  })).join("|");
  if (persons[0].opps.length > 0) {
    res += "&O=" + (_.map(persons, function(person) {
      return (_.map(person.opps, function(opp) {
        return ALFABET[opp];
      })).join("");
    })).join("|");
    res += "&C=" + (_.map(persons, function(person) {
      return person.c;
    })).join("|");
    res += "&R=" + (_.map(persons, function(person) {
      return person.r;
    })).join("|");
  }
  return res;
};

fetchURL = function() {
  var i, j, len, ref, ref1, ref2, ref3, ref4, res, urlParams;
  res = {};
  urlParams = new URLSearchParams(window.location.search);
  persons = [];
  res.T = urlParams.get('T');
  res.D = urlParams.get('D');
  res.N = urlParams.get('N').replaceAll('_', ' ').split('|');
  N = res.N.length;
  if (!((4 <= N && N <= 64))) {
    print("Error: Number of players must be between 4 and 64!");
    return;
  }
  if (res.O && res.C && res.R) {
    res.O = urlParams.get('O').split('|');
    res.C = urlParams.get('C').split('|');
    res.R = urlParams.get('R').split('|');
    if (((res.N.length !== (ref1 = res.O.length) && ref1 !== (ref = res.C.length)) && ref !== res.R.length)) {
      print("Error: Illegal number of players in O, C or R!");
      return;
    }
    R = res.R[0].length;
    res.O = _.map(res.O, function(r) {
      return _.map(r, function(ch) {
        return ALFABET.indexOf(ch);
      });
    });
    res.C = _.map(res.C, function(r) {
      return _.map(r, function(ch) {
        return {
          B: -1,
          W: 1
        }[ch];
      });
    });
    res.R = _.map(res.R, function(r) {
      return _.map(r, function(ch) {
        return parseInt(ch);
      });
    });
    ref2 = range(N);
    for (j = 0, len = ref2.length; j < len; j++) {
      i = ref2[j];
      if (((R !== (ref4 = res.O[i].length) && ref4 !== (ref3 = res.C[i].length)) && ref3 !== res.R[i].length)) {
        print(`Error: Illegal number of rounds for player ${res.N[i]}!`);
        return;
      }
      persons.push({
        id: i,
        n: res.N[i],
        c: res.C[i],
        r: res.R[i],
        s: 0,
        opps: res.O[i],
        T: [0, 0, 0]
      });
    }
  } else {
    res.N = _.shuffle(res.N);
    persons = _.map(range(N), function(i) {
      return {
        id: i,
        n: res.N[i],
        c: '',
        r: '',
        s: 0,
        opps: [],
        T: []
      };
    });
    print(persons);
    // persons.push {id:i, n: res.N[i], c:'', r:'', s:0, opps:[]}
    return R = Math.round(1.5 * Math.log2(N)); // antal ronder
  }
};

//if N < 10 then R = 3

// fejkaData = ->
// 	förnamn = 'Anders Bertil Christer Daniel Erik Ferdinand Göran Helge'.split " "
// 	efternamn = 'ANDERSSON BENGTSSON CARLSEN DANIELSSON ERIKSSON FRANSSON GREIDER HARALDSSON'.split " "
// 	persons = []
// 	N = förnamn.length
// 	R = Math.round 1.5 * Math.log2 N
// 	for i in range N
// 		namn = efternamn[i%8] + ' ' + förnamn[i%8]
// 		persons.push {id:i, n: namn, c:'', r: '', s:0, opps:[], T:[0,0,0] }
// spara = (name) ->
// 	persons.push {s:0, id:persons.length, n:name, c:'', mandatory:0, colorComp:[], r:'', opps:[], T:[0,0,0]}
sum = function(s) {
  var item, j, len, res;
  res = 0;
  for (j = 0, len = s.length; j < len; j++) {
    item = s[j];
    res += parseInt(item);
  }
  return res;
};

sumBW = function(s) {
  var item, j, len, res;
  res = 0;
  for (j = 0, len = s.length; j < len; j++) {
    item = s[j];
    res += item === 'B' ? -1 : 1;
  }
  return res;
};

score = function(p) {
  return sum(persons[p].r);
};

getMet = function(a, b) {
  return indexOf.call(persons[a].opps, b) >= 0;
};

colorize = function(ids) {
  var i, j, len, pa, pac, pb, ref, results;
  ref = range(Math.floor(ids.length / 2));
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    pa = persons[ids[2 * i]];
    pb = persons[ids[2 * i + 1]];
    if (pa.mandatory) {
      pac = pa.mandatory === 1 ? 'W' : 'B';
    } else if (pb.mandatory) {
      pac = pa.mandatory === 1 ? 'B' : 'W';
    } else {
      if (pa.colorComp < pb.colorComp) {
        pac = 'W';
      } else {
        pac = 'B';
      }
    }
    pa.c += pac;
    results.push(pb.c += pac === 'W' ? 'B' : 'W');
  }
  return results;
};

pair = function(ids, pairing = []) {
  var a, b, id, j, k, len, len1, mandatory, newPairing, newids, result;
  if (pairing.length === N) {
    return pairing;
  }
// a är ett personindex
  for (j = 0, len = ids.length; j < len; j++) {
    a = ids[j];
// b är ett personindex
    for (k = 0, len1 = ids.length; k < len1; k++) {
      b = ids[k];
      if (a === b) {
        continue; // man kan inte möta sig själv
      }
      if (getMet(a, b)) {
        continue; // a och b får ej ha mötts tidigare
      }
      mandatory = persons[a].mandatory + persons[b].mandatory;
      if (2 === Math.abs(mandatory)) {
        continue; // Spelarna kan inte ha samma färg.
      }
      newids = (function() {
        var l, len2, results;
        results = [];
        for (l = 0, len2 = ids.length; l < len2; l++) {
          id = ids[l];
          if (id !== a && id !== b) {
            results.push(id);
          }
        }
        return results;
      })();
      newPairing = pairing.concat([a, b]);
      result = pair(newids, newPairing);
      if (result.length === N) {
        return result;
      }
    }
  }
  return [];
};

lotta = function() {
  var a, b, colorSum, i, j, k, latest, latest2, len, len1, p, ref, start, temp;
  start = new Date();
// prepare pairing
  for (j = 0, len = persons.length; j < len; j++) {
    p = persons[j];
    colorSum = sumBW(p.c);
    latest = p.c.length === 0 ? 0 : _.last(p.c);
    latest2 = p.c.length < 2 ? 0 : sumBW(_.slice(p.c, p.c.length - 2));
    p.mandatory = 0;
    if (colorSum <= -1 || latest2 === -2) {
      p.mandatory = 1;
    }
    if (colorSum >= 1 || latest2 === 2) {
      p.mandatory = -1;
    }
    p.colorComp = [
      colorSum,
      latest // fundera på ordningen här.
    ];
  }
  calcScore();
  temp = _.sortBy(persons, ['s']);
  ids = _.map(temp, function(person) {
    return person.id;
  });
  ids = ids.reverse();
  ids = pair(ids);
  colorize(ids);
  ref = range(Math.floor(N / 2));
  for (k = 0, len1 = ref.length; k < len1; k++) {
    i = ref[k];
    a = ids[2 * i];
    b = ids[2 * i + 1];
    persons[a].opps.push(b);
    persons[b].opps.push(a);
  }
  print(`${new Date() - start} milliseconds`);
  return state = 2;
};

prRes = function(score) {
  var a, b;
  score = parseInt(score);
  if (score === 1) {
    return '½';
  }
  a = `${Math.floor(score / 2)}`;
  b = score % 2 === 1 ? '½' : '';
  return a + b;
};

assert('0', prRes('0'));

assert('½', prRes('1'));

assert('1', prRes('2'));

assert('1½', prRes(3));

assert('10', prRes(20));

assert('10½', prRes(21));

invert = function(arr) {
  var i, j, len, ref, res;
  res = [];
  ref = range(arr.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    res[arr[i]] = i;
  }
  return res;
};

antal = function(p, color) {
  var c;
  return sum([
    (function() {
      var j,
    len,
    ref,
    results;
      ref = p.c;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        c = ref[j];
        if (color === c) {
          results.push(1);
        }
      }
      return results;
    })()
  ]);
};

calcScore = function() {
  var j, len, person, results;
  results = [];
  for (j = 0, len = persons.length; j < len; j++) {
    person = persons[j];
    results.push(person.s = parseInt(sum(person.r)));
  }
  return results;
};

setT0 = function(p, q) {
  var r;
  if (indexOf.call(persons[p].opps, q) >= 0) {
    r = persons[p].opps.indexOf(q);
    return persons[p].T[0] = persons[p].r[r];
  }
};

calcT = function() {
  var i, j, k, key, len, len1, p, person, q, ref, results, scores;
  // T ska beräknas först när allt är klart!
  // Beräkna T1 bara för de poänggrupper som har exakt två personer och då enbart om de har mött varandra.
  // Oklart om detta används för grupper med t ex tre personer. Låg sannolikhet att alla mött varandra.
  scores = {};
  ref = range(persons.length);
  for (j = 0, len = ref.length; j < len; j++) {
    p = ref[j];
    person = persons[p];
    key = sum(person.r);
    if (key in scores) {
      scores[key].push(p);
    } else {
      scores[key] = [p];
    }
    person.T[0] = 0;
  }
  for (key in scores) {
    if (scores[key].length === 2) {
      [p, q] = scores[key];
      setT0(p, q);
      setT0(q, p);
    }
  }
  results = [];
  for (k = 0, len1 = persons.length; k < len1; k++) {
    p = persons[k];
    p.T[1] = p.r.split("").filter((x) => {
      return x === '2';
    }).length;
    p.T[2] = 0;
    results.push((function() {
      var l, len2, ref1, results1;
      ref1 = p.opps;
      results1 = [];
      for (l = 0, len2 = ref1.length; l < len2; l++) {
        i = ref1[l];
        results1.push(p.T[2] += sum(persons[i].r)); // Buchholz: summan av motståndarnas poäng
      }
      return results1;
    })());
  }
  return results;
};

transferResult = function() {
  var a, b, i, j, len, prompt, ref, res, results;
  ref = range(Math.floor(N / 2));
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    a = ids[2 * i];
    b = ids[2 * i + 1];
    prompt = buttons[3][2 + 3 * i].prompt;
    buttons[3][2 + 3 * i].prompt = '';
    res = {
      '1 - 0': '20',
      '½ - ½': '11',
      '0 - 1': '02'
    }[prompt];
    persons[a].r += res[0];
    results.push(persons[b].r += res[1]);
  }
  return results;
};

//########## GUI ############
txt = function(value, x, y, align = null, color = null) {
  if (align) {
    textAlign(align, CENTER);
  }
  if (color) {
    fill(color);
  }
  return text(value, x, y);
};

visaNamnlista = function() {
  var bord, i, j, len, person, x, y;
  nameList = _.sortBy(persons, ['n']);
  textSize(16);
  txt(`Namelist Round ${rond + 1}`, 350, 30, CENTER, 'black');
  txt('Table Name', 10, 60, LEFT);
  for (j = 0, len = ids.length; j < len; j++) {
    i = ids[j];
    person = nameList[i];
    x = 350 * (Math.floor(i / 32));
    y = 90 + 30 * (i % 32);
    bord = 1 + Math.floor(ids[i] / 2);
    fill('B' === _.last(person.c) ? 'black' : 'white');
    txt(bord, 30 + x, y, RIGHT);
    txt(person.n, 40 + x, y, LEFT);
  }
  buttons[3][0].active = false;
  return txt(message, 350, height - 50, CENTER);
};

visaBordslista = function() {
  var a, b, i, j, len, nr, pa, pb, ref, results, y;
  txt(`Table List Round ${rond + 1}`, 350, 40, CENTER, 'lightgray');
  txt("Click on a winner or in the middle. Twice cancels", 350, 40 + 40 * N, CENTER, 'lightgray');
  y = 80;
  txt('#', 50, y, CENTER, 'white');
  txt('Score', 100, y, CENTER, 'white');
  txt('Result', 350, y, CENTER, 'lightgray');
  txt('Score', 600, y, CENTER, 'black');
  txt('#', 650, y, CENTER, 'black');
  txt('White', 250, y, CENTER, 'white');
  txt('Black', 450, y, CENTER, 'black');
  ref = range(Math.floor(N / 2));
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    y = 120 + 40 * i;
    a = persons[ids[2 * i]];
    b = persons[ids[2 * i + 1]];
    pa = sum(a.r);
    pb = sum(b.r);
    nr = i + 1;
    txt(nr, 50, y, CENTER, 'white');
    txt(prRes(pa), 100, y);
    txt('', 350, y, CENTER, 'lightgray');
    txt(prRes(pb), 600, y, CENTER, 'black');
    results.push(txt(nr, 650, y));
  }
  return results;
};

lightbulb = function(color, x, y, result, opponent) {
  var strokeWeight;
  push();
  fill('red yellow green'.split(' ')[result]);
  circle(x, y, 30);
  fill({
    B: 'black',
    W: 'white'
  }[color]);
  textSize(20);
  if (result === '1' && color === 'W') {
    stroke('black');
    strokeWeight = 1;
  } else {
    noStroke();
    strokeWeight = 0;
  }
  txt(1 + opponent, x, y + 2, CENTER);
  return pop();
};

visaResultat = function() {
  var arr, i, inv, j, k, l, len, len1, len2, len3, m, p, r, ref, ref1, ref2, ref3, res, results, temp, x, y;
  if (ids.length === 0) {
    txt("This round can't be paired! (Too many rounds)", width / 2, height / 2, CENTER);
    return;
  }
  noStroke();
  calcT(rond);
  calcScore();
  temp = _.sortBy(persons, ['s', 'T']);
  ids = _.map(temp, function(person) {
    return person.id;
  });
  ids = ids.reverse();
  inv = invert(ids); // pga korstabell
  textAlign(CENTER, CENTER);
  arr = "0½1";
  fill('white');
  textSize(16);
  ref = "012";
  for (j = 0, len = ref.length; j < len; j++) {
    res = ref[j];
    x = [50, 90, 130][res];
    txt(arr[res], x, 15);
    lightbulb('W', x, 40, res, N - 1);
    lightbulb('B', x, 80, res, N - 1);
  }
  //textSize 16
  txt(`Result after round ${rond + 1}`, 355, 40);
  y = 80;
  textAlign(CENTER);
  ref1 = range(R);
  for (k = 0, len1 = ref1.length; k < len1; k++) {
    r = ref1[k];
    txt(r + 1, 220 + 40 * r, y);
  }
  txt("Score", 570, y);
  txt("Tiebreak", 640, y - 20);
  txt("D", 610, y);
  txt("W", 640, y);
  txt("B", 670, y);
  fill('white');
  textSize(16);
  ref2 = range(N);
  results = [];
  for (l = 0, len2 = ref2.length; l < len2; l++) {
    i = ref2[l];
    p = persons[i];
    y = 40 * (inv[i] + 3);
    txt(1 + inv[i], 25, y, RIGHT);
    txt(p.n, 35, y, LEFT);
    ref3 = range(rond + 1);
    for (m = 0, len3 = ref3.length; m < len3; m++) {
      r = ref3[m];
      x = 220 + 40 * r;
      lightbulb(p.c[r][0], x, y, p.r[r], inv[p.opps[r]]);
    }
    // textSize 16
    score = prRes(sum(p.r));
    txt(score, 570, y, CENTER, 'white');
    txt(prRes(p.T[0]), 610, y);
    txt(p.T[1], 640, y);
    results.push(txt(prRes(p.T[2]), 670, y));
  }
  return results;
};

setPrompt = function(button, prompt) {
  var j, len, ok, ref;
  button.prompt = button.prompt === prompt ? '' : prompt;
  ok = true;
  ref = buttons[3].slice(1);
  for (j = 0, len = ref.length; j < len; j++) {
    button = ref[j];
    if (button.prompt === '') {
      ok = false;
    }
  }
  return buttons[3][0].active = ok;
};

window.setup = function() {
  var a, b, i, j, len, n, ref, y;
  if (window.location.search === '') {
    window.location.href += '?T=Wasa_SK&D=2023-11-28&N=ANDERSSON_Anders|BENGTSSON_Bertil|CARLSEN_Christer|DANIELSSON_Daniel|ERIKSSON_Erik|FRANSSON_Ferdinand|GREIDER_Göran|HARALDSSON_Helge';
  } else {
    fetchURL();
  }
  createCanvas(710, 100 + N * 40);
  print(N + ' players ' + R + ' rounds');
  textAlign(CENTER, CENTER);
  lotta();
  buttons[2].push(new Button('next', 600, 20, 60, 20, function() {
    return state = 3;
  }));
  buttons[3].push(new Button('next', 600, 20, 60, 20, function() {
    transferResult();
    return state = 4;
  }));
  ref = range(Math.floor(N / 2));
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    y = 120 + 40 * i;
    a = persons[ids[2 * i]];
    b = persons[ids[2 * i + 1]];
    n = buttons[3].length;
    (function(n) {
      buttons[3].push(new Button(a.n, 210, y, 180, 30, function() {
        return setPrompt(buttons[3][n + 1], '1 - 0');
      }));
      buttons[3].push(new Button('', 350, y, 90, 30, function() {
        return setPrompt(buttons[3][n + 1], '½ - ½');
      }));
      return buttons[3].push(new Button(b.n, 490, y, 180, 30, function() {
        return setPrompt(buttons[3][n + 1], '0 - 1');
      }));
    })(n);
  }
  return buttons[4].push(new Button('next', 600, 20, 60, 20, function() {
    var s;
    s = createURL();
    print(s);
    copyToClipboard(s);
    if (rond < R - 1) {
      rond += 1;
      return lotta();
    }
  }));
};

window.draw = function() {
  var button, j, len, ref;
  background('gray');
  ref = buttons[state];
  for (j = 0, len = ref.length; j < len; j++) {
    button = ref[j];
    button.draw();
  }
  if (state <= 1) {
    return text(`State ${state}`, 100, 100);
  } else if (state === 2) {
    return visaNamnlista();
  } else if (state === 3) {
    return visaBordslista();
  } else if (state === 4) {
    return visaResultat();
  }
};

window.mousePressed = function(event) {
  var button, j, len, ref;
  event.preventDefault();
  if (!released) {
    return;
  }
  released = false;
  ref = buttons[state];
  for (j = 0, len = ref.length; j < len; j++) {
    button = ref[j];
    if (button.inside(mouseX, mouseY)) {
      button.click();
    }
  }
  return false;
};

window.mouseReleased = function(event) {
  event.preventDefault();
  released = true;
  return false;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023\044-Monrad\coffee\monrad.coffee