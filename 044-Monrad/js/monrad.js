// Generated by CoffeeScript 2.7.0
  // LOW ########################################
  // Återinför scorepoints vid GAMES == 1

// TODO #######################################
  // Inför Swiss
  // Hantera kontrollinmatning av resultat
  // Hantera frirond
  // Skriv ut URL i samband med lottning till egen fil.

// Ge perfekt felmeddelande för fel i URL-en. (EASY)
  //   Fel antal ronder i Color, Result
  //   Fel antal ELO

// Välj Monrad eller Swiss i URL-en (LOW)
  // Parkera spelare

// localStorage (i princip urlen)
  // Hastighetsjämförelser (javafo, swiss-manager, min kod, monrad, swiss)

// Testa på Mac. (klippbordet)

// DONE #########################################
  // Alfabetisk Namnlista? Namn Bord Färg
  // Print bordslista
  // Hantera 1 till 8 partier per team/person GAMES=1 (default)

// NOT TODO #####################################
  // Repetition av piltangenter (NIX, går för fort)
  // Två kolumner vid många spelare
  // Backa en eller flera ronder? (Kan göras mha sparade URL:er)
  // Ange färg för första bordet i URL-en (EASY) FIRST=WHITE, FIRST=BLACK (default)
var ASCII, DY, FIRST, GAMES, HELP, N, ROUND, ROUNDS, TOUR, adjustForColors, assert, assignColors, balans, calcScore, calcT, copyToClipboard, createURL, currentTable, datum, downloadFile, fetchURL, flip, getMet, ints2strings, invert, lightbulb, lotta, makeTableFile, message, mw, myRound, ok, other, pair, pairings, persons, prBoth, prRes, print, range, res2string, resultat, scorex, setT0, showHeader, showHelp, showResult, showTables, showType, state, sum, sumBW, title, txt, txtT, url, xdraw,
  indexOf = [].indexOf,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

HELP = `How to use the Schwisch Chess Tournament Program:
	Enter = Switch between Tables and Result
	Home = Select First Table
	Up   = Select Previous Table
	Down = Select Next Table
	End  = Select Last Table
	0 = Enter a Loss for White Player
	space = Enter a Draw
	1 = Enter a Win for White Player
	P = Perform Pairing
	S = Make text smaller
	L = Make text larger
	? = Show this Help Page
	H = Show Help for constructing the URL`.split('\n');

ASCII = '0123456789abcdefg';

N = 0; // number of players

ROUNDS = 0; // number of rounds

DY = 75; // vertical line distance

DY = 40; // vertical line distance

TOUR = '';

GAMES = 1;

FIRST = 'black';

print = console.log;

range = _.range;

title = '';

datum = '';

currentTable = 0;

persons = []; // stabil, sorterad på id

pairings = []; // varierar med varje rond

state = 0; // 0=Tables 1=Result 2=Help

ROUND = 0;

resultat = []; // 012 sorterad på id

showType = function(a) {
  if (typeof a === 'string') {
    return `'${a}'`;
  } else {
    return a;
  }
};

assert = function(a, b) {
  if (!_.isEqual(a, b)) {
    return print(`Assert failure: ${showType(a)} != ${showType(b)}`);
  }
};

ok = function(p0, p1) {
  var ref;
  return p0 !== p1 && (ref = p0.id, indexOf.call(p1.opp, ref) < 0) && abs(p0.bal + p1.bal) <= 1; // eller 2
};

other = function(col) {
  if (col === 'b') {
    return 'w';
  } else {
    return 'b';
  }
};

balans = function(col) {
  if (col === 'w') {
    return 1;
  } else {
    return -1;
  }
};

flip = function(p0, p1) { // p0 byter färg, p0 anpassar sig
  var col0, col1;
  col0 = _.last(p0.col);
  col1 = col0;
  col0 = other(col0);
  p0.col += col0;
  p1.col += col1;
  p0.bal += balans(col0);
  return p1.bal += balans(col1);
};

assignColors = function(p0, p1) {
  var bal, col0, col1;
  if (p0.col.length === 0) {
    col1 = "bw"[p0.id % 2];
    col0 = other(col1); // "bw"[1 - p0.id % 2]
    p0.col += col0;
    p1.col += col1;
    // bal = 1 if col0 == 'w' else -1
    p0.bal += balans(col0);
    return p1.bal += balans(col1);
  } else {
    bal = p0.bal + p1.bal;
    if (bal === 0) {
      return flip(p0, p1);
    } else if (2 === abs(bal)) {
      if (2 === abs(p0.bal)) {
        return flip(p0, p1);
      } else {
        return flip(p1, p0);
      }
    }
  }
};

message = ''; //This is a tutorial tournament. Use it or edit the URL'

myRound = function(x, decs) {
  var s;
  s = (_.round(x, decs)).toString();
  if (indexOf.call(s, '.') < 0) {
    s += '.0';
  }
  return s;
};

assert("2.0", myRound(1.99, 1));

assert("0.6", myRound(0.6, 1));

ints2strings = function(ints) {
  return `${ints}`;
};

assert("1,2,3", ints2strings([1, 2, 3]));

assert("1", ints2strings([1]));

assert("", ints2strings([]));

res2string = function(ints) {
  var i;
  return ((function() {
    var j, len, results;
    results = [];
    for (j = 0, len = ints.length; j < len; j++) {
      i = ints[j];
      results.push(i.toString());
    }
    return results;
  })()).join('');
};

assert("123", res2string([1, 2, 3]));

assert("1", res2string([1]));

assert("", res2string([]));

// string2ints = (s) -> 
// 	print s
// 	print s.split(",")
// 	res = _.map s.split(","), (item) -> parseInt item
// 	print res
// 	res
//assert [], string2ints ""
//assert [1], string2ints "1"
//assert [1,2], string2ints "1,2"
// assert [1,2,3], string2ints "1,2,3"
fetchURL = function(url = location.search) {
  var R, i, j, len, ref, ref1, ref2, ref3, ref4, ref5, res, urlParams;
  res = {};
  urlParams = new URLSearchParams(url);
  persons = [];
  TOUR = urlParams.get('TOUR').replace('_', ' ');
  datum = urlParams.get('DATE') || "";
  ROUNDS = parseInt(urlParams.get('ROUNDS'));
  ROUND = parseInt(urlParams.get('ROUND'));
  res.NAME = urlParams.get('NAME').replaceAll('_', ' ').split('|');
  res.ELO = urlParams.get('ELO').split('|');
  res.ELO = _.map(res.ELO, function(r) {
    return parseInt(r);
  });
  N = res.NAME.length;
  if (N < 4) {
    print("Error: Number of players must be 4 or more!");
    return;
  }
  if (N > 64) {
    print("Error: Number of players must be 64 or less!");
    return;
  }
  GAMES = urlParams.get('GAMES') ? parseInt(urlParams.get('GAMES')) : 1;
  FIRST = urlParams.get('FIRST') ? urlParams.get('FIRST') : 'black';
  print({GAMES, FIRST});
  if (ROUND > 0) {
    res.OPP = urlParams.get('OPP').split('|');
    res.COL = urlParams.get('COL').split('|');
    res.RES = urlParams.get('RES').split('|');
    if ((((res.NAME.length !== (ref2 = res.OPP.length) && ref2 !== (ref1 = res.COL.length)) && ref1 !== (ref = res.RES.length)) && ref !== res.ELO.length)) {
      print("Error: Illegal number of players in OPP, COL, ELO or RES!");
      return;
    }
    R = res.RES[0].length;
    print('a', res);
    res.OPP = _.map(res.OPP, function(r) {
      return _.map(r.split(','), function(s) {
        return parseInt(s);
      });
    });
    //res.COL = _.map res.COL, (r) -> _.map r, (ch) -> {B:-1,W:1}[ch]
    res.RES = _.map(res.RES, function(r) {
      return _.map(r, function(ch) {
        return parseInt(ch);
      });
    });
    //res.RES = _.map res.RES, string2ints 
    print('b', res);
    ref3 = range(N);
    for (j = 0, len = ref3.length; j < len; j++) {
      i = ref3[j];
      if (((R !== (ref5 = res.OPP[i].length) && ref5 !== (ref4 = res.COL[i].length)) && ref4 !== res.RES[i].length)) {
        print(`Error: Illegal number of rounds for player ${res.NAME[i]}!`);
        return;
      }
      persons.push({
        id: i,
        name: res.NAME[i],
        col: res.COL[i],
        res: res.RES[i],
        bal: 0,
        opp: res.OPP[i],
        T: [0, 0, 0],
        elo: res.ELO[i]
      });
    }
    print(persons);
    calcScore();
    print(persons);
  } else {
    if (N % 2 === 1) {
      res.NAME.push('-frirond-');
      N += 1;
    }
    persons = _.map(range(N), function(i) {
      return {
        id: i,
        name: res.NAME[i],
        elo: res.ELO[i],
        col: '',
        res: [],
        bal: 0,
        opp: [],
        T: []
      };
    });
  }
  return print(persons);
};

copyToClipboard = function(text) {
  var textarea;
  if (!navigator.clipboard) {
    textarea = document.createElement('textarea');
    textarea.value = text;
    document.boF.appendChild(textarea);
    textarea.select();
    document.execCommand('copy');
    document.boF.removeChild(textarea);
    return message = 'Urlen har kopierats till klippbordet 1';
  } else {
    return navigator.clipboard.writeText(text).then(() => {
      return message = 'Urlen har kopierats till klippbordet 2';
    }).catch((err) => {
      return message('Kopiering till klippbordet misslyckades');
    });
  }
};

createURL = function() {
  var res;
  res = [];
  //res.push "https://christernilsson.github.io/2023/044-Monrad"
  res.push("http://127.0.0.1:5500");
  res.push("?TOUR=" + TOUR.replace(' ', '_'));
  res.push("&DATE=" + "2023-11-25");
  res.push("&ROUNDS=" + ROUNDS);
  res.push("&ROUND=" + ROUND);
  res.push("&NAME=" + (_.map(persons, function(person) {
    return person.name.replaceAll(" ", "_");
  })).join("|"));
  res.push("&ELO=" + (_.map(persons, function(person) {
    return person.elo;
  })).join("|"));
  //if persons[0].opp.length> 0
  res.push("&OPP=" + (_.map(persons, function(person) {
    return _.map(person.opp, ints2strings);
  })).join("|"));
  res.push("&COL=" + (_.map(persons, function(person) {
    return person.col;
  })).join("|"));
  res.push("&RES=" + (_.map(persons, function(person) {
    return res2string(person.res);
  })).join("|"));
  return res.join('\n');
};

sum = function(s) {
  var item, j, len, res;
  res = 0;
  for (j = 0, len = s.length; j < len; j++) {
    item = s[j];
    res += parseInt(item);
  }
  return res;
};

assert(6, sum('012012'));

sumBW = function(s) {
  var item, j, len, res;
  res = 0;
  for (j = 0, len = s.length; j < len; j++) {
    item = s[j];
    res += item === 'B' ? -1 : 1;
  }
  return res;
};

assert(0, sumBW(''));

assert(0, sumBW('BWBWWB'));

assert(-6, sumBW('BBBBBB'));

assert(6, sumBW('WWWWWW'));

scorex = function(res, r = ROUND - 1) {
  var i, j, len, ref, result;
  print('scorex', res, r);
  result = 0;
  ref = range(r);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    result += res[i];
  }
  return result / 2;
};

assert(0, scorex([], 0));

assert(2.5, scorex([0, 1, 2, 2], 4));

getMet = function(a, b) {
  var ref;
  return ref = b.id, indexOf.call(persons[a.id].opp, ref) >= 0;
};

pair = function(persons, pairing = []) {
  var a, b, j, len, newPairing, newPersons, p, result;
  if (pairing.length === N) {
    return pairing;
  }
  a = persons[0];
  for (j = 0, len = persons.length; j < len; j++) {
    b = persons[j];
    if (!ok(a, b)) {
      continue;
    }
    newPersons = (function() {
      var k, len1, results;
      results = [];
      for (k = 0, len1 = persons.length; k < len1; k++) {
        p = persons[k];
        if (p !== a && p !== b) {
          results.push(p);
        }
      }
      return results;
    })();
    newPairing = pairing.concat([a, b]);
    result = pair(newPersons, newPairing);
    if (result.length === N) {
      return result;
    }
  }
  return [];
};

adjustForColors = function(pairings) {
  var i, j, len, ref, res;
  res = [];
  ref = range(Math.floor(N / 2));
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    if (pairings[2 * i].col.length === 0 || 'W' === _.last(pairings[2 * i].col)) {
      res.push(pairings[2 * i]);
      res.push(pairings[2 * i + 1]);
    } else {
      res.push(pairings[2 * i + 1]);
      res.push(pairings[2 * i]);
    }
  }
  return res;
};

downloadFile = function(txt, filename) {
  var a, blob, url;
  print('filename', filename);
  blob = new Blob([txt], {
    type: 'text/plain'
  });
  url = URL.createObjectURL(blob);
  a = document.createElement('a');
  a.href = url;
  a.download = filename;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  return URL.revokeObjectURL(url);
};

makeTableFile = function(header) {
  var a, b, i, j, k, len, len1, p, players, ref, res;
  res = [];
  players = (function() {
    var j, len, ref, results;
    ref = range(N);
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      results.push([pairings[i], i]);
    }
    return results;
  })();
  players = _.sortBy(players, function(p) {
    return p[0].name;
  });
  players = (function() {
    var j, len, results;
    results = [];
    for (j = 0, len = players.length; j < len; j++) {
      [p, i] = players[j];
      results.push(`${_.pad((1 + Math.floor(i / 2)).toString() + 'WB'[i % 2], 5)} ${p.name}`);
    }
    return results;
  })();
  res.push("NAMES" + header);
  res.push("");
  res.push("Table Name");
  for (j = 0, len = players.length; j < len; j++) {
    p = players[j];
    res.push(p);
  }
  res.push("\f");
  res.push("TABLES" + header);
  res.push("");
  res.push("Table White".padEnd(6 + 25) + _.pad("", 20) + 'Black'.padEnd(25));
  ref = range(Math.floor(N / 2));
  for (k = 0, len1 = ref.length; k < len1; k++) {
    i = ref[k];
    a = pairings[2 * i];
    b = pairings[2 * i + 1];
    res.push("");
    res.push(_.pad(i + 1, 6) + a.name.padEnd(25) + _.pad("|____| - |____|", 20) + b.name.padEnd(25));
  }
  return res.join("\n");
};

lotta = function() {
  var a, b, colorSum, i, j, k, l, latest, latest2, len, len1, len2, p, ref, start, timestamp;
  print('Lottning av rond ', ROUND);
  document.title = 'Round ' + (ROUND + 1);
  print(persons);
  for (j = 0, len = persons.length; j < len; j++) {
    p = persons[j];
    if (p.res.length !== p.col.length) {
      return;
    }
  }
  print('genomförs!');
  for (k = 0, len1 = persons.length; k < len1; k++) {
    p = persons[k];
    colorSum = sumBW(p.col);
    latest = p.col.length === 0 ? '' : _.last(p.col);
    latest2 = p.col.length < 2 ? '' : sumBW(_.slice(p.col, p.col.length - 2));
  }
  // p.mandatory = 0
  // if colorSum <= -1 or latest2 == -2 then p.mandatory =  1
  // if colorSum >=  1 or latest2 ==  2 then p.mandatory = -1
  // p.colorComp = [colorSum,latest] # fundera på ordningen här.
  calcScore();
  if (ROUND === 0) {
    pairings = persons;
    print('pairings', pairings);
    ROUND = 1;
  } else {
    ROUND += 1;
    pairings = _.sortBy(persons, ['score']);
    pairings = pairings.reverse();
    start = new Date();
    pairings = pair(pairings);
    // print 'pairings',pairings
    print(ROUND, `${new Date() - start} milliseconds`);
  }
  // colorize pairings
  // assignColors pairings
  pairings = adjustForColors(pairings);
  ref = range(Math.floor(N / 2));
  for (l = 0, len2 = ref.length; l < len2; l++) {
    i = ref[l];
    a = pairings[2 * i];
    b = pairings[2 * i + 1];
    a.opp.push(b.id);
    b.opp.push(a.id);
    assignColors(a, b);
  }
  state = 0;
  timestamp = new Date().toLocaleString('se-SE');
  print("ROUND", ROUND);
  downloadFile(makeTableFile(" for " + TOUR + ` in Round ${ROUND}    ${timestamp}`), TOUR + ` Round ${ROUND}.txt`);
  downloadFile(createURL(), "URL for " + TOUR + ` Round ${ROUND}.txt`);
  return print({'pairings after pairing': 'pairings after pairing', pairings});
};

// Beror på GAMES som varierar mellan 1 och 8
prBoth = function(score) {
  var a, ax, b, bx;
  a = ASCII.indexOf(score);
  b = 2 * GAMES - a;
  ax = prRes(score);
  bx = prRes(ASCII[b]);
  if (ax.length === 1) {
    ax = ' ' + ax;
  }
  if (bx.length === 1) {
    bx = bx + ' ';
  }
  return ax + ' - ' + bx;
};

prRes = function(score) {
  var a, b;
  score = ASCII.indexOf(score);
  a = `${Math.floor(score / 2)}`;
  if (a === "0") {
    a = "";
  }
  b = score % 2 === 1 ? '½' : '';
  if (a + b === "") {
    return '0';
  }
  return a + b;
};

assert('0', prRes('0'));

assert('½', prRes('1'));

assert('1', prRes('2'));

assert('1½', prRes('3'));

assert('4', prRes('8'));

assert('5', prRes('a'));

assert('5½', prRes('b'));

invert = function(arr) {
  var i, j, len, ref, res;
  res = [];
  ref = range(arr.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    res[arr[i]] = i;
  }
  return res;
};

assert([0, 1, 2, 3], invert([0, 1, 2, 3]));

assert([3, 2, 0, 1], invert([2, 3, 1, 0]));

calcScore = function() {
  var j, len, person;
  for (j = 0, len = persons.length; j < len; j++) {
    person = persons[j];
    person.score = scorex(person.res);
  }
  return print('calcScore', persons);
};

setT0 = function(p, q) {
  var r;
  if (indexOf.call(persons[p].opp, q) >= 0) {
    r = persons[p].opp.indexOf(q);
    return persons[p].T[0] = persons[p].res[r];
  }
};

calcT = function() {
  var i, j, k, key, len, len1, p, person, q, ref, results, scores;
  // T ska beräknas först när allt är klart!
  // Beräkna T1 bara för de poänggrupper som har exakt två personer och då enbart om de har mött varandra.
  // Oklart om detta används för grupper med t ex tre personer. Låg sannolikhet att alla mött varandra.
  scores = {};
  ref = range(persons.length);
  for (j = 0, len = ref.length; j < len; j++) {
    p = ref[j];
    person = persons[p];
    key = sum(person.res);
    if (key in scores) {
      scores[key].push(p);
    } else {
      scores[key] = [p];
    }
    person.T[0] = 0;
  }
  for (key in scores) {
    if (scores[key].length === 2) {
      [p, q] = scores[key];
      setT0(p, q);
      setT0(q, p);
    }
  }
  results = [];
  for (k = 0, len1 = persons.length; k < len1; k++) {
    p = persons[k];
    p.T[1] = p.res.split("").filter((x) => {
      return x === '2';
    }).length;
    p.T[2] = 0;
    results.push((function() {
      var l, len2, ref1, results1;
      ref1 = p.opp;
      results1 = [];
      for (l = 0, len2 = ref1.length; l < len2; l++) {
        i = ref1[l];
        results1.push(p.T[2] += sum(persons[i].res)); // Buchholz: the sum of opposition scores
      }
      return results1;
    })());
  }
  return results;
};

mw = function(x) {
  return x / 1000 * width;
};

//########## GUI ############
txtT = function(value, w, align = window.CENTER) {
  var diff, lt, res, rt;
  if (value.length > w) {
    value = value.substring(0, w);
  }
  if (align === window.LEFT) {
    res = value + _.repeat(' ', w - value.length);
  }
  if (align === window.RIGHT) {
    res = _.repeat(' ', w - value.length) + value;
  }
  if (align === window.CENTER) {
    diff = w - value.length;
    lt = _.repeat(' ', Math.floor((1 + diff) / 2));
    rt = _.repeat(' ', Math.floor(diff / 2));
    res = lt + value + rt;
  }
  return res;
};

assert("   Sven   ", txtT("Sven", 10));

showHeader = function(header) {
  var s, y;
  y = DY / 2;
  textAlign(LEFT, CENTER);
  s = '';
  s += txtT(`${title} ${datum}`, 30, window.LEFT);
  s += ' ' + txtT(header, 22, window.CENTER);
  s += ' ' + txtT('Round ' + ROUND, 30, window.RIGHT);
  fill('black');
  return text(s, 10, y);
};

txt = function(value, x, y, align = null, color = null) {
  if (align) {
    textAlign(align, CENTER);
  }
  if (color) {
    fill(color);
  }
  return text(value, x, y);
};

showTables = function() {
  var a, b, both, i, j, len, nr, pa, pb, ref, results, s, y;
  showHeader('Tables');
  y = 1.5 * DY;
  s = "";
  s += txtT('#', 2, window.RIGHT);
  s += ' ' + txtT('Score', 5, window.RIGHT);
  s += ' ' + txtT('Elo', 4, window.LEFT);
  s += ' ' + txtT('White', 25, window.LEFT);
  s += ' ' + txtT('Result', 7, window.CENTER);
  s += ' ' + txtT('Black', 25, window.LEFT);
  s += ' ' + txtT('Elo', 4, window.LEFT);
  s += ' ' + txtT('Score', 5, window.RIGHT);
  fill('black');
  textAlign(window.LEFT);
  text(s, 10, y);
  ref = range(Math.floor(N / 2));
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    y += DY * 0.5;
    a = pairings[2 * i];
    b = pairings[2 * i + 1];
    // pa = myRound scorex(a.res), 1
    // pb = myRound scorex(b.res), 1
    pa = myRound(a.score, 1);
    pb = myRound(b.score, 1);
    both = a.res.length === a.col.length ? prBoth(_.last(a.res)) : "   -   ";
    nr = i + 1;
    s = "";
    s += txtT(nr.toString(), 2, window.RIGHT);
    s += ' ' + txtT(pa, 5);
    s += ' ' + txtT(a.elo, 4);
    s += ' ' + txtT(a.name, 25, window.LEFT);
    s += ' ' + txtT(both, 7, window.CENTER);
    s += ' ' + txtT(b.name, 25, window.LEFT);
    s += ' ' + txtT(b.elo, 4);
    s += ' ' + txtT(pb, 5, window.CENTER);
    fill(currentTable === i ? 'yellow' : 'black');
    results.push(text(s, 10, y));
  }
  return results;
};

lightbulb = function(color, x, y, result, opponent) {
  var strokeWeight;
  // print 'lightbulb',color, x, y, result, opponent
  push();
  // print 'lightbulb',result
  fill('red gray green'.split(' ')[result]);
  rectMode(CENTER);
  rect(x, y, 0.8 * DY, 0.45 * DY);
  fill({
    b: 'black',
    w: 'white'
  }[color]);
  noStroke();
  strokeWeight = 0;
  txt(1 + opponent, x, y + 1, CENTER);
  return pop();
};

showResult = function() {
  var i, inv, j, len, p, person, r, results, rheader, s, score, temp, x, y;
  showHeader('Result');
  if (pairings.length === 0) {
    txt("This ROUND can't be paired! (Too many rounds)", width / 2, height / 2, CENTER);
    return;
  }
  noStroke();
  calcT();
  // calcScore()
  temp = _.sortBy(persons, ['score', 'T']);
  temp = temp.reverse();
  inv = (function() {
    var j, len, results;
    results = [];
    for (j = 0, len = temp.length; j < len; j++) {
      p = temp[j];
      results.push(p.id);
    }
    return results;
  })();
  inv = invert(inv);
  y = 1.5 * DY;
  textAlign(LEFT);
  rheader = _.map(range(1, ROUNDS + 1), function(i) {
    return `${i % 10} `;
  });
  rheader = rheader.join(' ');
  s = "";
  s += txtT("#", 2);
  s += ' ' + txtT("Elo", 4, window.LEFT);
  s += ' ' + txtT("Name", 25, window.LEFT);
  s += ' ' + txtT(rheader, 3 * ROUNDS, window.LEFT);
  s += ' ' + txtT("Score", 5, window.RIGHT);
  s += ' ' + txtT("D", 2, window.CENTER);
  s += ' ' + txtT("W", 1, window.CENTER);
  s += ' ' + txtT("B", 2, window.CENTER);
  text(s, 10, y);
  fill('white');

  //textSize DY * 0.5
  results = [];
  for (i = j = 0, len = temp.length; j < len; i = ++j) {
    person = temp[i];
    y += DY * 0.5;
    s = "";
    s += txtT((1 + i).toString(), 2, window.RIGHT);
    s += ' ' + txtT(person.elo, 4, window.LEFT);
    s += ' ' + txtT(person.name, 25, window.LEFT);
    s += ' ' + txtT('', 3 * ROUNDS, window.CENTER);
    score = person.score; // scorex person.res
    score = myRound(score, 1);
    s += ' ' + txtT(score, 5, window.RIGHT);
    s += ' ' + txtT(prRes(person.T[0]), 2, window.CENTER);
    s += ' ' + txtT(person.T[1], 2, window.CENTER);
    s += ' ' + txtT(prRes(person.T[2]), 2, window.CENTER);
    text(s, 10, y);
    results.push((function() {
      var k, len1, ref, results1;
      ref = range(ROUND - 1);
      //print('round',round)
      results1 = [];
      for (k = 0, len1 = ref.length; k < len1; k++) {
        r = ref[k];
        x = DY * (10.5 + 0.9 * r);
        print(r, person.col[r][0], x, y, person.res[r], inv[person.opp[r]]);
        results1.push(lightbulb(person.col[r][0], x, y, person.res[r], inv[person.opp[r]]));
      }
      return results1;
    })());
  }
  return results;
};

if (location.search === '') {
  title = 'Tutorial Tournament';
  datum = new Date();
  datum = datum.toISOString().split('T')[0];
  url = `?T=${title.replace(" ", "_")}&NAME=ANDERSSON_Anders|BENGTSSON_Bertil|CARLSEN_Christer|DANIELSSON_Daniel|ERIKSSON_Erik|FRANSSON_Ferdinand|GREIDER_Göran|HARALDSSON_Helge`;
  location.href = url;
} else {
  fetchURL();
  pairings = persons;
}

showHelp = function() {
  var i, j, len, ref, results;
  textAlign(LEFT);
  ref = range(HELP.length);
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    results.push(text(HELP[i], 100, 50 + 50 * i));
  }
  return results;
};

window.windowResized = function() {
  resizeCanvas(windowWidth - 4, windowHeight - 4);
  return xdraw();
};

window.setup = function() {
  createCanvas(windowWidth - 4, windowHeight - 4);
  textFont('Courier New');
  textAlign(CENTER, CENTER);
  lotta();
  state = 0;
  return xdraw();
};

xdraw = function() {
  background('gray');
  textSize(DY * 0.5);
  if (state === 0) {
    showTables();
  }
  if (state === 1) {
    showResult();
  }
  if (state === 2) {
    return showHelp();
  }
};

window.keyPressed = function() {
  var a, b, index;
  if (key === 'Home') {
    currentTable = 0;
  }
  if (key === 'ArrowUp') {
    currentTable = modulo(currentTable - 1, Math.floor(N / 2));
  }
  if (key === 'ArrowDown') {
    currentTable = modulo(currentTable + 1, Math.floor(N / 2));
  }
  if (key === 'End') {
    currentTable = (Math.floor(N / 2)) - 1;
  }
  index = 2 * currentTable;
  a = pairings[index];
  b = pairings[index + 1];
  if (indexOf.call('0 1q2w3e4r5t6y7u8', key) >= 0) {
    index = '0 1q2w3e4r5t6y7u8'.indexOf(key);
    if (index <= 2 * GAMES) {
      if (a.res.length < a.col.length) {
        a.res.push(index);
      }
      if (b.res.length < b.col.length) {
        b.res.push(2 * GAMES - index);
      }
      currentTable = modulo(currentTable + 1, Math.floor(N / 2));
    }
  }
  if (key === 'Enter') {
    state = 1 - state;
    if (state === 1) {
      calcT();
    }
  }
  if (indexOf.call('pP', key) >= 0) {
    lotta();
  }
  if (indexOf.call('lL', key) >= 0) {
    DY += 1;
  }
  if (indexOf.call('sS', key) >= 0) {
    DY -= 1;
  }
  return xdraw();
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023\044-Monrad\coffee\monrad.coffee