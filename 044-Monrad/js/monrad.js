// Generated by CoffeeScript 2.7.0
  // import {maxWeightMatching} from './mwmatching.js'

// ALFABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-/' # ½
var Button, DY, N, ROUNDS, adjustForColors, antal, assert, buttons, calcScore, calcT, colorize, copyToClipboard, createAllButtons, createURL, datum, fetchURL, getMet, invert, j, len, lightbulb, lotta, message, moveAllButtons, mw, pair, pairings, persons, prRes, print, range, ref, released, resultat, rond, scorex, setPrompt, setT0, showHeader, showResult, showTables, showType, start, state, sum, sumBW, temp, title, transferResult, txt, updateAllButtons, url,
  indexOf = [].indexOf;

N = 0; // antal personer

ROUNDS = 0; // antal ronder

//ROUND = 0
DY = 30; // radavstånd i pixlar


// States:
// 2 Names
// 3 Tables
// 4 Result

// seed = 14 # Math.random()
// random = ->
// 	seed++
// 	(((Math.sin(seed)/2+0.5)*10000)%100)/100
print = console.log;

range = _.range;

title = '';

datum = '';

persons = []; // stabil, sorterad på id

//nameList = [] # stabil, sorterad på namn
pairings = []; // varierar med varje rond

state = 3;

print('state', state);

rond = 0;

resultat = []; // 012 sorterad på id

antal = 0;

showType = function(a) {
  if (typeof a === 'string') {
    return `'${a}'`;
  } else {
    return a;
  }
};

assert = function(a, b) {
  if (!_.isEqual(a, b)) {
    return print(`Assert failure: ${showType(a)} != ${showType(b)}`);
  }
};

// selectRounds = (n) -> # antal ronder ska vara cirka 150% av antalet matcher i en cup. Samt jämnt.
// 	res = Math.floor 1.50 * Math.log2 n
// 	res += res % 2
// 	if 2*res > n then res -= 1
// 	if n==4 then res = 2
// 	res
// assert 2, selectRounds 4
// assert 3, selectRounds 6
// assert 4, selectRounds 10
// assert 6, selectRounds 12
// assert 6, selectRounds 24
// assert 8, selectRounds 26
// assert 8, selectRounds 60
// assert 10, selectRounds 64
buttons = [[], [], [], [], []];

released = true;

message = ''; //This is a tutorial tournament. Use it or edit the URL'

fetchURL = function(url = location.search) {
  var R, i, j, len, ref, ref1, ref2, ref3, ref4, ref5, res, urlParams;
  res = {};
  urlParams = new URLSearchParams(url);
  persons = [];
  title = urlParams.get('TOUR').replace('_', ' ');
  datum = urlParams.get('DATE') || "";
  ROUNDS = parseInt(urlParams.get('ROUNDS'));
  rond = parseInt(urlParams.get('ROUND'));
  res.NAME = urlParams.get('NAME').replaceAll('_', ' ').split('|');
  res.ELO = urlParams.get('ELO').split('|');
  res.ELO = _.map(res.ELO, function(r) {
    return parseInt(r);
  });
  N = res.NAME.length;
  if (N < 4) {
    print("Error: Number of players must be 4 or more!");
    return;
  }
  if (N > 64) {
    print("Error: Number of players must be 64 or less!");
    return;
  }
  if (res.OPP && res.COL && res.RES) {
    res.OPP = urlParams.get('OPP').split('|');
    res.COL = urlParams.get('COL').split('|');
    res.RES = urlParams.get('RES').split('|');
    if ((((res.NAME.length !== (ref2 = res.OPP.length) && ref2 !== (ref1 = res.COL.length)) && ref1 !== (ref = res.RES.length)) && ref !== res.ELO.length)) {
      print("Error: Illegal number of players in OPP, COL, ELO or RES!");
      return;
    }
    R = res.RES[0].length;
    res.OPP = _.map(res.OPP, function(r) {
      return _.map(r.split(',')); //, (ch) -> ALFABET.indexOf ch
    });
    res.COL = _.map(res.COL, function(r) {
      return _.map(r, function(ch) {
        return {
          B: -1,
          W: 1
        }[ch];
      });
    });
    res.RES = _.map(res.RES, function(r) {
      return _.map(r, function(ch) {
        return parseInt(ch);
      });
    });
    ref3 = range(N);
    for (j = 0, len = ref3.length; j < len; j++) {
      i = ref3[j];
      if (((R !== (ref5 = res.OPP[i].length) && ref5 !== (ref4 = res.COL[i].length)) && ref4 !== res.RES[i].length)) {
        print(`Error: Illegal number of rounds for player ${res.NAME[i]}!`);
        return;
      }
      persons.push({
        id: i,
        name: res.NAME[i],
        col: res.COL[i],
        res: res.RES[i],
        bal: 0,
        opp: res.OPP[i],
        T: [0, 0, 0],
        elo: res.ELO[i]
      });
    }
  } else {
    if (N % 2 === 1) {
      res.NAME.push('-frirond-');
      N += 1;
    }
    // res.NAME = _.shuffle res.NAME
    persons = _.map(range(N), function(i) {
      return {
        id: i,
        name: res.NAME[i],
        elo: res.ELO[i],
        col: '',
        res: '',
        bal: 0,
        opp: [],
        T: []
      };
    });
  }
  //R = selectRounds N
  //nameList = _.sortBy persons, ['name']
  return print(persons);
};

copyToClipboard = function(text) {
  var textarea;
  if (!navigator.clipboard) {
    textarea = document.createElement('textarea');
    textarea.value = text;
    document.boF.appendChild(textarea);
    textarea.select();
    document.execCommand('copy');
    document.boF.removeChild(textarea);
    return message = 'Urlen har kopierats till klippbordet 1';
  } else {
    return navigator.clipboard.writeText(text).then(() => {
      return message = 'Urlen har kopierats till klippbordet 2';
    }).catch((err) => {
      return message('Kopiering till klippbordet misslyckades');
    });
  }
};

Button = class Button {
  constructor(prompt1, fill1, click) {
    this.prompt = prompt1;
    this.fill = fill1;
    this.click = click;
    this.active = true;
    this.align = CENTER;
  }

  setExtent(x1, y1, w, h) {
    this.x = x1;
    this.y = y1;
    this.w = w;
    this.h = h;
  }

  draw() {
    if (!this.active) {
      return;
    }
    textAlign(this.align, CENTER);
    if (this.prompt === 'next') {
      fill('black');
      rectMode(CENTER);
      rect(this.x, this.y, this.w, this.h);
    }
    fill(this.fill);
    return text(this.prompt, this.x, this.y + 0.5);
  }

  inside(mx, my) {
    return (this.x - this.w / 2 <= mx && mx <= this.x + this.w / 2) && (this.y - this.h / 2 <= my && my <= this.y + this.h / 2) && this.active;
  }

};

createURL = function() {
  var res;
  res = "https://christernilsson.github.io/2023/044-Monrad";
  res += "?TOUR=" + "Wasa SK KM blixt";
  res += "&DATE=" + "2023-11-25";
  res += "&NAME=" + (_.map(persons, function(person) {
    return person.name.replaceAll(" ", "_");
  })).join("|");
  if (persons[0].opp.length > 0) {
    res += "&OPP=" + (_.map(persons, function(person) {
      return (_.map(person.opp, function(opp) {
        return str(opp);
      })).join(",");
    })).join("|");
    res += "&COL=" + (_.map(persons, function(person) {
      return person.col;
    })).join("|");
    res += "&RES=" + (_.map(persons, function(person) {
      return person.res;
    })).join("|");
  }
  return res;
};

sum = function(s) {
  var item, j, len, res;
  res = 0;
  for (j = 0, len = s.length; j < len; j++) {
    item = s[j];
    res += parseInt(item);
  }
  return res;
};

assert(6, sum('012012'));

sumBW = function(s) {
  var item, j, len, res;
  res = 0;
  for (j = 0, len = s.length; j < len; j++) {
    item = s[j];
    res += item === 'B' ? -1 : 1;
  }
  return res;
};

assert(0, sumBW(''));

assert(0, sumBW('BWBWWB'));

assert(-6, sumBW('BBBBBB'));

assert(6, sumBW('WWWWWW'));

scorex = function(person) {
  print('scorex', person);
  return sum(person.res);
};

getMet = function(a, b) {
  var ref;
  return ref = b.id, indexOf.call(persons[a.id].opp, ref) >= 0;
};

colorize = function(persons) {
  var i, j, len, pa, pac, pb, pbc, ref, results;
  ref = range(Math.floor(persons.length / 2));
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    pa = persons[2 * i];
    pb = persons[2 * i + 1];
    pac = 'B W'[pa.mandatory + 1];
    pbc = 'B W'[pb.mandatory + 1];
    if (pac === pbc) {
      if (pa.colorComp <= pb.colorComp) {
        pac = 'W';
      } else {
        pac = 'B';
      }
    }
    pa.col += pac;
    results.push(pb.col += pac === 'W' ? 'B' : 'W');
  }
  return results;
};

pair = function(persons, pairing = []) {
  var a, b, j, len, mandatory, newPairing, newPersons, p, result;
  //print 'persons',persons
  //print 'pairing',pairing
  if (pairing.length === N) {
    return pairing;
  }
  antal += 1;
  a = persons[0];
  for (j = 0, len = persons.length; j < len; j++) {
    b = persons[j];
    if (a === b) {
      continue; // man kan inte möta sig själv
    }
    if (getMet(a, b)) {
      continue; // a och b får ej ha mötts tidigare
    }
    mandatory = a.mandatory + b.mandatory;
    if (2 === Math.abs(mandatory)) {
      continue; // Spelarna kan inte ha samma färg.
    }
    // print "pair: #{pairing.length//2} #{a.id} - #{b.id}"
    newPersons = (function() {
      var k, len1, results;
      results = [];
      for (k = 0, len1 = persons.length; k < len1; k++) {
        p = persons[k];
        if (p !== a && p !== b) {
          results.push(p);
        }
      }
      return results;
    })();
    newPairing = pairing.concat([a, b]);
    result = pair(newPersons, newPairing);
    if (result.length === N) {
      return result;
    }
  }
  return [];
};

adjustForColors = function(pairings) {
  var i, j, len, ref, res;
  res = [];
  ref = range(Math.floor(N / 2));
  //print 'adjustForColors',pairings
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    if (pairings[2 * i].col.length === 0 || 'W' === _.last(pairings[2 * i].col)) {
      res.push(pairings[2 * i]);
      res.push(pairings[2 * i + 1]);
    } else {
      res.push(pairings[2 * i + 1]);
      res.push(pairings[2 * i]);
    }
  }
  //print 'adjustForColors',res
  return res;
};

// lotta_inner = (pairings) -> # personer sorterade
// 	# denna funktion anpassar till maxWeightMatching
// 	arr = []
// 	#print 'aaa',pairings
// 	for a in pairings
// 		for b in pairings
// 			if a.id >= b.id then continue
// 			if getMet a, b then continue
// 			mandatory = a.mandatory + b.mandatory
// 			if Math.abs(mandatory) == 2 then continue # Spelarna kan inte ha samma färg.
// 			arr.push([a.id+1, b.id+1, 1000 - Math.abs(scorex(a) - scorex(b))])
// 	print('arr',arr)
// 	z = maxWeightMatching arr
// 	print 'z',z
// 	z = z.slice 1 #[1:N+1]
// 	res = []
// 	for i in range N
// 		if i < z[i]-1 then res.concat [i,z[i]-1]
// 	# res är ej sorterad i bordsordning ännu

// 	#print 'adam',res

// 	result = []
// 	for i in range(N//2)
// 		ia = res[2*i]
// 		ib = res[2*i+1]
// 		a = persons[ia]
// 		b = persons[ib]
// 		lst = [scorex(a),scorex(b)]
// 		lst.sort(reverse=True)
// 		result.append([lst,ia,ib])
// 	result.sort(reverse=True)

// 	resultat = []
// 	for i in range(N//2)
// 		[_,ia,ib] = result[i]
// 		resultat.concat [ia,ib]
// 		# a = persons[ia]
// 		# b = persons[ib]
// 		# pa = scorex(a) # sum(a['result'])/2
// 		# pb = scorex(b) # sum(b['result'])/2
// 		# print('',i+1,' ',pa,a["name"],'         ',b["name"],' ',pb)
// 	resultat
lotta = function() {
  var a, b, colorSum, i, j, k, latest, latest2, len, len1, p, ref, start;
  print('lotta');
// prepare pairing
  for (j = 0, len = persons.length; j < len; j++) {
    p = persons[j];
    colorSum = sumBW(p.col);
    latest = p.col.length === 0 ? '' : _.last(p.col);
    latest2 = p.col.length < 2 ? '' : sumBW(_.slice(p.col, p.col.length - 2));
    p.mandatory = 0;
    if (colorSum <= -1 || latest2 === -2) {
      p.mandatory = 1;
    }
    if (colorSum >= 1 || latest2 === 2) {
      p.mandatory = -1;
    }
    p.colorComp = [
      colorSum,
      latest // fundera på ordningen här.
    ];
  }
  calcScore();
  if (rond === 0) {
    pairings = persons;
    print('pairings', pairings);
  } else {
    //pairings = lotta_inner pairings
    pairings = _.sortBy(persons, ['score']);
    pairings = pairings.reverse();
    start = new Date();
    antal = 0;
    pairings = pair(pairings);
    print('pairings', pairings);
    //pairings = lotta_inner pairings
    print(rond, `${antal} ${new Date() - start} milliseconds`);
  }
  colorize(pairings);
  pairings = adjustForColors(pairings);
  ref = range(Math.floor(N / 2));
  for (k = 0, len1 = ref.length; k < len1; k++) {
    i = ref[k];
    a = pairings[2 * i];
    b = pairings[2 * i + 1];
    a.opp.push(b.id);
    b.opp.push(a.id);
  }
  state = 3;
  updateAllButtons();
  print('state', state);
  return print({'pairings efter lottning': 'pairings efter lottning', pairings});
};

prRes = function(score) {
  var a, b;
  score = parseInt(score);
  if (score === 1) {
    return '½';
  }
  a = `${Math.floor(score / 2)}`;
  b = score % 2 === 1 ? '½' : '';
  return a + b;
};

assert('0', prRes('0'));

assert('½', prRes('1'));

assert('1', prRes('2'));

assert('1½', prRes(3));

assert('10', prRes(20));

assert('10½', prRes(21));

invert = function(arr) {
  var i, j, len, ref, res;
  res = [];
  ref = range(arr.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    res[arr[i]] = i;
  }
  return res;
};

assert([0, 1, 2, 3], invert([0, 1, 2, 3]));

assert([3, 2, 0, 1], invert([2, 3, 1, 0]));

calcScore = function() {
  var j, len, person, results;
  results = [];
  for (j = 0, len = persons.length; j < len; j++) {
    person = persons[j];
    results.push(person.score = parseInt(sum(person.res)));
  }
  return results;
};

setT0 = function(p, q) {
  var r;
  if (indexOf.call(persons[p].opp, q) >= 0) {
    r = persons[p].opp.indexOf(q);
    return persons[p].T[0] = persons[p].res[r];
  }
};

calcT = function() {
  var i, j, k, key, len, len1, p, person, q, ref, results, scores;
  // T ska beräknas först när allt är klart!
  // Beräkna T1 bara för de poänggrupper som har exakt två personer och då enbart om de har mött varandra.
  // Oklart om detta används för grupper med t ex tre personer. Låg sannolikhet att alla mött varandra.
  scores = {};
  ref = range(persons.length);
  for (j = 0, len = ref.length; j < len; j++) {
    p = ref[j];
    person = persons[p];
    key = sum(person.res);
    if (key in scores) {
      scores[key].push(p);
    } else {
      scores[key] = [p];
    }
    person.T[0] = 0;
  }
  for (key in scores) {
    if (scores[key].length === 2) {
      [p, q] = scores[key];
      setT0(p, q);
      setT0(q, p);
    }
  }
  results = [];
  for (k = 0, len1 = persons.length; k < len1; k++) {
    p = persons[k];
    p.T[1] = p.res.split("").filter((x) => {
      return x === '2';
    }).length;
    p.T[2] = 0;
    results.push((function() {
      var l, len2, ref1, results1;
      ref1 = p.opp;
      results1 = [];
      for (l = 0, len2 = ref1.length; l < len2; l++) {
        i = ref1[l];
        results1.push(p.T[2] += sum(persons[i].res)); // Buchholz: summan av motståndarnas poäng
      }
      return results1;
    })());
  }
  return results;
};

mw = function(x) {
  return x / 1000 * width; // (milliWidth)
};


//########## GUI ############
showHeader = function(header) {
  var y;
  y = DY / 2;
  textAlign(CENTER, CENTER);
  txt(`${title} ${datum}`, mw(7), y, LEFT, 'black');
  txt(header, mw(500), y, CENTER);
  return txt(rond + 1, mw(900), y, RIGHT);
};

txt = function(value, x, y, align = null, color = null) {
  if (align) {
    textAlign(align, CENTER);
  }
  if (color) {
    fill(color);
  }
  return text(value, x, y);
};

// showNames = ->
// 	showHeader 'Names'
// 	textSize 0.5 * DY
// 	txt 'Table Name',mw(  5),DY*1.5,LEFT
// 	txt 'Table Name',mw(505),DY*1.5,LEFT
// 	for person,i in pairings
// 		x = mw(500) * (person.id // (N//2))
// 		y = DY * (2.5 + person.id % (N//2))
// 		bord = 1 + i//2
// 		fill if 'B' == _.last person.col then 'black' else 'white'
// 		txt bord,0.75*DY+x,y,RIGHT
// 		txt person.name,DY+x,y,LEFT

// 	buttons[3][0].active = false
showTables = function() {
  var a, b, i, j, len, nr, pa, pb, ref, results, y;
  showHeader('Tables');
  y = 1.5 * DY;
  txt('#', mw(75), y, CENTER, 'white');
  txt('Score', mw(150), y);
  txt('White', mw(200), y, LEFT);
  txt('Result', mw(500), y, CENTER, 'lightgray');
  txt('Black', mw(600), y, LEFT, 'black');
  txt('Score', mw(850), y);
  txt('#', mw(925), y);
  ref = range(Math.floor(N / 2));
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    y = DY * (i + 2.5);
    a = pairings[2 * i];
    b = pairings[2 * i + 1];
    pa = sum(a.res);
    pb = sum(b.res);
    nr = i + 1;
    txt(nr, mw(75), y, CENTER, 'white');
    txt(prRes(pa), mw(150), y);
    txt('-', mw(500), y, CENTER, 'lightgray');
    txt(prRes(pb), mw(850), y, CENTER, 'black');
    results.push(txt(nr, mw(925), y));
  }
  return results;
};

lightbulb = function(color, x, y, result, opponent) {
  var strokeWeight;
  push();
  fill('red gray green'.split(' ')[result]);
  circle(x, y, 0.9 * DY);
  fill({
    B: 'black',
    W: 'white'
  }[color]);
  textSize(DY * 0.5);
  if (result === '1' && color === 'W') {
    //stroke 'black'
    strokeWeight = 1;
  } else {
    noStroke();
    strokeWeight = 0;
  }
  txt(1 + opponent, x, y + 2, CENTER);
  return pop();
};

showResult = function() {
  var i, inv, j, k, l, len, len1, len2, p, person, r, ref, ref1, results, score, temp, x, y;
  showHeader('Result');
  if (pairings.length === 0) {
    txt("This round can't be paired! (Too many rounds)", width / 2, height / 2, CENTER);
    return;
  }
  noStroke();
  calcT();
  calcScore();
  temp = _.sortBy(persons, ['score', 'T']);
  temp = temp.reverse();
  inv = (function() {
    var j, len, results;
    results = [];
    for (j = 0, len = temp.length; j < len; j++) {
      p = temp[j];
      results.push(p.id);
    }
    return results;
  })();
  inv = invert(inv);
  y = 1.5 * DY;
  textAlign(CENTER);
  ref = range(rond);
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    txt(r + 1, mw(330) + DY * r, y);
  }
  txt("Score", mw(850), y);
  txt("D", mw(900), y);
  txt("W", mw(930), y);
  txt("B", mw(960), y);
  fill('white');
  textSize(DY * 0.5);
  results = [];
  for (i = k = 0, len1 = temp.length; k < len1; i = ++k) {
    person = temp[i];
    y = DY * (i + 2.5);
    txt(1 + i, mw(40), y, RIGHT);
    txt(person.name, mw(50), y, LEFT);
    ref1 = range(rond + 1);
    for (l = 0, len2 = ref1.length; l < len2; l++) {
      r = ref1[l];
      x = mw(330) + DY * r;
      lightbulb(person.col[r][0], x, y, person.res[r], inv[person.opp[r]]);
    }
    score = prRes(sum(person.res));
    txt(score, mw(850), y, CENTER, 'white');
    txt(prRes(person.T[0]), mw(900), y);
    txt(person.T[1], mw(930), y);
    results.push(txt(prRes(person.T[2]), mw(960), y));
  }
  return results;
};

setPrompt = function(button, prompt) {
  var j, len, ref;
  button.prompt = button.prompt === prompt ? '-' : prompt;
  ref = buttons[3].slice(1);
  for (j = 0, len = ref.length; j < len; j++) {
    button = ref[j];
    if (button.prompt === '-') {
      buttons[3][0].active = false;
      return;
    }
  }
  return buttons[3][0].active = true;
};

window.windowResized = function() {
  DY = 30; // mw 50
  if (state < 4) {
    resizeCanvas(windowWidth, DY * (Math.floor(N / 2) + 2));
  } else {
    resizeCanvas(windowWidth, DY * (N + 2));
  }
  return moveAllButtons();
};

transferResult = function() {
  var button, i, j, len, ref, results, white;
  ref = range(Math.floor(N / 2));
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    button = buttons[3][2 + 3 * i];
    white = {
      '1 - 0': 2,
      '½ - ½': 1,
      '0 - 1': 0
    }[button.prompt];
    pairings[2 * i + 0].res += "012"[white];
    pairings[2 * i + 1].res += "012"[2 - white];
    results.push(button.prompt = '-');
  }
  return results;
};

moveAllButtons = function() {
  var i, j, len, ref, results, y;
  buttons[2][0].setExtent(mw(950), 0.45 * DY, mw(60), 0.55 * DY);
  buttons[3][0].setExtent(mw(950), 0.45 * DY, mw(60), 0.55 * DY);
  buttons[4][0].setExtent(mw(950), 0.45 * DY, mw(60), 0.55 * DY);
  ref = range(Math.floor(N / 2));
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    y = DY * (i + 2.5);
    buttons[3][3 * i + 1].setExtent(mw(200), y, mw(200), 30);
    buttons[3][3 * i + 2].setExtent(mw(500), y, mw(200), 30);
    results.push(buttons[3][3 * i + 3].setExtent(mw(600), y, mw(200), 30));
  }
  return results;
};

updateAllButtons = function() {
  var black, i, j, len, ref, results, white;
  ref = range(Math.floor(N / 2));
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    white = pairings[2 * i + 0];
    black = pairings[2 * i + 1];
    buttons[3][3 * i + 1].prompt = white.name;
    buttons[3][3 * i + 1].align = LEFT;
    buttons[3][3 * i + 2].prompt = '-';
    buttons[3][3 * i + 3].prompt = black.name;
    results.push(buttons[3][3 * i + 3].align = LEFT);
  }
  return results;
};

createAllButtons = function() {
  var i, j, len, n, ref;
  buttons = [[], [], [], [], []];
  buttons[2].push(new Button('next', 'yellow', function() {
    state = 3;
    print('state', state);
    return updateAllButtons();
  }));
  buttons[3] = [];
  buttons[3].push(new Button('next', 'yellow', function() {
    state = 4;
    print('state', state);
    transferResult();
    return windowResized();
  }));
  ref = range(Math.floor(N / 2));
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    n = buttons[3].length;
    (function(n) {
      buttons[3].push(new Button('white', 'white', function() {
        return setPrompt(buttons[3][n + 1], '1 - 0');
      }));
      buttons[3].push(new Button('-', 'lightgray', function() {
        return setPrompt(buttons[3][n + 1], '½ - ½');
      }));
      return buttons[3].push(new Button('black', 'black', function() {
        return setPrompt(buttons[3][n + 1], '0 - 1');
      }));
    })(n);
  }
  buttons[4].push(new Button('next', 'yellow', function() {
    var s;
    resizeCanvas(windowWidth, DY * (Math.floor(N / 2) + 2));
    s = createURL();
    print(s);
    copyToClipboard(s);
    if (rond < ROUNDS - 1) {
      rond += 1;
      lotta();
      return print({pairings});
    }
  }));
  return print(`${buttons[3].length + 2} buttons created`);
};

if (location.search === '') {
  title = 'Tutorial Tournament';
  datum = new Date();
  datum = datum.toISOString().split('T')[0];
  url = `?T=${title.replace(" ", "_")}&NAME=ANDERSSON_Anders|BENGTSSON_Bertil|CARLSEN_Christer|DANIELSSON_Daniel|ERIKSSON_Erik|FRANSSON_Ferdinand|GREIDER_Göran|HARALDSSON_Helge`;
  location.href = url;
} else {
  fetchURL();
  pairings = persons;
}

window.setup = function() {
  createCanvas(windowWidth, windowHeight);
  createAllButtons();
  moveAllButtons();
  // print N + ' players ' + R + ' rounds'
  textAlign(CENTER, CENTER);
  lotta();
  return updateAllButtons();
};

window.draw = function() {
  var button, j, len, ref;
  background('gray');
  ref = buttons[state];
  for (j = 0, len = ref.length; j < len; j++) {
    button = ref[j];
    button.draw();
  }
  // if state <= 1 then text "State #{state}",100,100
  // else if state == 2 then showNames()
  if (state === 3) {
    return showTables();
  } else if (state === 4) {
    return showResult();
  }
};

window.mousePressed = function(event) {
  var button, j, len, ref;
  event.preventDefault();
  if (!released) {
    return;
  }
  released = false;
  ref = buttons[state];
  for (j = 0, len = ref.length; j < len; j++) {
    button = ref[j];
    if (button.inside(mouseX, mouseY)) {
      button.click();
    }
  }
  return false;
};

window.mouseReleased = function(event) {
  event.preventDefault();
  released = true;
  return false;
};

//############################

// N = 16
// for i in range N
// 	persons.push { id:i, name:i, col:"", res:"", score:0, opp:[], T:[0,0,0] }
start = new Date();

ref = range(0);
// N//2
for (j = 0, len = ref.length; j < len; j++) {
  rond = ref[j];
  lotta();
  // for i in range N//2
  // a = pairings[2*i+0]
  // b = pairings[2*i+1]
  // z = random()
  // if z < 0.1 then res = 1
  // else if z < 0.5 then res =  0
  // else res = 2
  // a.res += res.toString()
  // b.res += (2-res).toString()
  print('persons', persons);
}

print(`${new Date() - start} milliseconds`);

calcT();

temp = _.sortBy(persons, ['score', 'T']);

temp = temp.reverse();

print(temp);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023\044-Monrad\coffee\monrad.coffee