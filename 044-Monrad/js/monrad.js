// Generated by CoffeeScript 2.5.1
  // T1 är inbördes möte. Används bara för att särskilja två spelare
  // T2 är antal vinster
  // T3 är Buchholz. Summan av motståndarnas poäng
var ALFABET, N, R, a, antal, b, calcScore, calcTB, colorSum, colorize, createURL, fejkaData, fetchURL, färg, getMet, i, ids, invert, j, k, l, latest, latest2, len, len1, len2, lotta, nameList, p, persons, prRes, print, random, range, ref, ref1, res, rond, score, seed, setT1, spara, start, sum, temp, visaBordslista, visaLottning, visaNamnlista, visaResultat, x,
  indexOf = [].indexOf;

ALFABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-/';

N = 0; // antal personer

R = 0; // antal ronder

seed = 12; // Math.random()

random = function() {
  return (((Math.sin(seed++) / 2 + 0.5) * 10000) % 100) / 100;
};

print = console.log;

range = _.range;

persons = [];

nameList = [];

createURL = function() {
  var res;
  res = "";
  res += "?T=" + "Wasa SK KM blixt";
  res += "&D=" + "2023-11-25";
  res += "&N=" + (_.map(persons, function(person) {
    return person.name.replaceAll(" ", "_");
  })).join("|");
  if (persons[0].opps.length > 0) {
    res += "&O=" + (_.map(persons, function(person) {
      return (_.map(person.opps, function(opp) {
        return ALFABET[opp];
      })).join("");
    })).join("|");
    res += "&C=" + (_.map(persons, function(person) {
      return (_.map(person.color, function(c) {
        return "B W"[c + 1];
      })).join("");
    })).join("|");
    res += "&R=" + (_.map(persons, function(person) {
      return person.result.join("");
    })).join("|");
  }
  return res;
};

fetchURL = function() {
  var i, j, k, len, len1, ref, ref1, ref2, ref3, ref4, ref5, res, urlParams;
  res = {};
  urlParams = new URLSearchParams(window.location.search);
  persons = [];
  res.T = urlParams.get('T');
  res.D = urlParams.get('D');
  res.N = urlParams.get('N').replaceAll('_', ' ').split('|');
  N = res.N.length;
  if (!((4 <= N && N <= 64))) {
    print("Error: Number players must be between 4 and 64!");
    return;
  }
  if (res.O && res.C && res.R) {
    res.O = urlParams.get('O').split('|');
    res.C = urlParams.get('C').split('|');
    res.R = urlParams.get('R').split('|');
    if (((res.N.length !== (ref1 = res.O.length) && ref1 !== (ref = res.C.length)) && ref !== res.R.length)) {
      print("Error: Illegal number of players in O, C or R!");
      return;
    }
    R = res.R[0].length;
    res.O = _.map(res.O, function(r) {
      return _.map(r, function(ch) {
        return ALFABET.indexOf(ch);
      });
    });
    res.C = _.map(res.C, function(r) {
      return _.map(r, function(ch) {
        return {
          B: -1,
          W: 1
        }[ch];
      });
    });
    res.R = _.map(res.R, function(r) {
      return _.map(r, function(ch) {
        return parseInt(ch);
      });
    });
    ref2 = range(N);
    for (j = 0, len = ref2.length; j < len; j++) {
      i = ref2[j];
      if (((R !== (ref4 = res.O[i].length) && ref4 !== (ref3 = res.C[i].length)) && ref3 !== res.R[i].length)) {
        print(`Error: Illegal number of rounds for player ${res.N[i]}!`);
        return;
      }
      persons.push({
        id: i,
        score: 0,
        name: res.N[i],
        opps: res.O[i],
        color: res.C[i],
        result: res.R[i],
        T1: 0,
        T2: 0,
        T3: 0
      });
    }
  } else {
    ref5 = range(N);
    for (k = 0, len1 = ref5.length; k < len1; k++) {
      i = ref5[k];
      persons.push({
        id: i,
        score: 0,
        name: res.N[i],
        opps: [],
        color: [],
        result: []
      });
    }
    R = Math.round(1.5 * Math.log2(N)); // antal ronder
    if (N < 10) {
      return R = 3;
    }
  }
};

fejkaData = function() {
  var efternamn, förnamn, i, j, len, namn, ref, results;
  förnamn = 'Adam Bert Curt Dana Erik Fina Gorm Hans'.split(" ");
  efternamn = _.map(förnamn, function(namn) {
    return namn + "sson";
  });
  persons = [];
  ref = range(64);
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    namn = förnamn[Math.floor(i / 8)] + ' ' + efternamn[i % 8];
    results.push(persons.push({
      id: i,
      score: 0,
      name: namn,
      opps: [],
      color: [],
      result: [],
      T1: 0,
      T2: 0,
      T3: 0
    }));
  }
  return results;
};

fetchURL();

//fejkaData()
start = new Date();

sum = function(arr) {
  var item, j, len, res;
  res = 0;
  for (j = 0, len = arr.length; j < len; j++) {
    item = arr[j];
    res += item;
  }
  return res;
};

spara = function(name) {
  return persons.push({
    score: 0,
    id: persons.length,
    name: name,
    opps: [],
    color: [],
    mandatory: 0,
    colorComp: [],
    result: [],
    T1: 0,
    T2: 0,
    T3: 0
  });
};

//for i in range 16
//	spara(i)

// for name in 'Adam Bert Curt Dana Erik Fina Gorm Hans'.split " "
// 	spara name
//spara(name) for name in 'Adam Bert Curt Dana Erik Falk Gran Hans IIII JJJJ KKKK LLLL MMMM NNNN OOOO PPPP QQQQ RRRR SSSS TTTT'.split(" ")
//for person in persons
//	print person
print(N + ' players ' + R + ' rounds');

print();

score = function(p) {
  return sum(persons[p].result);
};

getMet = function(a, b) {
  return indexOf.call(persons[a].opps, b) >= 0;
};

färg = function(i) {
  if (i === 1) {
    return 'W';
  } else {
    return "B";
  }
};

// Tag fram lista för varje spelare med personer man inte mött
colorize = function(ids) {
  var i, j, len, pa, pac, pb, ref, results;
  ref = range(Math.floor(ids.length / 2));
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    pa = persons[ids[2 * i]];
    pb = persons[ids[2 * i + 1]];
    if (pa.mandatory) {
      pac = pa.mandatory;
    } else if (pb.mandatory) {
      pac = -pb.mandatory;
    } else if (pa.colorComp < pb.colorComp) {
      pac = 1;
    } else {
      pac = -1;
    }
    pa.color.push(pac);
    results.push(pb.color.push(-pac));
  }
  return results;
};

lotta = function(ids, pairing = []) {
  var a, b, id, j, k, len, len1, mandatory, newPairing, newids, result;
  if (pairing.length === N) {
    return pairing;
  }
// a är ett personindex
  for (j = 0, len = ids.length; j < len; j++) {
    a = ids[j];
// b är ett personindex
    for (k = 0, len1 = ids.length; k < len1; k++) {
      b = ids[k];
      if (a === b) {
        continue; // man kan inte möta sig själv
      }
      if (getMet(a, b)) {
        continue; // a och b får ej ha mötts tidigare
      }
      mandatory = persons[a].mandatory + persons[b].mandatory;
      if (2 === Math.abs(mandatory)) {
        continue; // Spelarna kan inte ha samma färg.
      }
      newids = (function() {
        var l, len2, results;
        results = [];
        for (l = 0, len2 = ids.length; l < len2; l++) {
          id = ids[l];
          if (id !== a && id !== b) {
            results.push(id);
          }
        }
        return results;
      })();
      newPairing = pairing.concat([a, b]);
      result = lotta(newids, newPairing);
      if (result.length === N) {
        return result;
      }
    }
  }
  return [];
};

visaNamnlista = function(rond, ids) {
  var bord, i, j, len, person, ref;
  print('=== Namelist Round', rond + 1, '===');
  print('Table Colour Name');
  ids = invert(ids);
  ref = range(N);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    person = persons[nameList[i]];
    bord = (1 + Math.floor(ids[i] / 2)).toString().padStart(2);
    print(`${bord}${färg(_.last(person.color))} ${person.name}`);
  }
  return print();
};

visaBordslista = function(rond, ids) {
  var a, b, i, j, len, nr, pa, pb, ref;
  print('=== Tables Round', rond + 1, '===');
  print(' # Score White  Remis  Black Score');
  ref = range(Math.floor(N / 2));
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    a = persons[ids[2 * i]];
    b = persons[ids[2 * i + 1]];
    pa = sum(a.result);
    pb = sum(b.result);
    nr = (i + 1).toString();
    if (nr.length === 1) {
      nr = ' ' + nr;
    }
    print(nr, ' ', prRes(pa).padEnd(2), a.name.padEnd(20), '-', b.name.padEnd(20), ' ', prRes(pb));
  }
  return print();
};

visaLottning = function(ids) {
  var j, len, p, person, results;
  print('Lottning');
  results = [];
  for (j = 0, len = ids.length; j < len; j++) {
    p = ids[j];
    results.push(person = persons[p]);
  }
  return results;
};

prRes = function(score) {
  var remis;
  if (score % 2 === 1) {
    remis = '½';
  } else {
    remis = '';
  }
  score = (Math.floor(score / 2)).toString();
  //if score == "0" then score =''
  score = score + remis;
  if (score === '0½') {
    score = '½';
  }
  return score;
};

// score.replace('.5','½').replace('.0',' ')
invert = function(arr) {
  var i, j, len, ref, res;
  res = [0, 0, 0, 0, 0, 0, 0, 0];
  ref = range(arr.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    res[arr[i]] = i;
  }
  return res;
};

antal = function(p, color) {
  var c;
  return sum([
    (function() {
      var j,
    len,
    ref,
    results;
      ref = p.color;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        c = ref[j];
        if (color === c) {
          results.push(1);
        }
      }
      return results;
    })()
  ]);
};

visaResultat = function(rond, ids) {
  var T1, T2, T3, i, inv, j, len, nr, p, pn, results, sRonder, temp;
  calcTB(rond);
  calcScore();
  sRonder = _.map(range(rond + 1), function(i) {
    return `R${i + 1}`.padStart(5);
  });
  sRonder = sRonder.join('');
  temp = _.sortBy(persons, ['score', 'T1', 'T2', 'T3']);
  ids = _.map(temp, function(person) {
    return person.id;
  });
  ids = ids.reverse();
  inv = invert(ids); // pga korstabell
  print('=== Result after round', rond + 1, '===');
  print(' # Name               ', sRonder, 'Score T1 T2 T3');
  results = [];
  for (j = 0, len = ids.length; j < len; j++) {
    i = ids[j];
    p = persons[i];
    T1 = prRes(p.T1);
    T2 = p.T2;
    T3 = prRes(p.T3);
    sRonder = _.map(range(rond + 1), function(r) {
      return `${1 + inv[p.opps[r]]}${färg(p.color[r])[0]}${prRes(p.result[r])}`.padStart(5);
    });
    sRonder = sRonder.join('');
    nr = (1 + inv[p.id]).toString();
    if (nr.length === 1) {
      nr = ' ' + nr;
    }
    pn = p.name.padEnd(20);
    score = prRes(sum(p.result)).padEnd(2);
    results.push(print(`${nr} ${pn} ${sRonder}   ${score}   ${T1}  ${T2} ${T3}`));
  }
  return results;
};

calcScore = function() {
  var j, len, person, results;
  results = [];
  for (j = 0, len = persons.length; j < len; j++) {
    person = persons[j];
    results.push(person.score = parseInt(sum(person.result)));
  }
  return results;
};

setT1 = function(p, q) {
  var rond;
  if (indexOf.call(persons[p].opps, q) >= 0) {
    rond = persons[p].opps.indexOf(q);
    return persons[p].T1 = persons[p].result[rond];
  }
};

calcTB = function(rond) {
  var i, j, k, key, len, len1, p, person, q, ref, results, scores;
  // T ska beräknas först när allt är klart!
  // Beräkna T1 bara för de poänggrupper som har exakt två personer och då enbart om de har mött varandra.
  // Oklart om detta används för grupper med t ex tre personer. Låg sannolikhet att alla mött varandra.
  scores = {};
  ref = range(persons.length);
  for (j = 0, len = ref.length; j < len; j++) {
    p = ref[j];
    person = persons[p];
    key = sum(person.result);
    if (key in scores) {
      scores[key].push(p);
    } else {
      scores[key] = [p];
    }
    person.T1 = 0;
  }
  for (key in scores) {
    if (scores[key].length === 2) {
      [p, q] = scores[key];
      setT1(p, q);
      setT1(q, p);
    }
  }
  results = [];
  for (k = 0, len1 = persons.length; k < len1; k++) {
    p = persons[k];
    p.T2 = p.result.filter((x) => {
      return x === 2;
    }).length;
    p.T3 = 0;
    results.push((function() {
      var l, len2, ref1, results1;
      ref1 = p.opps;
      results1 = [];
      for (l = 0, len2 = ref1.length; l < len2; l++) {
        i = ref1[l];
        results1.push(p.T3 += sum(persons[i].result)); // Buchholz: summan av motståndarnas poäng
      }
      return results1;
    })());
  }
  return results;
};

print(persons);

ref = range(R);
for (j = 0, len = ref.length; j < len; j++) {
  rond = ref[j];
  nameList = range(persons.length);
  nameList.sort(function(p) {
    return persons[p].name;
  });
  for (k = 0, len1 = persons.length; k < len1; k++) {
    p = persons[k];
    colorSum = sum(p.color);
    latest = p.color.length === 0 ? 0 : _.last(p.color);
    latest2 = p.color.length < 2 ? 0 : sum(_.slice(p.color, p.color.length - 2));
    p.mandatory = 0;
    if (colorSum <= -1 || latest2 === -2) {
      p.mandatory = 1;
    }
    if (colorSum >= 1 || latest2 === 2) {
      p.mandatory = -1;
    }
    p.colorComp = [
      colorSum,
      latest // fundera på ordningen här.
    ];
  }
  calcScore();
  temp = _.sortBy(persons, ['score']);
  ids = _.map(temp, function(person) {
    return person.id;
  });
  // ids = range N
  // ids = _.sortBy ids, (p) => ['score'] #['score', 'T1', 'T2', 'T3']
  ids = ids.reverse();
  print({ids});
  ids = lotta(ids, []);
  if (ids.length === 0) {
    print("Denna rond kan inte lottas! (Troligen för många ronder)");
    break;
  }
  colorize(ids);
  visaNamnlista(rond, ids);
  print(temp.reverse());
  visaBordslista(rond, ids);
  ref1 = range(Math.floor(N / 2));
  for (l = 0, len2 = ref1.length; l < len2; l++) {
    i = ref1[l];
    a = ids[2 * i];
    b = ids[2 * i + 1];
    persons[a].opps.push(b);
    persons[b].opps.push(a);
    x = random();
    if (x < 0.1) {
      res = [1, 1];
    } else if (x < 0.5) {
      res = [0, 2];
    } else {
      res = [2, 0];
    }
    persons[a].result.push(res[0]);
    persons[b].result.push(res[1]);
  }
  visaLottning(ids);
  if (rond === R - 1) {
    visaResultat(rond, ids);
  }
}

print(createURL());

print();

print(new Date() - start);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023\044-Monrad\coffee\monrad.coffee