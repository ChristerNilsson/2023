// Generated by CoffeeScript 2.7.0
var Monrad;

Monrad = class Monrad {
  lotta() {
    var a, b, i, j, k, len, len1, p, ref, ref1, start, state, timestamp;
    print('Lottning av rond ', this.round);
    document.title = 'Round ' + (this.round + 1);
    print(this.players);
    ref = this.players;
    for (j = 0, len = ref.length; j < len; j++) {
      p = ref[j];
      if (p.res.length !== p.col.length) {
        print('avbrutet!');
        return;
      }
    }
    if (this.round === 0) {
      this.pairings = this.players;
      print('Apairings', this.pairings);
      this.round = 1;
    } else {
      timestamp = new Date().toLocaleString('se-SE');
      print("lotta ROUND", this.round);
      print('tournament', tournament);
      downloadFile(tournament.makeTableFile(" for " + this.name + ` in Round ${this.round}    ${timestamp}`), this.name + ` Round ${this.round}.txt`);
      downloadFile(this.createURL(), "URL for " + this.name + ` Round ${this.round}.txt`);
      this.round += 1;
      //			@pairings = _.sortBy @players, (player) -> [player.score(), -player.elo]
      this.pairings = _.sortBy(this.players, function(player) {
        return [-player.elo];
      });
      if (this.round % 2 === 0) {
        this.pairings = this.pairings.reverse();
      }
      start = new Date();
      this.pairings = this.pair(this.pairings);
      print('Bpairings', this.pairings);
      print(this.round, `${new Date() - start} milliseconds`);
    }
    //colorize @pairings
    //assignColors @pairings
    this.adjustForColors();
    ref1 = range(Math.floor(N / 2));
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      i = ref1[k];
      a = this.pairings[2 * i];
      b = this.pairings[2 * i + 1];
      a.opp.push(b.id);
      b.opp.push(a.id);
      //a.res += ' '
      //b.res += ' '
      this.assignColors(a, b);
    }
    state = 0;
    print({'pairings after pairing': 'pairings after pairing', pairings: this.pairings});
    return xdraw();
  }

  flip(p0, p1) { // p0 byter fÃ¤rg, p0 anpassar sig
    var col0, col1;
    print('flip', p0.col, p1.col);
    col0 = _.last(p0.col);
    col1 = col0;
    col0 = other(col0);
    p0.col += col0;
    return p1.col += col1;
  }

  assignColors(p0, p1) {
    var balans, col0, col1;
    if (p0.col.length === 0) {
      col1 = this.first[p0.id % 2];
      col0 = other(col1);
      p0.col += col0;
      return p1.col += col1;
    } else {
      balans = p0.balans() + p1.balans();
      if (balans === 0) {
        return this.flip(p0, p1);
      } else if (2 === abs(balans)) {
        if (2 === abs(p0.balans())) {
          return this.flip(p0, p1);
        } else {
          return this.flip(p1, p0);
        }
      }
    }
  }

  pair(persons, pairing = []) {
    var a, b, j, len, newPairing, newPersons, p, result;
    if (pairing.length === N) {
      return pairing;
    }
    a = persons[0];
    for (j = 0, len = persons.length; j < len; j++) {
      b = persons[j];
      if (!ok(a, b)) {
        continue;
      }
      newPersons = (function() {
        var k, len1, results;
        results = [];
        for (k = 0, len1 = persons.length; k < len1; k++) {
          p = persons[k];
          if (p !== a && p !== b) {
            results.push(p);
          }
        }
        return results;
      })();
      newPairing = pairing.concat([a, b]);
      result = this.pair(newPersons, newPairing);
      if (result.length === N) {
        return result;
      }
    }
    return [];
  }

  adjustForColors() {
    var i, j, len, ref, res;
    print('adjustForColors', N, this.pairings.length);
    res = [];
    ref = range(Math.floor(N / 2));
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      if (this.pairings[2 * i].col.length === 0) {
        if (i % 2 === 0) {
          res.push(this.pairings[2 * i + 1]);
          res.push(this.pairings[2 * i]);
        } else {
          res.push(this.pairings[2 * i]);
          res.push(this.pairings[2 * i + 1]);
        }
      } else if ('w' === _.last(this.pairings[2 * i].col)) {
        res.push(this.pairings[2 * i]);
        res.push(this.pairings[2 * i + 1]);
      } else {
        res.push(this.pairings[2 * i + 1]);
        res.push(this.pairings[2 * i]);
      }
    }
    
    // if @pairings[2*i].col.length == 0 or 'w' == _.last @pairings[2*i].col
    // 	res.push @pairings[2*i] # w
    // 	res.push @pairings[2*i+1] # b
    // else
    // 	res.push @pairings[2*i+1] # w
    // 	res.push @pairings[2*i] # b
    return this.pairings = res;
  }

};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ucmFkLmpzIiwic291cmNlUm9vdCI6Ii4uXFwiLCJzb3VyY2VzIjpbImNvZmZlZVxcbW9ucmFkLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQTs7QUFBTSxTQUFOLE1BQUEsT0FBQTtFQUVDLEtBQVEsQ0FBQSxDQUFBO0FBRVQsUUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQTtJQUFFLEtBQUEsQ0FBTSxtQkFBTixFQUEwQixJQUFDLENBQUEsS0FBM0I7SUFDQSxRQUFRLENBQUMsS0FBVCxHQUFpQixRQUFBLEdBQVcsQ0FBQyxJQUFDLENBQUEsS0FBRCxHQUFPLENBQVI7SUFDNUIsS0FBQSxDQUFNLElBQUMsQ0FBQSxPQUFQO0FBQ0E7SUFBQSxLQUFBLHFDQUFBOztNQUNDLElBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFOLEtBQWdCLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBekI7UUFDQyxLQUFBLENBQU0sV0FBTjtBQUNBLGVBRkQ7O0lBREQ7SUFLQSxJQUFHLElBQUMsQ0FBQSxLQUFELEtBQVUsQ0FBYjtNQUNDLElBQUMsQ0FBQSxRQUFELEdBQVksSUFBQyxDQUFBO01BQ2IsS0FBQSxDQUFNLFdBQU4sRUFBa0IsSUFBQyxDQUFBLFFBQW5CO01BQ0EsSUFBQyxDQUFBLEtBQUQsR0FBUyxFQUhWO0tBQUEsTUFBQTtNQU1DLFNBQUEsR0FBWSxJQUFJLElBQUosQ0FBQSxDQUFVLENBQUMsY0FBWCxDQUEwQixPQUExQjtNQUNaLEtBQUEsQ0FBTSxhQUFOLEVBQW9CLElBQUMsQ0FBQSxLQUFyQjtNQUNBLEtBQUEsQ0FBTSxZQUFOLEVBQW1CLFVBQW5CO01BQ0EsWUFBQSxDQUFhLFVBQVUsQ0FBQyxhQUFYLENBQXlCLE9BQUEsR0FBVSxJQUFDLENBQUEsSUFB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R0FBRyxDQUFDLElBQUosQ0FBUyxJQUFDLENBQUEsUUFBUSxDQUFDLENBQUEsR0FBRSxDQUFILENBQWxCLEVBTEk7O0lBVE4sQ0FGRjs7Ozs7Ozs7V0F5QkUsSUFBQyxDQUFBLFFBQUQsR0FBWTtFQTFCSzs7QUF2Rm5CIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgTW9ucmFkXHJcblxyXG5cdGxvdHRhIDogKCkgLT5cclxuXHJcblx0XHRwcmludCAnTG90dG5pbmcgYXYgcm9uZCAnLEByb3VuZFxyXG5cdFx0ZG9jdW1lbnQudGl0bGUgPSAnUm91bmQgJyArIChAcm91bmQrMSlcclxuXHRcdHByaW50IEBwbGF5ZXJzXHJcblx0XHRmb3IgcCBpbiBAcGxheWVyc1xyXG5cdFx0XHRpZiBwLnJlcy5sZW5ndGggIT0gcC5jb2wubGVuZ3RoXHJcblx0XHRcdFx0cHJpbnQgJ2F2YnJ1dGV0ISdcclxuXHRcdFx0XHRyZXR1cm5cclxuXHJcblx0XHRpZiBAcm91bmQgPT0gMFxyXG5cdFx0XHRAcGFpcmluZ3MgPSBAcGxheWVyc1xyXG5cdFx0XHRwcmludCAnQXBhaXJpbmdzJyxAcGFpcmluZ3NcclxuXHRcdFx0QHJvdW5kID0gMVxyXG5cdFx0ZWxzZVxyXG5cclxuXHRcdFx0dGltZXN0YW1wID0gbmV3IERhdGUoKS50b0xvY2FsZVN0cmluZyAnc2UtU0UnXHJcblx0XHRcdHByaW50IFwibG90dGEgUk9VTkRcIixAcm91bmRcclxuXHRcdFx0cHJpbnQgJ3RvdXJuYW1lbnQnLHRvdXJuYW1lbnRcclxuXHRcdFx0ZG93bmxvYWRGaWxlIHRvdXJuYW1lbnQubWFrZVRhYmxlRmlsZShcIiBmb3IgXCIgKyBAbmFtZSArIFwiIGluIFJvdW5kICN7QHJvdW5kfSAgICAje3RpbWVzdGFtcH1cIiksIEBuYW1lICsgXCIgUm91bmQgI3tAcm91bmR9LnR4dFwiXHJcblx0XHRcdGRvd25sb2FkRmlsZSBAY3JlYXRlVVJMKCksIFwiVVJMIGZvciBcIiArIEBuYW1lICsgXCIgUm91bmQgI3tAcm91bmR9LnR4dFwiXHJcblxyXG5cdFx0XHRAcm91bmQgKz0gMVxyXG5cclxuI1x0XHRcdEBwYWlyaW5ncyA9IF8uc29ydEJ5IEBwbGF5ZXJzLCAocGxheWVyKSAtPiBbcGxheWVyLnNjb3JlKCksIC1wbGF5ZXIuZWxvXVxyXG5cdFx0XHRAcGFpcmluZ3MgPSBfLnNvcnRCeSBAcGxheWVycywgKHBsYXllcikgLT4gWy1wbGF5ZXIuZWxvXVxyXG5cclxuXHRcdFx0aWYgQHJvdW5kICUgMiA9PSAwIHRoZW4gQHBhaXJpbmdzID0gQHBhaXJpbmdzLnJldmVyc2UoKVxyXG5cdFx0XHRzdGFydCA9IG5ldyBEYXRlKClcclxuXHJcblx0XHRcdEBwYWlyaW5ncyA9IEBwYWlyIEBwYWlyaW5nc1xyXG5cdFx0XHRwcmludCAnQnBhaXJpbmdzJyxAcGFpcmluZ3NcclxuXHRcdFx0cHJpbnQgQHJvdW5kLCBcIiN7bmV3IERhdGUoKSAtIHN0YXJ0fSBtaWxsaXNlY29uZHNcIlxyXG5cclxuXHRcdCNjb2xvcml6ZSBAcGFpcmluZ3NcclxuXHRcdCNhc3NpZ25Db2xvcnMgQHBhaXJpbmdzXHJcblxyXG5cdFx0QGFkanVzdEZvckNvbG9ycygpXHJcblxyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgTi8vMlxyXG5cdFx0XHRhID0gQHBhaXJpbmdzWzIqaV1cclxuXHRcdFx0YiA9IEBwYWlyaW5nc1syKmkrMV1cclxuXHRcdFx0YS5vcHAucHVzaCBiLmlkXHJcblx0XHRcdGIub3BwLnB1c2ggYS5pZFxyXG5cdFx0XHQjYS5yZXMgKz0gJyAnXHJcblx0XHRcdCNiLnJlcyArPSAnICdcclxuXHRcdFx0QGFzc2lnbkNvbG9ycyBhLGJcclxuXHJcblx0XHRzdGF0ZSA9IDBcclxuXHJcblx0XHRwcmludCB7J3BhaXJpbmdzIGFmdGVyIHBhaXJpbmcnLCBAcGFpcmluZ3N9XHJcblxyXG5cdFx0eGRyYXcoKVxyXG5cclxuXHRmbGlwIDogKHAwLHAxKSAtPiAjIHAwIGJ5dGVyIGbDpHJnLCBwMCBhbnBhc3NhciBzaWdcclxuXHRcdHByaW50ICdmbGlwJyxwMC5jb2wscDEuY29sXHJcblx0XHRjb2wwID0gXy5sYXN0IHAwLmNvbFxyXG5cdFx0Y29sMSA9IGNvbDBcclxuXHRcdGNvbDAgPSBvdGhlciBjb2wwXHJcblx0XHRwMC5jb2wgKz0gY29sMFxyXG5cdFx0cDEuY29sICs9IGNvbDFcclxuXHJcblx0YXNzaWduQ29sb3JzIDogKHAwLHAxKSAtPlxyXG5cdFx0aWYgcDAuY29sLmxlbmd0aCA9PSAwXHJcblx0XHRcdGNvbDEgPSBAZmlyc3RbcDAuaWQgJSAyXVxyXG5cdFx0XHRjb2wwID0gb3RoZXIgY29sMVxyXG5cdFx0XHRwMC5jb2wgKz0gY29sMFxyXG5cdFx0XHRwMS5jb2wgKz0gY29sMVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRiYWxhbnMgPSBwMC5iYWxhbnMoKSArIHAxLmJhbGFucygpXHJcblx0XHRcdGlmIGJhbGFucyA9PSAwIHRoZW4gQGZsaXAgcDAscDFcclxuXHRcdFx0ZWxzZSBpZiAyID09IGFicyBiYWxhbnNcclxuXHRcdFx0XHRpZiAyID09IGFicyBwMC5iYWxhbnMoKSB0aGVuIEBmbGlwIHAwLHAxIGVsc2UgQGZsaXAgcDEscDBcclxuXHJcblx0cGFpciA6IChwZXJzb25zLCBwYWlyaW5nPVtdKSAtPlxyXG5cdFx0aWYgcGFpcmluZy5sZW5ndGggPT0gTiB0aGVuIHJldHVybiBwYWlyaW5nXHJcblx0XHRhICA9IHBlcnNvbnNbMF1cclxuXHRcdGZvciBiIGluIHBlcnNvbnNcclxuXHRcdFx0aWYgbm90IG9rIGEsYiB0aGVuIGNvbnRpbnVlXHJcblx0XHRcdG5ld1BlcnNvbnMgPSAocCBmb3IgcCBpbiBwZXJzb25zIHdoZW4gcCBub3QgaW4gW2EsYl0pXHJcblx0XHRcdG5ld1BhaXJpbmcgPSBwYWlyaW5nLmNvbmNhdCBbYSxiXVxyXG5cdFx0XHRyZXN1bHQgPSBAcGFpciBuZXdQZXJzb25zLG5ld1BhaXJpbmdcclxuXHRcdFx0aWYgcmVzdWx0Lmxlbmd0aCA9PSBOIHRoZW4gcmV0dXJuIHJlc3VsdFxyXG5cdFx0cmV0dXJuIFtdXHJcblxyXG5cdGFkanVzdEZvckNvbG9ycyA6ICgpIC0+XHJcblx0XHRwcmludCAnYWRqdXN0Rm9yQ29sb3JzJyxOLCBAcGFpcmluZ3MubGVuZ3RoXHJcblx0XHRyZXMgPSBbXVxyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgTi8vMlxyXG5cclxuXHRcdFx0aWYgQHBhaXJpbmdzWzIqaV0uY29sLmxlbmd0aCA9PSAwXHJcblx0XHRcdFx0aWYgaSAlIDI9PTAgXHJcblx0XHRcdFx0XHRyZXMucHVzaCBAcGFpcmluZ3NbMippKzFdICMgd1xyXG5cdFx0XHRcdFx0cmVzLnB1c2ggQHBhaXJpbmdzWzIqaV0gIyBiXHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0cmVzLnB1c2ggQHBhaXJpbmdzWzIqaV0gIyB3XHJcblx0XHRcdFx0XHRyZXMucHVzaCBAcGFpcmluZ3NbMippKzFdICMgYlxyXG5cdFx0XHRlbHNlIGlmICd3JyA9PSBfLmxhc3QgQHBhaXJpbmdzWzIqaV0uY29sXHJcblx0XHRcdFx0cmVzLnB1c2ggQHBhaXJpbmdzWzIqaV0gIyB3XHJcblx0XHRcdFx0cmVzLnB1c2ggQHBhaXJpbmdzWzIqaSsxXSAjIGJcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHJlcy5wdXNoIEBwYWlyaW5nc1syKmkrMV0gIyB3XHJcblx0XHRcdFx0cmVzLnB1c2ggQHBhaXJpbmdzWzIqaV0gIyBiXHJcblxyXG5cdFx0XHQjIGlmIEBwYWlyaW5nc1syKmldLmNvbC5sZW5ndGggPT0gMCBvciAndycgPT0gXy5sYXN0IEBwYWlyaW5nc1syKmldLmNvbFxyXG5cdFx0XHQjIFx0cmVzLnB1c2ggQHBhaXJpbmdzWzIqaV0gIyB3XHJcblx0XHRcdCMgXHRyZXMucHVzaCBAcGFpcmluZ3NbMippKzFdICMgYlxyXG5cdFx0XHQjIGVsc2VcclxuXHRcdFx0IyBcdHJlcy5wdXNoIEBwYWlyaW5nc1syKmkrMV0gIyB3XHJcblx0XHRcdCMgXHRyZXMucHVzaCBAcGFpcmluZ3NbMippXSAjIGJcclxuXHJcblx0XHRAcGFpcmluZ3MgPSByZXNcclxuIl19
//# sourceURL=c:\github\2023\044-Monrad\coffee\monrad.coffee