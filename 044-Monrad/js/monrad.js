// Generated by CoffeeScript 2.5.1
var ALFABET, Button, DY, N, R, assert, buttons, calcScore, calcT, colorize, copyToClipboard, createURL, datum, fetchURL, getMet, ids, invert, lightbulb, lotta, message, mw, nameList, pair, persons, prRes, print, range, released, resultat, rond, score, selectRounds, setPrompt, setT0, showHeader, showNames, showResult, showTables, showType, state, sum, sumBW, title, transferResult, txt, updateScreenParameters, url,
  indexOf = [].indexOf;

ALFABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-/';

N = 0; // antal personer

R = 0; // antal ronder

DY = 30; // radavstånd i pixlar


// States:
// 2 Names
// 3 Tables
// 4 Result

//seed = Math.random()
//random = -> (((Math.sin(seed++)/2+0.5)*10000)%100)/100
print = console.log;

range = _.range;

title = '';

datum = '';

persons = [];

nameList = [];

state = 0;

rond = 0;

ids = [];

resultat = [];

showType = function(a) {
  if (typeof a === 'string') {
    return `'${a}'`;
  } else {
    return a;
  }
};

assert = function(a, b) {
  if (!_.isEqual(a, b)) {
    return print(`Assert failure: ${showType(a)} != ${showType(b)}`);
  }
};

selectRounds = function(n) { // antal ronder ska vara cirka 150% av antalet matcher i en cup. Samt jämnt.
  var res;
  res = Math.floor(1.50 * Math.log2(n));
  res += res % 2;
  if (2 * res > n) {
    res -= 1;
  }
  if (n === 4) {
    res = 2;
  }
  return res;
};

assert(2, selectRounds(4));

assert(3, selectRounds(6));

assert(4, selectRounds(10));

assert(6, selectRounds(12));

assert(6, selectRounds(24));

assert(8, selectRounds(26));

assert(8, selectRounds(60));

assert(10, selectRounds(64));

buttons = [[], [], [], [], []];

released = true;

message = ''; //This is a tutorial tournament. Use it or edit the URL'

fetchURL = function(url = window.location.search) {
  var i, j, len, ref, ref1, ref2, ref3, ref4, res, urlParams;
  res = {};
  urlParams = new URLSearchParams(url);
  persons = [];
  title = urlParams.get('T').replace('_', ' ');
  datum = urlParams.get('D') || "";
  res.N = urlParams.get('N').replaceAll('_', ' ').split('|');
  N = res.N.length;
  if (N < 4) {
    print("Error: Number of players must be 4 or more!");
    return;
  }
  if (N > 64) {
    print("Error: Number of players must be 64 or less!");
    return;
  }
  if (res.O && res.C && res.R) {
    res.O = urlParams.get('O').split('|');
    res.C = urlParams.get('C').split('|');
    res.R = urlParams.get('R').split('|');
    if (((res.N.length !== (ref1 = res.O.length) && ref1 !== (ref = res.C.length)) && ref !== res.R.length)) {
      print("Error: Illegal number of players in O, C or R!");
      return;
    }
    R = res.R[0].length;
    res.O = _.map(res.O, function(r) {
      return _.map(r, function(ch) {
        return ALFABET.indexOf(ch);
      });
    });
    res.C = _.map(res.C, function(r) {
      return _.map(r, function(ch) {
        return {
          B: -1,
          W: 1
        }[ch];
      });
    });
    res.R = _.map(res.R, function(r) {
      return _.map(r, function(ch) {
        return parseInt(ch);
      });
    });
    ref2 = range(N);
    for (j = 0, len = ref2.length; j < len; j++) {
      i = ref2[j];
      if (((R !== (ref4 = res.O[i].length) && ref4 !== (ref3 = res.C[i].length)) && ref3 !== res.R[i].length)) {
        print(`Error: Illegal number of rounds for player ${res.N[i]}!`);
        return;
      }
      persons.push({
        id: i,
        n: res.N[i],
        c: res.C[i],
        r: res.R[i],
        s: 0,
        opps: res.O[i],
        T: [0, 0, 0]
      });
    }
  } else {
    if (N % 2 === 1) {
      res.N.push('-frirond-');
      N += 1;
    }
    //res.N = _.shuffle res.N
    persons = _.map(range(N), function(i) {
      return {
        id: i,
        n: res.N[i],
        c: '',
        r: '',
        s: 0,
        opps: [],
        T: []
      };
    });
    print(persons);
    // persons.push {id:i, n: res.N[i], c:'', r:'', s:0, opps:[]}
    return R = selectRounds(N);
  }
};

//if N < 10 then R = 3
copyToClipboard = function(text) {
  var textarea;
  if (!navigator.clipboard) {
    textarea = document.createElement('textarea');
    textarea.value = text;
    document.boF.appendChild(textarea);
    textarea.select();
    document.execCommand('copy');
    document.boF.removeChild(textarea);
    return message = 'Urlen har kopierats till klippbordet 1';
  } else {
    return navigator.clipboard.writeText(text).then(() => {
      return message = 'Urlen har kopierats till klippbordet 2';
    }).catch((err) => {
      return message('Kopiering till klippbordet misslyckades');
    });
  }
};

Button = class Button {
  constructor(prompt1, x1, y1, w, h, click) {
    this.prompt = prompt1;
    this.x = x1;
    this.y = y1;
    this.w = w;
    this.h = h;
    this.click = click;
    this.active = true;
  }

  draw() {
    if (!this.active) {
      return;
    }
    textAlign(CENTER, CENTER);
    rectMode(CENTER);
    fill('black');
    if (this.prompt === 'next') {
      //stroke 'black'
      rect(this.x, this.y, this.w, this.h);
      fill('yellow');
    }
    return text(this.prompt, this.x, this.y + 0.5);
  }

  inside(mx, my) {
    return (this.x - this.w / 2 <= mx && mx <= this.x + this.w / 2) && (this.y - this.h / 2 <= my && my <= this.y + this.h / 2) && this.active;
  }

};

createURL = function() {
  var res;
  res = "https://christernilsson.github.io/2023/044-Monrad";
  res += "?T=" + "Wasa SK KM blixt";
  res += "&D=" + "2023-11-25";
  res += "&N=" + (_.map(persons, function(person) {
    return person.n.replaceAll(" ", "_");
  })).join("|");
  if (persons[0].opps.length > 0) {
    res += "&O=" + (_.map(persons, function(person) {
      return (_.map(person.opps, function(opp) {
        return ALFABET[opp];
      })).join("");
    })).join("|");
    res += "&C=" + (_.map(persons, function(person) {
      return person.c;
    })).join("|");
    res += "&R=" + (_.map(persons, function(person) {
      return person.r;
    })).join("|");
  }
  return res;
};

sum = function(s) {
  var item, j, len, res;
  res = 0;
  for (j = 0, len = s.length; j < len; j++) {
    item = s[j];
    res += parseInt(item);
  }
  return res;
};

assert(6, sum('012012'));

sumBW = function(s) {
  var item, j, len, res;
  res = 0;
  for (j = 0, len = s.length; j < len; j++) {
    item = s[j];
    res += item === 'B' ? -1 : 1;
  }
  return res;
};

assert(0, sumBW('BWBWWB'));

assert(-6, sumBW('BBBBBB'));

assert(6, sumBW('WWWWWW'));

score = function(p) {
  return sum(persons[p].r);
};

getMet = function(a, b) {
  return indexOf.call(persons[a].opps, b) >= 0;
};

colorize = function(ids) {
  var i, j, len, pa, pac, pb, ref, results;
  ref = range(Math.floor(ids.length / 2));
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    pa = persons[ids[2 * i]];
    pb = persons[ids[2 * i + 1]];
    if (pa.mandatory) {
      pac = pa.mandatory === 1 ? 'W' : 'B';
    } else if (pb.mandatory) {
      pac = pa.mandatory === 1 ? 'B' : 'W';
    } else {
      if (pa.colorComp < pb.colorComp) {
        pac = 'W';
      } else {
        pac = 'B';
      }
    }
    pa.c += pac;
    results.push(pb.c += pac === 'W' ? 'B' : 'W');
  }
  return results;
};

pair = function(ids, pairing = []) {
  var a, b, id, j, k, len, len1, mandatory, newPairing, newids, result;
  if (pairing.length === N) {
    return pairing;
  }
// a är ett personid
  for (j = 0, len = ids.length; j < len; j++) {
    a = ids[j];
// b är ett personid
    for (k = 0, len1 = ids.length; k < len1; k++) {
      b = ids[k];
      if (a === b) {
        continue; // man kan inte möta sig själv
      }
      if (getMet(a, b)) {
        continue; // a och b får ej ha mötts tidigare
      }
      mandatory = persons[a].mandatory + persons[b].mandatory;
      if (2 === Math.abs(mandatory)) {
        continue; // Spelarna kan inte ha samma färg.
      }
      newids = (function() {
        var l, len2, results;
        results = [];
        for (l = 0, len2 = ids.length; l < len2; l++) {
          id = ids[l];
          if (id !== a && id !== b) {
            results.push(id);
          }
        }
        return results;
      })();
      newPairing = pairing.concat([a, b]);
      result = pair(newids, newPairing);
      if (result.length === N) {
        return result;
      }
    }
  }
  return [];
};

lotta = function() {
  var a, b, colorSum, i, j, k, latest, latest2, len, len1, p, ref, start, temp;
  start = new Date();
// prepare pairing
  for (j = 0, len = persons.length; j < len; j++) {
    p = persons[j];
    colorSum = sumBW(p.c);
    latest = p.c.length === 0 ? 0 : _.last(p.c);
    latest2 = p.c.length < 2 ? 0 : sumBW(_.slice(p.c, p.c.length - 2));
    p.mandatory = 0;
    if (colorSum <= -1 || latest2 === -2) {
      p.mandatory = 1;
    }
    if (colorSum >= 1 || latest2 === 2) {
      p.mandatory = -1;
    }
    p.colorComp = [
      colorSum,
      latest // fundera på ordningen här.
    ];
  }
  calcScore();
  temp = _.sortBy(persons, ['s']);
  ids = _.map(temp, function(person) {
    return person.id;
  });
  ids = ids.reverse();
  ids = pair(ids);
  colorize(ids);
  ref = range(Math.floor(N / 2));
  for (k = 0, len1 = ref.length; k < len1; k++) {
    i = ref[k];
    a = ids[2 * i];
    b = ids[2 * i + 1];
    persons[a].opps.push(b);
    persons[b].opps.push(a);
  }
  print(`${new Date() - start} milliseconds`);
  return state = 2;
};

prRes = function(score) {
  var a, b;
  score = parseInt(score);
  if (score === 1) {
    return '½';
  }
  a = `${Math.floor(score / 2)}`;
  b = score % 2 === 1 ? '½' : '';
  return a + b;
};

assert('0', prRes('0'));

assert('½', prRes('1'));

assert('1', prRes('2'));

assert('1½', prRes(3));

assert('10', prRes(20));

assert('10½', prRes(21));

invert = function(arr) {
  var i, j, len, ref, res;
  res = [];
  ref = range(arr.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    res[arr[i]] = i;
  }
  return res;
};

assert([0, 1, 2, 3], invert([0, 1, 2, 3]));

assert([3, 2, 0, 1], invert([2, 3, 1, 0]));

calcScore = function() {
  var j, len, person, results;
  results = [];
  for (j = 0, len = persons.length; j < len; j++) {
    person = persons[j];
    results.push(person.s = parseInt(sum(person.r)));
  }
  return results;
};

setT0 = function(p, q) {
  var r;
  if (indexOf.call(persons[p].opps, q) >= 0) {
    r = persons[p].opps.indexOf(q);
    return persons[p].T[0] = persons[p].r[r];
  }
};

calcT = function() {
  var i, j, k, key, len, len1, p, person, q, ref, results, scores;
  // T ska beräknas först när allt är klart!
  // Beräkna T1 bara för de poänggrupper som har exakt två personer och då enbart om de har mött varandra.
  // Oklart om detta används för grupper med t ex tre personer. Låg sannolikhet att alla mött varandra.
  scores = {};
  ref = range(persons.length);
  for (j = 0, len = ref.length; j < len; j++) {
    p = ref[j];
    person = persons[p];
    key = sum(person.r);
    if (key in scores) {
      scores[key].push(p);
    } else {
      scores[key] = [p];
    }
    person.T[0] = 0;
  }
  for (key in scores) {
    if (scores[key].length === 2) {
      [p, q] = scores[key];
      setT0(p, q);
      setT0(q, p);
    }
  }
  results = [];
  for (k = 0, len1 = persons.length; k < len1; k++) {
    p = persons[k];
    p.T[1] = p.r.split("").filter((x) => {
      return x === '2';
    }).length;
    p.T[2] = 0;
    results.push((function() {
      var l, len2, ref1, results1;
      ref1 = p.opps;
      results1 = [];
      for (l = 0, len2 = ref1.length; l < len2; l++) {
        i = ref1[l];
        results1.push(p.T[2] += sum(persons[i].r)); // Buchholz: summan av motståndarnas poäng
      }
      return results1;
    })());
  }
  return results;
};

transferResult = function() {
  var a, b, i, j, len, ref, res, results;
  print({resultat});
  ref = range(Math.floor(N / 2));
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    a = ids[2 * i];
    b = ids[2 * i + 1];
    buttons[3][2 + 3 * i].prompt = '';
    res = resultat[2 + 3 * i];
    persons[a].r += res[0];
    results.push(persons[b].r += res[1]);
  }
  return results;
};

mw = function(x) {
  return x / 1000 * width; // (milliWidth)
};


//########## GUI ############
showHeader = function(header) {
  var y;
  y = DY / 2;
  textAlign(CENTER, CENTER);
  txt(`${title} ${datum}`, mw(7), y, LEFT, 'black');
  txt(header, mw(500), y, CENTER);
  return txt(rond + 1, mw(900), y, RIGHT);
};

txt = function(value, x, y, align = null, color = null) {
  if (align) {
    textAlign(align, CENTER);
  }
  if (color) {
    fill(color);
  }
  return text(value, x, y);
};

showNames = function() {
  var bord, i, j, len, person, x, y;
  showHeader('Names');
  nameList = _.sortBy(persons, ['n']);
  textSize(0.5 * DY);
  txt('Table Name', mw(5), DY * 1.5, LEFT);
  txt('Table Name', mw(505), DY * 1.5, LEFT);
  for (j = 0, len = ids.length; j < len; j++) {
    i = ids[j];
    person = nameList[i];
    x = mw(500) * (Math.floor(i / (Math.floor(N / 2))));
    y = DY * (2.5 + i % (Math.floor(N / 2)));
    bord = 1 + Math.floor(ids[i] / 2);
    fill('B' === _.last(person.c) ? 'black' : 'white');
    txt(bord, 0.75 * DY + x, y, RIGHT);
    txt(person.n, DY + x, y, LEFT);
  }
  return buttons[3][0].active = false;
};

showTables = function() {
  var a, b, i, j, len, nr, pa, pb, ref, results, y;
  showHeader('Tables');
  y = 1.5 * DY;
  txt('#', mw(75), y, CENTER, 'white');
  txt('Score', mw(150), y, CENTER, 'white');
  txt('White', mw(300), y, CENTER, 'white');
  txt('Result', mw(500), y, CENTER, 'lightgray');
  txt('Black', mw(700), y, CENTER, 'black');
  txt('Score', mw(850), y, CENTER, 'black');
  txt('#', mw(925), y, CENTER, 'black');
  ref = range(Math.floor(N / 2));
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    y = DY * (i + 2.5);
    a = persons[ids[2 * i]];
    b = persons[ids[2 * i + 1]];
    pa = sum(a.r);
    pb = sum(b.r);
    nr = i + 1;
    txt(nr, mw(75), y, CENTER, 'white');
    txt(prRes(pa), mw(150), y);
    txt('-', mw(500), y, CENTER, 'lightgray');
    txt(prRes(pb), mw(850), y, CENTER, 'black');
    results.push(txt(nr, mw(925), y));
  }
  return results;
};

lightbulb = function(color, x, y, result, opponent) {
  var strokeWeight;
  push();
  fill('red yellow green'.split(' ')[result]);
  circle(x, y, 0.9 * DY);
  fill({
    B: 'black',
    W: 'white'
  }[color]);
  textSize(DY * 0.6);
  if (result === '1' && color === 'W') {
    stroke('black');
    strokeWeight = 1;
  } else {
    noStroke();
    strokeWeight = 0;
  }
  txt(1 + opponent, x, y + 2, CENTER);
  return pop();
};

showResult = function() {
  var i, inv, j, k, l, len, len1, len2, p, r, ref, ref1, ref2, results, temp, x, y;
  showHeader('Result');
  if (ids.length === 0) {
    txt("This round can't be paired! (Too many rounds)", width / 2, height / 2, CENTER);
    return;
  }
  noStroke();
  calcT(rond);
  calcScore();
  temp = _.sortBy(persons, ['s', 'T']);
  ids = _.map(temp, function(person) {
    return person.id;
  });
  ids = ids.reverse();
  inv = invert(ids); // pga korstabell
  y = 1.5 * DY;
  textAlign(CENTER);
  ref = range(R);
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    txt(r + 1, mw(330) + DY * r, y);
  }
  txt("Score", mw(850), y);
  txt("D", mw(900), y);
  txt("W", mw(930), y);
  txt("B", mw(960), y);
  fill('white');
  textSize(DY * 0.5);
  ref1 = range(N);
  results = [];
  for (k = 0, len1 = ref1.length; k < len1; k++) {
    i = ref1[k];
    p = persons[i];
    y = DY * (inv[i] + 2.5);
    txt(1 + inv[i], mw(40), y, RIGHT);
    txt(p.n, mw(50), y, LEFT);
    ref2 = range(rond + 1);
    for (l = 0, len2 = ref2.length; l < len2; l++) {
      r = ref2[l];
      x = mw(330) + DY * r;
      lightbulb(p.c[r][0], x, y, p.r[r], inv[p.opps[r]]);
    }
    score = prRes(sum(p.r));
    txt(score, mw(850), y, CENTER, 'white');
    txt(prRes(p.T[0]), mw(900), y);
    txt(p.T[1], mw(930), y);
    results.push(txt(prRes(p.T[2]), mw(960), y));
  }
  return results;
};

setPrompt = function(button, prompt) {
  var j, len, ok, ref;
  button.prompt = button.prompt === prompt ? '' : prompt;
  ok = true;
  ref = buttons[3].slice(1);
  for (j = 0, len = ref.length; j < len; j++) {
    button = ref[j];
    if (button.prompt === '') {
      ok = false;
    }
  }
  return buttons[3][0].active = ok;
};

window.windowResized = function() {
  DY = mw(50);
  resizeCanvas(windowWidth, DY * (Math.floor(N / 2) + 2));
  return updateScreenParameters();
};

updateScreenParameters = function() {
  var a, b, i, j, len, n, ref, y;
  print('updateScreenParameters');
  DY = mw(50);
  buttons = [[], [], [], [], []];
  buttons[2].push(new Button('next', mw(950), 0.45 * DY, mw(60), 0.55 * DY, function() {
    state = 3;
    DY = mw(50);
    return resizeCanvas(windowWidth, DY * (Math.floor(N / 2) + 2));
  }));
  buttons[3].push(new Button('next', mw(950), 0.45 * DY, mw(60), 0.55 * DY, function() {
    state = 4;
    transferResult();
    DY = mw(50);
    return resizeCanvas(windowWidth, DY * (N + 2));
  }));
  ids = range(N); 
  ref = range(Math.floor(N / 2));
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    y = DY * (i + 2.5);
    a = persons[ids[2 * i]];
    b = persons[ids[2 * i + 1]];
    n = buttons[3].length;
    (function(n) {
      buttons[3].push(new Button(a.n, mw(300), y, mw(200), 30, function() {
        setPrompt(buttons[3][n + 1], '1 - 0');
        return resultat[n + 1] = "20";
      }));
      buttons[3].push(new Button('', mw(500), y, mw(200), 30, function() {
        setPrompt(buttons[3][n + 1], '½ - ½');
        return resultat[n + 1] = "11";
      }));
      return buttons[3].push(new Button(b.n, mw(700), y, mw(200), 30, function() {
        setPrompt(buttons[3][n + 1], '0 - 1');
        return resultat[n + 1] = "02";
      }));
    })(n);
  }
  return buttons[4].push(new Button('next', mw(950), 0.45 * DY, mw(60), 0.55 * DY, function() {
    var s;
    DY = mw(50);
    resizeCanvas(windowWidth, DY * (Math.floor(N / 2) + 2));
    s = createURL();
    print(s);
    copyToClipboard(s);
    if (rond < R - 1) {
      rond += 1;
      return lotta();
    }
  }));
};

print(`(${window.location.search})`);

if (window.location.search === '') {
  title = 'Editera urlen!';
  //datum = new Date()
  //datum = datum.toISOString().split('T')[0]
  url = `?T=${title.replace(" ", "_")}&N=ANDERSSON_Anders|BENGTSSON_Bertil|CARLSEN_Christer|DANIELSSON_Daniel|ERIKSSON_Erik|FRANSSON_Ferdinand|GREIDER_Göran|HARALDSSON_Helge`;
  window.location.href = url;
} else {
  fetchURL();
  print('persons read', persons);
}

window.setup = function() {
  createCanvas(windowWidth, windowHeight);
  DY = mw(50);
  updateScreenParameters();
  print(N + ' players ' + R + ' rounds');
  textAlign(CENTER, CENTER);
  return lotta();
};

window.draw = function() {
  var button, j, len, ref;
  background('gray');
  ref = buttons[state];
  for (j = 0, len = ref.length; j < len; j++) {
    button = ref[j];
    button.draw();
  }
  if (state <= 1) {
    return text(`State ${state}`, 100, 100);
  } else if (state === 2) {
    return showNames();
  } else if (state === 3) {
    return showTables();
  } else if (state === 4) {
    return showResult();
  }
};

window.mousePressed = function(event) {
  var button, j, len, ref;
  event.preventDefault();
  if (!released) {
    return;
  }
  released = false;
  ref = buttons[state];
  for (j = 0, len = ref.length; j < len; j++) {
    button = ref[j];
    if (button.inside(mouseX, mouseY)) {
      button.click();
    }
  }
  return false;
};

window.mouseReleased = function(event) {
  event.preventDefault();
  released = true;
  return false;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ucmFkLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXG1vbnJhZC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxNQUFBLEVBQUEsT0FBQSxFQUFBLFNBQUEsRUFBQSxLQUFBLEVBQUEsUUFBQSxFQUFBLGVBQUEsRUFBQSxTQUFBLEVBQUEsS0FBQSxFQUFBLFFBQUEsRUFBQSxNQUFBLEVBQUEsR0FBQSxFQUFBLE1BQUEsRUFBQSxTQUFBLEVBQUEsS0FBQSxFQUFBLE9BQUEsRUFBQSxFQUFBLEVBQUEsUUFBQSxFQUFBLElBQUEsRUFBQSxPQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsUUFBQSxFQUFBLFFBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLFlBQUEsRUFBQSxTQUFBLEVBQUEsS0FBQSxFQUFBLFVBQUEsRUFBQSxTQUFBLEVBQUEsVUFBQSxFQUFBLFVBQUEsRUFBQSxRQUFBLEVBQUEsS0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLGNBQUEsRUFBQSxHQUFBLEVBQUEsc0JBQUEsRUFBQSxHQUFBO0VBQUE7O0FBQUEsT0FBQSxHQUFVOztBQUNWLENBQUEsR0FBSSxFQURKOztBQUVBLENBQUEsR0FBSSxFQUZKOztBQUdBLEVBQUEsR0FBSyxHQUhMOzs7Ozs7Ozs7O0FBYUEsS0FBQSxHQUFRLE9BQU8sQ0FBQzs7QUFDaEIsS0FBQSxHQUFRLENBQUMsQ0FBQzs7QUFDVixLQUFBLEdBQVE7O0FBQ1IsS0FBQSxHQUFROztBQUNSLE9BQUEsR0FBVTs7QUFDVixRQUFBLEdBQVc7O0FBQ1gsS0FBQSxHQUFROztBQUNSLElBQUEsR0FBTzs7QUFDUCxHQUFBLEdBQU07O0FBQ04sUUFBQSxHQUFXOztBQUVYLFFBQUEsR0FBVyxRQUFBLENBQUMsQ0FBRCxDQUFBO0VBQU8s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QUFjLE1BQWQsRUFBcUIsTUFBckIsQ0FBSDtNQUFvQyxNQUFNLENBQUMsS0FBUCxDQUFBLEVBQXBDOztFQUREO1NBRUE7QUFOcUI7O0FBUXRCLE1BQU0sQ0FBQyxhQUFQLEdBQXVCLFFBQUEsQ0FBQyxLQUFELENBQUE7RUFDdEIsS0FBSyxDQUFDLGNBQU4sQ0FBQTtFQUNBLFFBQUEsR0FBVztTQUNYO0FBSHNCIiwic291cmNlc0NvbnRlbnQiOlsiQUxGQUJFVCA9ICcwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWi0vJ1xyXG5OID0gMCAjIGFudGFsIHBlcnNvbmVyXHJcblIgPSAwICMgYW50YWwgcm9uZGVyXHJcbkRZID0gMzAgIyByYWRhdnN0w6VuZCBpIHBpeGxhclxyXG5cclxuIyBTdGF0ZXM6XHJcbiMgMiBOYW1lc1xyXG4jIDMgVGFibGVzXHJcbiMgNCBSZXN1bHRcclxuXHJcbiNzZWVkID0gTWF0aC5yYW5kb20oKVxyXG4jcmFuZG9tID0gLT4gKCgoTWF0aC5zaW4oc2VlZCsrKS8yKzAuNSkqMTAwMDApJTEwMCkvMTAwXHJcblxyXG5wcmludCA9IGNvbnNvbGUubG9nXHJcbnJhbmdlID0gXy5yYW5nZVxyXG50aXRsZSA9ICcnXHJcbmRhdHVtID0gJydcclxucGVyc29ucyA9IFtdXHJcbm5hbWVMaXN0ID0gW11cclxuc3RhdGUgPSAwXHJcbnJvbmQgPSAwIFxyXG5pZHMgPSBbXVxyXG5yZXN1bHRhdCA9IFtdXHJcblxyXG5zaG93VHlwZSA9IChhKSAtPiBpZiB0eXBlb2YgYSA9PSAnc3RyaW5nJyB0aGVuIFwiJyN7YX0nXCIgZWxzZSBhXHJcblxyXG5hc3NlcnQgPSAoYSxiKSAtPiBpZiBub3QgXy5pc0VxdWFsIGEsYiB0aGVuIHByaW50IFwiQXNzZXJ0IGZhaWx1cmU6ICN7c2hvd1R5cGUgYX0gIT0gI3tzaG93VHlwZSBifVwiXHJcblxyXG5zZWxlY3RSb3VuZHMgPSAobikgLT4gIyBhbnRhbCByb25kZXIgc2thIHZhcmEgY2lya2EgMTUwJSBhdiBhbnRhbGV0IG1hdGNoZXIgaSBlbiBjdXAuIFNhbXQgasOkbW50LlxyXG5cdHJlcyA9IE1hdGguZmxvb3IgMS41MCAqIE1hdGgubG9nMiBuXHJcblx0cmVzICs9IHJlcyAlIDJcclxuXHRpZiAyKnJlcyA+IG4gdGhlbiByZXMgLT0gMVxyXG5cdGlmIG49PTQgdGhlbiByZXMgPSAyXHJcblx0cmVzXHJcbmFzc2VydCAyLCBzZWxlY3RSb3VuZHMgNFxyXG5hc3NlcnQgMywgc2VsZWN0Um91bmRzIDZcclxuYXNzZXJ0IDQsIHNlbGVjdFJvdW5kcyAxMFxyXG5hc3NlcnQgNiwgc2VsZWN0Um91bmRzIDEyXHJcbmFzc2VydCA2LCBzZWxlY3RSb3VuZHMgMjRcclxuYXNzZXJ0IDgsIHNlbGVjdFJvdW5kcyAyNlxyXG5hc3NlcnQgOCwgc2VsZWN0Um91bmRzIDYwXHJcbmFzc2VydCAxMCwgc2VsZWN0Um91bmRzIDY0XHJcblxyXG5idXR0b25zID0gW1tdLFtdLFtdLFtdLFtdXVxyXG5yZWxlYXNlZCA9IHRydWVcclxubWVzc2FnZSA9ICcnICNUaGlzIGlzIGEgdHV0b3JpYWwgdG91cm5hbWVudC4gVXNlIGl0IG9yIGVkaXQgdGhlIFVSTCdcclxuXHJcbmZldGNoVVJMID0gKHVybCA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpIC0+XHJcblx0cmVzID0ge31cclxuXHR1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zIHVybFxyXG5cdHBlcnNvbnMgPSBbXVxyXG5cdHRpdGxlID0gdXJsUGFyYW1zLmdldCgnVCcpLnJlcGxhY2UgJ18nLCcgJ1xyXG5cdGRhdHVtID0gdXJsUGFyYW1zLmdldCgnRCcpIG9yIFwiXCJcclxuXHJcblx0cmVzLk4gPSB1cmxQYXJhbXMuZ2V0KCdOJykucmVwbGFjZUFsbCgnXycsJyAnKS5zcGxpdCAnfCdcclxuXHROID0gcmVzLk4ubGVuZ3RoXHJcblxyXG5cdGlmIE4gPCA0XHJcblx0XHRwcmludCBcIkVycm9yOiBOdW1iZXIgb2YgcGxheWVycyBtdXN0IGJlIDQgb3IgbW9yZSFcIlxyXG5cdFx0cmV0dXJuXHJcblx0aWYgTiA+IDY0XHJcblx0XHRwcmludCBcIkVycm9yOiBOdW1iZXIgb2YgcGxheWVycyBtdXN0IGJlIDY0IG9yIGxlc3MhXCJcclxuXHRcdHJldHVyblxyXG5cclxuXHRpZiByZXMuTyBhbmQgcmVzLkMgYW5kIHJlcy5SXHJcblxyXG5cdFx0cmVzLk8gPSB1cmxQYXJhbXMuZ2V0KCdPJykuc3BsaXQgJ3wnXHJcblx0XHRyZXMuQyA9IHVybFBhcmFtcy5nZXQoJ0MnKS5zcGxpdCAnfCdcclxuXHRcdHJlcy5SID0gdXJsUGFyYW1zLmdldCgnUicpLnNwbGl0ICd8J1xyXG5cdFx0aWYgcmVzLk4ubGVuZ3RoICE9IHJlcy5PLmxlbmd0aCAhPSByZXMuQy5sZW5ndGggIT0gcmVzLlIubGVuZ3RoXHJcblx0XHRcdHByaW50IFwiRXJyb3I6IElsbGVnYWwgbnVtYmVyIG9mIHBsYXllcnMgaW4gTywgQyBvciBSIVwiXHJcblx0XHRcdHJldHVyblxyXG5cdFx0UiA9IHJlcy5SWzBdLmxlbmd0aFxyXG5cclxuXHRcdHJlcy5PID0gXy5tYXAgcmVzLk8sIChyKSAtPiBfLm1hcCByLCAoY2gpIC0+IEFMRkFCRVQuaW5kZXhPZiBjaFxyXG5cdFx0cmVzLkMgPSBfLm1hcCByZXMuQywgKHIpIC0+IF8ubWFwIHIsIChjaCkgLT4ge0I6LTEsVzoxfVtjaF1cclxuXHRcdHJlcy5SID0gXy5tYXAgcmVzLlIsIChyKSAtPiBfLm1hcCByLCAoY2gpIC0+IHBhcnNlSW50IGNoXHJcblxyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgTlxyXG5cdFx0XHRpZiBSICE9IHJlcy5PW2ldLmxlbmd0aCAhPSByZXMuQ1tpXS5sZW5ndGggIT0gcmVzLlJbaV0ubGVuZ3RoXHJcblx0XHRcdFx0cHJpbnQgXCJFcnJvcjogSWxsZWdhbCBudW1iZXIgb2Ygcm91bmRzIGZvciBwbGF5ZXIgI3tyZXMuTltpXX0hXCJcclxuXHRcdFx0XHRyZXR1cm5cclxuXHRcdFx0cGVyc29ucy5wdXNoIHtpZDppLCBuOiByZXMuTltpXSwgYzpyZXMuQ1tpXSwgcjpyZXMuUltpXSwgczowLCBvcHBzOnJlcy5PW2ldLCBUOlswLDAsMF0gfVxyXG5cclxuXHRlbHNlXHJcblx0XHRpZiBOICUgMiA9PSAxXHJcblx0XHRcdHJlcy5OLnB1c2ggJy1mcmlyb25kLSdcclxuXHRcdFx0TiArPSAxXHJcblxyXG5cdFx0I3Jlcy5OID0gXy5zaHVmZmxlIHJlcy5OXHJcblx0XHRwZXJzb25zID0gXy5tYXAgcmFuZ2UoTiksIChpKSAtPiB7aWQ6aSwgbjogcmVzLk5baV0sIGM6JycsIHI6JycsIHM6MCwgb3BwczpbXSwgVDpbXX1cclxuXHJcblx0XHRwcmludCBwZXJzb25zXHJcblx0XHRcdCMgcGVyc29ucy5wdXNoIHtpZDppLCBuOiByZXMuTltpXSwgYzonJywgcjonJywgczowLCBvcHBzOltdfVxyXG5cdFx0UiA9IHNlbGVjdFJvdW5kcyBOXHJcblx0XHQjaWYgTiA8IDEwIHRoZW4gUiA9IDNcclxuXHJcbmNvcHlUb0NsaXBib2FyZCA9ICh0ZXh0KSAtPlxyXG5cdGlmICFuYXZpZ2F0b3IuY2xpcGJvYXJkXHJcblx0XHR0ZXh0YXJlYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgJ3RleHRhcmVhJ1xyXG5cdFx0dGV4dGFyZWEudmFsdWUgPSB0ZXh0XHJcblx0XHRkb2N1bWVudC5ib0YuYXBwZW5kQ2hpbGQgdGV4dGFyZWFcclxuXHRcdHRleHRhcmVhLnNlbGVjdCgpXHJcblx0XHRkb2N1bWVudC5leGVjQ29tbWFuZCAnY29weSdcclxuXHRcdGRvY3VtZW50LmJvRi5yZW1vdmVDaGlsZCB0ZXh0YXJlYVxyXG5cdFx0bWVzc2FnZSA9ICdVcmxlbiBoYXIga29waWVyYXRzIHRpbGwga2xpcHBib3JkZXQgMSdcclxuXHRlbHNlXHJcblx0XHRuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dCB0ZXh0XHJcblx0XHQudGhlbiA9PiBtZXNzYWdlID0gJ1VybGVuIGhhciBrb3BpZXJhdHMgdGlsbCBrbGlwcGJvcmRldCAyJ1xyXG5cdFx0LmNhdGNoIChlcnIpID0+IG1lc3NhZ2UgJ0tvcGllcmluZyB0aWxsIGtsaXBwYm9yZGV0IG1pc3NseWNrYWRlcydcclxuXHJcbmNsYXNzIEJ1dHRvblxyXG5cdGNvbnN0cnVjdG9yIDogKEBwcm9tcHQsQHgsQHksQHcsQGgsQGNsaWNrKSAtPlxyXG5cdFx0QGFjdGl2ZSA9IHRydWVcclxuXHRkcmF3IDogLT5cclxuXHRcdGlmIG5vdCBAYWN0aXZlIHRoZW4gcmV0dXJuXHJcblx0XHR0ZXh0QWxpZ24gQ0VOVEVSLENFTlRFUlxyXG5cdFx0cmVjdE1vZGUgQ0VOVEVSXHJcblx0XHRmaWxsICdibGFjaydcclxuXHRcdGlmIEBwcm9tcHQgPT0gJ25leHQnXHJcblx0XHRcdCNzdHJva2UgJ2JsYWNrJ1xyXG5cdFx0XHRyZWN0IEB4LEB5LCBAdyxAaFxyXG5cdFx0XHRmaWxsICd5ZWxsb3cnXHJcblx0XHR0ZXh0IEBwcm9tcHQsQHgsIEB5ICsgMC41XHJcblx0aW5zaWRlIDogKG14LG15KSAtPiBAeC1Ady8yIDw9IG14IDw9IEB4K0B3LzIgYW5kIEB5LUBoLzIgPD0gbXkgPD0gQHkrQGgvMiBhbmQgQGFjdGl2ZVxyXG5cclxuY3JlYXRlVVJMID0gLT5cclxuXHRyZXMgPSBcImh0dHBzOi8vY2hyaXN0ZXJuaWxzc29uLmdpdGh1Yi5pby8yMDIzLzA0NC1Nb25yYWRcIlxyXG5cdHJlcyArPSBcIj9UPVwiICsgXCJXYXNhIFNLIEtNIGJsaXh0XCJcclxuXHRyZXMgKz0gXCImRD1cIiArIFwiMjAyMy0xMS0yNVwiXHJcblx0cmVzICs9IFwiJk49XCIgKyAoXy5tYXAgcGVyc29ucywgKHBlcnNvbikgLT4gcGVyc29uLm4ucmVwbGFjZUFsbCBcIiBcIixcIl9cIikuam9pbiBcInxcIlxyXG5cdGlmIHBlcnNvbnNbMF0ub3Bwcy5sZW5ndGg+IDBcclxuXHRcdHJlcyArPSBcIiZPPVwiICsgKF8ubWFwIHBlcnNvbnMsIChwZXJzb24pIC0+IChfLm1hcCBwZXJzb24ub3BwcywgKG9wcCkgLT4gQUxGQUJFVFtvcHBdKS5qb2luIFwiXCIpLmpvaW4gXCJ8XCJcclxuXHRcdHJlcyArPSBcIiZDPVwiICsgKF8ubWFwIHBlcnNvbnMsIChwZXJzb24pIC0+IHBlcnNvbi5jKS5qb2luIFwifFwiXHJcblx0XHRyZXMgKz0gXCImUj1cIiArIChfLm1hcCBwZXJzb25zLCAocGVyc29uKSAtPiBwZXJzb24ucikuam9pbiBcInxcIlxyXG5cdHJlc1xyXG5cclxuc3VtID0gKHMpIC0+XHJcblx0cmVzID0gMFxyXG5cdGZvciBpdGVtIGluIHNcclxuXHRcdHJlcyArPSBwYXJzZUludCBpdGVtXHJcblx0cmVzXHJcbmFzc2VydCA2LCBzdW0gJzAxMjAxMidcclxuXHJcbnN1bUJXID0gKHMpIC0+XHJcblx0cmVzID0gMFxyXG5cdGZvciBpdGVtIGluIHNcclxuXHRcdHJlcyArPSBpZiBpdGVtPT0nQicgdGhlbiAtMSBlbHNlIDFcclxuXHRyZXNcclxuYXNzZXJ0IDAsIHN1bUJXICdCV0JXV0InXHJcbmFzc2VydCAtNiwgc3VtQlcgJ0JCQkJCQidcclxuYXNzZXJ0IDYsIHN1bUJXICdXV1dXV1cnXHJcblxyXG5zY29yZSA9ICAocCkgLT4gc3VtIHBlcnNvbnNbcF0uclxyXG5nZXRNZXQgPSAoYSxiKSAtPiBiIGluIHBlcnNvbnNbYV0ub3Bwc1xyXG5cclxuY29sb3JpemUgPSAoaWRzKSAtPlxyXG5cdGZvciBpIGluIHJhbmdlIGlkcy5sZW5ndGgvLzJcclxuXHRcdHBhID0gcGVyc29uc1tpZHNbMippXV1cclxuXHRcdHBiID0gcGVyc29uc1tpZHNbMippKzFdXVxyXG5cdFx0aWYgcGEubWFuZGF0b3J5XHJcblx0XHRcdHBhYyA9IGlmIHBhLm1hbmRhdG9yeT09MSB0aGVuICdXJyAgZWxzZSAnQidcclxuXHRcdGVsc2UgaWYgcGIubWFuZGF0b3J5XHJcblx0XHRcdHBhYyA9IGlmIHBhLm1hbmRhdG9yeT09MSB0aGVuICdCJyAgZWxzZSAnVydcclxuXHRcdGVsc2UgXHJcblx0XHRcdGlmIHBhLmNvbG9yQ29tcCA8IHBiLmNvbG9yQ29tcCB0aGVuIHBhYyA9ICdXJyBlbHNlIHBhYyA9ICdCJ1xyXG5cdFx0cGEuYyArPSBwYWNcclxuXHRcdHBiLmMgKz0gaWYgcGFjPT0nVycgdGhlbiAnQicgIGVsc2UgJ1cnXHJcblxyXG5wYWlyID0gKGlkcyxwYWlyaW5nPVtdKSAtPlxyXG5cdGlmIHBhaXJpbmcubGVuZ3RoID09IE4gdGhlbiByZXR1cm4gcGFpcmluZ1xyXG5cdGZvciBhIGluIGlkcyAjIGEgw6RyIGV0dCBwZXJzb25pZFxyXG5cdFx0Zm9yIGIgaW4gaWRzICMgYiDDpHIgZXR0IHBlcnNvbmlkXHJcblx0XHRcdGlmIGEgPT0gYiB0aGVuIGNvbnRpbnVlICMgbWFuIGthbiBpbnRlIG3DtnRhIHNpZyBzasOkbHZcclxuXHRcdFx0aWYgZ2V0TWV0IGEsYiB0aGVuIGNvbnRpbnVlICMgYSBvY2ggYiBmw6VyIGVqIGhhIG3DtnR0cyB0aWRpZ2FyZVxyXG5cdFx0XHRtYW5kYXRvcnkgPSBwZXJzb25zW2FdLm1hbmRhdG9yeSArIHBlcnNvbnNbYl0ubWFuZGF0b3J5XHJcblx0XHRcdGlmIDIgPT0gTWF0aC5hYnMgbWFuZGF0b3J5IHRoZW4gY29udGludWUgIyBTcGVsYXJuYSBrYW4gaW50ZSBoYSBzYW1tYSBmw6RyZy5cclxuXHRcdFx0bmV3aWRzID0gKGlkIGZvciBpZCBpbiBpZHMgd2hlbiBpZCBub3QgaW4gW2EsYl0pXHJcblx0XHRcdG5ld1BhaXJpbmcgPSBwYWlyaW5nLmNvbmNhdCBbYSxiXVxyXG5cdFx0XHRyZXN1bHQgPSBwYWlyIG5ld2lkcyxuZXdQYWlyaW5nXHJcblx0XHRcdGlmIHJlc3VsdC5sZW5ndGggPT0gTiB0aGVuIHJldHVybiByZXN1bHRcclxuXHRyZXR1cm4gW11cclxuXHJcbmxvdHRhID0gLT5cclxuXHJcblx0c3RhcnQgPSBuZXcgRGF0ZSgpXHJcblxyXG5cdCMgcHJlcGFyZSBwYWlyaW5nXHJcblx0Zm9yIHAgaW4gcGVyc29uc1xyXG5cdFx0Y29sb3JTdW0gPSBzdW1CVyBwLmNcclxuXHRcdGxhdGVzdCA9IGlmIHAuYy5sZW5ndGg9PSAwIHRoZW4gMCBlbHNlIF8ubGFzdCBwLmNcclxuXHRcdGxhdGVzdDIgPSBpZiBwLmMubGVuZ3RoIDwgMiB0aGVuIDAgZWxzZSBzdW1CVyBfLnNsaWNlIHAuYywgcC5jLmxlbmd0aCAtIDJcclxuXHJcblx0XHRwLm1hbmRhdG9yeSA9IDBcclxuXHRcdGlmIGNvbG9yU3VtIDw9IC0xIG9yIGxhdGVzdDIgPT0gLTIgdGhlbiBwLm1hbmRhdG9yeSA9ICAxXHJcblx0XHRpZiBjb2xvclN1bSA+PSAgMSBvciBsYXRlc3QyID09ICAyIHRoZW4gcC5tYW5kYXRvcnkgPSAtMVxyXG5cdFx0cC5jb2xvckNvbXAgPSBbY29sb3JTdW0sbGF0ZXN0XSAjIGZ1bmRlcmEgcMOlIG9yZG5pbmdlbiBow6RyLlxyXG5cclxuXHRjYWxjU2NvcmUoKVxyXG5cdHRlbXAgPSBfLnNvcnRCeSBwZXJzb25zLCBbJ3MnXVxyXG5cdGlkcyA9IF8ubWFwIHRlbXAsIChwZXJzb24pIC0+IHBlcnNvbi5pZFxyXG5cdGlkcyA9IGlkcy5yZXZlcnNlKClcclxuXHRpZHMgPSBwYWlyIGlkc1xyXG5cdGNvbG9yaXplIGlkc1xyXG5cdGZvciBpIGluIHJhbmdlIE4vLzJcclxuXHRcdGEgPSBpZHNbMippXVxyXG5cdFx0YiA9IGlkc1syKmkrMV1cclxuXHRcdHBlcnNvbnNbYV0ub3Bwcy5wdXNoIGJcclxuXHRcdHBlcnNvbnNbYl0ub3Bwcy5wdXNoIGFcclxuXHRwcmludCBcIiN7bmV3IERhdGUoKSAtIHN0YXJ0fSBtaWxsaXNlY29uZHNcIlxyXG5cdHN0YXRlID0gMlxyXG5cclxucHJSZXMgPSAoc2NvcmUpIC0+XHJcblx0c2NvcmUgPSBwYXJzZUludCBzY29yZVxyXG5cdGlmIHNjb3JlID09IDEgdGhlbiByZXR1cm4gJ8K9J1xyXG5cdGEgPSBcIiN7c2NvcmUgLy8gMn1cIlxyXG5cdGIgPSBpZiBzY29yZSAlIDIgPT0gMSB0aGVuICfCvScgZWxzZSAnJ1xyXG5cdGEgKyBiXHJcbmFzc2VydCAnMCcsIHByUmVzICcwJ1xyXG5hc3NlcnQgJ8K9JywgcHJSZXMgJzEnXHJcbmFzc2VydCAnMScsIHByUmVzICcyJ1xyXG5hc3NlcnQgJzHCvScsIHByUmVzIDNcclxuYXNzZXJ0ICcxMCcsIHByUmVzIDIwXHJcbmFzc2VydCAnMTDCvScsIHByUmVzIDIxXHJcblxyXG5pbnZlcnQgPSAoYXJyKSAtPlxyXG5cdHJlcyA9IFtdXHJcblx0Zm9yIGkgaW4gcmFuZ2UgYXJyLmxlbmd0aFxyXG5cdFx0cmVzW2FycltpXV0gPSBpXHJcblx0cmV0dXJuIHJlc1xyXG5hc3NlcnQgWzAsMSwyLDNdLCBpbnZlcnQgWzAsMSwyLDNdXHJcbmFzc2VydCBbMywyLDAsMV0sIGludmVydCBbMiwzLDEsMF1cclxuXHJcbmNhbGNTY29yZSA9IC0+XHJcblx0Zm9yIHBlcnNvbiBpbiBwZXJzb25zXHJcblx0XHRwZXJzb24ucyA9IHBhcnNlSW50IHN1bSBwZXJzb24uclxyXG5cclxuc2V0VDAgPSAocCxxKSAtPlxyXG5cdGlmIHEgaW4gcGVyc29uc1twXS5vcHBzXHJcblx0XHRyID0gcGVyc29uc1twXS5vcHBzLmluZGV4T2YgcVxyXG5cdFx0cGVyc29uc1twXS5UWzBdID0gcGVyc29uc1twXS5yW3JdXHJcblxyXG5jYWxjVCA9IC0+XHJcblx0IyBUIHNrYSBiZXLDpGtuYXMgZsO2cnN0IG7DpHIgYWxsdCDDpHIga2xhcnQhXHJcblx0IyBCZXLDpGtuYSBUMSBiYXJhIGbDtnIgZGUgcG/DpG5nZ3J1cHBlciBzb20gaGFyIGV4YWt0IHR2w6UgcGVyc29uZXIgb2NoIGTDpSBlbmJhcnQgb20gZGUgaGFyIG3DtnR0IHZhcmFuZHJhLlxyXG5cdCMgT2tsYXJ0IG9tIGRldHRhIGFudsOkbmRzIGbDtnIgZ3J1cHBlciBtZWQgdCBleCB0cmUgcGVyc29uZXIuIEzDpWcgc2Fubm9saWtoZXQgYXR0IGFsbGEgbcO2dHQgdmFyYW5kcmEuXHJcblx0c2NvcmVzID0ge31cclxuXHRmb3IgcCBpbiByYW5nZSBwZXJzb25zLmxlbmd0aFxyXG5cdFx0cGVyc29uID0gcGVyc29uc1twXVxyXG5cdFx0a2V5ID0gc3VtIHBlcnNvbi5yXHJcblx0XHRpZiBrZXkgb2Ygc2NvcmVzIHRoZW4gc2NvcmVzW2tleV0ucHVzaCBwXHJcblx0XHRlbHNlIHNjb3Jlc1trZXldID0gW3BdXHJcblx0XHRwZXJzb24uVFswXSA9IDBcclxuXHRmb3Iga2V5IG9mIHNjb3Jlc1xyXG5cdFx0aWYgc2NvcmVzW2tleV0ubGVuZ3RoID09IDJcclxuXHRcdFx0W3AscV0gPSBzY29yZXNba2V5XVxyXG5cdFx0XHRzZXRUMCBwLHFcclxuXHRcdFx0c2V0VDAgcSxwXHJcblxyXG5cdGZvciBwIGluIHBlcnNvbnNcclxuXHRcdHAuVFsxXSA9IHAuci5zcGxpdChcIlwiKS5maWx0ZXIoKHgpID0+IHggPT0gJzInKS5sZW5ndGhcclxuXHRcdHAuVFsyXSA9IDBcclxuXHRcdGZvciBpIGluIHAub3Bwc1xyXG5cdFx0XHRwLlRbMl0gKz0gc3VtIHBlcnNvbnNbaV0uciAjIEJ1Y2hob2x6OiBzdW1tYW4gYXYgbW90c3TDpW5kYXJuYXMgcG/DpG5nXHJcblxyXG50cmFuc2ZlclJlc3VsdCA9IC0+XHJcblx0cHJpbnQge3Jlc3VsdGF0fVxyXG5cdGZvciBpIGluIHJhbmdlIE4vLzJcclxuXHRcdGEgPSBpZHNbMippXVxyXG5cdFx0YiA9IGlkc1syKmkrMV1cclxuXHRcdGJ1dHRvbnNbM11bMiszKmldLnByb21wdCA9ICcnXHJcblx0XHRyZXMgPSByZXN1bHRhdFsyKzMqaV1cclxuXHRcdHBlcnNvbnNbYV0uciArPSByZXNbMF1cclxuXHRcdHBlcnNvbnNbYl0uciArPSByZXNbMV1cclxuXHJcbm13ID0gKHgpIC0+IHgvMTAwMCAqIHdpZHRoICMgKG1pbGxpV2lkdGgpXHJcblxyXG4jIyMjIyMjIyMjIyBHVUkgIyMjIyMjIyMjIyMjXHJcblxyXG5zaG93SGVhZGVyID0gKGhlYWRlcikgLT5cclxuXHR5ID0gRFkvMlxyXG5cdHRleHRBbGlnbiBDRU5URVIsQ0VOVEVSXHJcblx0dHh0IFwiI3t0aXRsZX0gI3tkYXR1bX1cIiAsbXcoNykseSxMRUZULCdibGFjaydcclxuXHR0eHQgaGVhZGVyLCBtdyg1MDApLHksQ0VOVEVSXHJcblx0dHh0IHJvbmQrMSwgbXcoOTAwKSx5LFJJR0hUXHJcblxyXG50eHQgPSAodmFsdWUsIHgsIHksIGFsaWduPW51bGwsIGNvbG9yPW51bGwpIC0+XHJcblx0aWYgYWxpZ24gdGhlbiB0ZXh0QWxpZ24gYWxpZ24sQ0VOVEVSXHJcblx0aWYgY29sb3IgdGhlbiBmaWxsIGNvbG9yXHJcblx0dGV4dCB2YWx1ZSx4LHlcclxuXHJcbnNob3dOYW1lcyA9IC0+XHJcblx0c2hvd0hlYWRlciAnTmFtZXMnXHJcblx0bmFtZUxpc3QgPSBfLnNvcnRCeSBwZXJzb25zLCBbJ24nXVxyXG5cdHRleHRTaXplIDAuNSAqIERZXHJcblx0dHh0ICdUYWJsZSBOYW1lJyxtdyg1KSxEWSoxLjUsTEVGVFxyXG5cdHR4dCAnVGFibGUgTmFtZScsbXcoNTA1KSxEWSoxLjUsTEVGVFxyXG5cdGZvciBpIGluIGlkc1xyXG5cdFx0cGVyc29uID0gbmFtZUxpc3RbaV1cclxuXHRcdHggPSBtdyg1MDApICogKGkgLy8gKE4vLzIpKVxyXG5cdFx0eSA9IERZICogKDIuNSArIGkgJSAoTi8vMikpXHJcblx0XHRib3JkID0gMSArIGlkc1tpXS8vMlxyXG5cdFx0ZmlsbCBpZiAnQicgPT0gXy5sYXN0IHBlcnNvbi5jIHRoZW4gJ2JsYWNrJyBlbHNlICd3aGl0ZSdcclxuXHRcdHR4dCBib3JkLDAuNzUqRFkreCx5LFJJR0hUXHJcblx0XHR0eHQgcGVyc29uLm4sRFkreCx5LExFRlRcclxuXHJcblx0YnV0dG9uc1szXVswXS5hY3RpdmUgPSBmYWxzZVxyXG5cclxuc2hvd1RhYmxlcyA9IC0+XHJcblx0c2hvd0hlYWRlciAnVGFibGVzJ1xyXG5cdHkgPSAxLjUgKiBEWVxyXG5cdHR4dCAnIycsICAgICBtdyggNzUpLHksQ0VOVEVSLCd3aGl0ZSdcclxuXHR0eHQgJ1Njb3JlJywgbXcoMTUwKSx5LENFTlRFUiwnd2hpdGUnXHJcblx0dHh0ICdXaGl0ZScsIG13KDMwMCkseSxDRU5URVIsJ3doaXRlJ1xyXG5cdHR4dCAnUmVzdWx0Jyxtdyg1MDApLHksQ0VOVEVSLCdsaWdodGdyYXknXHJcblx0dHh0ICdCbGFjaycsIG13KDcwMCkseSxDRU5URVIsJ2JsYWNrJ1xyXG5cdHR4dCAnU2NvcmUnLCBtdyg4NTApLHksQ0VOVEVSLCdibGFjaydcclxuXHR0eHQgJyMnLCAgICAgbXcoOTI1KSx5LENFTlRFUiwnYmxhY2snXHJcblxyXG5cdGZvciBpIGluIHJhbmdlIE4vLzJcclxuXHRcdHkgPSBEWSAqIChpKzIuNSlcclxuXHRcdGEgPSBwZXJzb25zW2lkc1syKmldXVxyXG5cdFx0YiA9IHBlcnNvbnNbaWRzWzIqaSsxXV1cclxuXHJcblx0XHRwYSA9IHN1bSBhLnJcclxuXHRcdHBiID0gc3VtIGIuclxyXG5cdFx0bnIgPSBpKzFcclxuXHRcdHR4dCBuciwgICAgICAgIG13KCA3NSkseSxDRU5URVIsJ3doaXRlJ1xyXG5cdFx0dHh0IHByUmVzKHBhKSwgbXcoMTUwKSx5XHJcblx0XHR0eHQgJy0nLCAgICAgICBtdyg1MDApLHksQ0VOVEVSLCdsaWdodGdyYXknXHJcblx0XHR0eHQgcHJSZXMocGIpLCBtdyg4NTApLHksQ0VOVEVSLCdibGFjaydcclxuXHRcdHR4dCBuciwgICAgICAgIG13KDkyNSkseVxyXG5cclxubGlnaHRidWxiID0gKGNvbG9yLCB4LCB5LCByZXN1bHQsIG9wcG9uZW50KSAtPlxyXG5cdHB1c2goKVxyXG5cdGZpbGwgJ3JlZCB5ZWxsb3cgZ3JlZW4nLnNwbGl0KCcgJylbcmVzdWx0XVxyXG5cdGNpcmNsZSB4LHksMC45KkRZXHJcblx0ZmlsbCB7QjonYmxhY2snLCBXOid3aGl0ZSd9W2NvbG9yXVxyXG5cdHRleHRTaXplIERZICogMC42XHJcblx0aWYgcmVzdWx0PT0nMScgYW5kIGNvbG9yPT0nVydcclxuXHRcdHN0cm9rZSAnYmxhY2snXHJcblx0XHRzdHJva2VXZWlnaHQgPSAxXHJcblx0ZWxzZSBcclxuXHRcdG5vU3Ryb2tlKClcclxuXHRcdHN0cm9rZVdlaWdodCA9IDBcclxuXHR0eHQgMStvcHBvbmVudCx4LHkrMixDRU5URVJcclxuXHRwb3AoKVxyXG5cclxuc2hvd1Jlc3VsdCA9IC0+XHJcblx0c2hvd0hlYWRlciAnUmVzdWx0J1xyXG5cdGlmIGlkcy5sZW5ndGggPT0gMFxyXG5cdFx0dHh0IFwiVGhpcyByb3VuZCBjYW4ndCBiZSBwYWlyZWQhIChUb28gbWFueSByb3VuZHMpXCIsd2lkdGgvMixoZWlnaHQvMixDRU5URVJcclxuXHRcdHJldHVyblxyXG5cclxuXHRub1N0cm9rZSgpXHJcblx0Y2FsY1Qgcm9uZFxyXG5cdGNhbGNTY29yZSgpXHJcblxyXG5cdHRlbXAgPSBfLnNvcnRCeSBwZXJzb25zLCBbJ3MnLCAnVCddXHJcblx0aWRzID0gXy5tYXAgdGVtcCwgKHBlcnNvbikgLT4gcGVyc29uLmlkXHJcblxyXG5cdGlkcyA9IGlkcy5yZXZlcnNlKClcclxuXHRpbnYgPSBpbnZlcnQgaWRzICMgcGdhIGtvcnN0YWJlbGxcclxuXHJcblx0eSA9IDEuNSAqIERZXHJcblx0dGV4dEFsaWduIENFTlRFUlxyXG5cdGZvciByIGluIHJhbmdlIFJcclxuXHRcdHR4dCByKzEsbXcoMzMwKSArIERZKnIsIHlcclxuXHR0eHQgXCJTY29yZVwiLG13KDg1MCkseVxyXG5cdHR4dCBcIkRcIiwgICAgbXcoOTAwKSx5XHJcblx0dHh0IFwiV1wiLCAgICBtdyg5MzApLHlcclxuXHR0eHQgXCJCXCIsICAgIG13KDk2MCkseVxyXG5cclxuXHRmaWxsICd3aGl0ZScgXHJcblx0dGV4dFNpemUgRFkgKiAwLjVcclxuXHRmb3IgaSBpbiByYW5nZSBOXHJcblx0XHRwID0gcGVyc29uc1tpXVxyXG5cdFx0eSA9IERZICogKGludltpXSsyLjUpXHJcblx0XHR0eHQgMStpbnZbaV0sbXcoNDApLHksUklHSFRcclxuXHRcdHR4dCBwLm4sbXcoNTApLHksTEVGVFxyXG5cdFx0Zm9yIHIgaW4gcmFuZ2Ugcm9uZCsxXHJcblx0XHRcdHggPSBtdygzMzApICsgRFkqclxyXG5cdFx0XHRsaWdodGJ1bGIgcC5jW3JdWzBdLCB4LCB5LCBwLnJbcl0sIGludltwLm9wcHNbcl1dXHJcblxyXG5cdFx0c2NvcmUgPSBwclJlcyBzdW0gcC5yXHJcblx0XHR0eHQgc2NvcmUsIG13KDg1MCksIHksIENFTlRFUiwnd2hpdGUnXHJcblxyXG5cdFx0dHh0IHByUmVzKHAuVFswXSksbXcoOTAwKSx5XHJcblx0XHR0eHQgICAgICAgcC5UWzFdLCBtdyg5MzApLHlcclxuXHRcdHR4dCBwclJlcyhwLlRbMl0pLG13KDk2MCkseVxyXG5cclxuc2V0UHJvbXB0ID0gKGJ1dHRvbixwcm9tcHQpIC0+IFxyXG5cdGJ1dHRvbi5wcm9tcHQgPSBpZiBidXR0b24ucHJvbXB0ID09IHByb21wdCB0aGVuICcnIGVsc2UgcHJvbXB0XHJcblx0b2sgPSB0cnVlXHJcblx0Zm9yIGJ1dHRvbiBpbiBidXR0b25zWzNdLnNsaWNlIDFcclxuXHRcdGlmIGJ1dHRvbi5wcm9tcHQgPT0gJycgdGhlbiBvayA9IGZhbHNlXHJcblx0YnV0dG9uc1szXVswXS5hY3RpdmUgPSBva1xyXG5cclxud2luZG93LndpbmRvd1Jlc2l6ZWQgPSAtPlxyXG5cdERZID0gbXcgNTBcclxuXHRyZXNpemVDYW52YXMgd2luZG93V2lkdGgsIERZICogKE4vLzIrMilcclxuXHR1cGRhdGVTY3JlZW5QYXJhbWV0ZXJzKClcclxuXHJcbnVwZGF0ZVNjcmVlblBhcmFtZXRlcnMgPSAtPlxyXG5cdHByaW50ICd1cGRhdGVTY3JlZW5QYXJhbWV0ZXJzJ1xyXG5cdERZID0gbXcgNTBcclxuXHJcblx0YnV0dG9ucyA9IFtbXSxbXSxbXSxbXSxbXV1cclxuXHJcblx0YnV0dG9uc1syXS5wdXNoIG5ldyBCdXR0b24gJ25leHQnLCBtdyg5NTApLDAuNDUqRFksIG13KDYwKSwwLjU1KkRZLCAtPiBcclxuXHRcdHN0YXRlID0gM1xyXG5cdFx0RFkgPSBtdyA1MFxyXG5cdFx0cmVzaXplQ2FudmFzIHdpbmRvd1dpZHRoLCBEWSAqIChOLy8yKzIpXHJcblxyXG5cdGJ1dHRvbnNbM10ucHVzaCBuZXcgQnV0dG9uICduZXh0JywgbXcoOTUwKSwwLjQ1KkRZLCBtdyg2MCksMC41NSpEWSwgLT5cclxuXHRcdHN0YXRlID0gNFxyXG5cdFx0dHJhbnNmZXJSZXN1bHQoKVxyXG5cdFx0RFkgPSBtdyA1MFxyXG5cdFx0cmVzaXplQ2FudmFzIHdpbmRvd1dpZHRoLCBEWSAqIChOKzIpXHJcblxyXG5cdGlkcyA9IHJhbmdlIE4gI1xyXG5cdGZvciBpIGluIHJhbmdlIE4vLzJcclxuXHRcdHkgPSBEWSAqIChpKzIuNSlcclxuXHRcdGEgPSBwZXJzb25zW2lkc1syKmldXVxyXG5cdFx0YiA9IHBlcnNvbnNbaWRzWzIqaSsxXV1cclxuXHRcdG4gPSBidXR0b25zWzNdLmxlbmd0aFxyXG5cdFx0ZG8gKG4pIC0+XHJcblx0XHRcdGJ1dHRvbnNbM10ucHVzaCBuZXcgQnV0dG9uIGEubixtdygzMDApLHksIG13KDIwMCksMzAsIC0+XHJcblx0XHRcdFx0c2V0UHJvbXB0IGJ1dHRvbnNbM11bbisxXSwgJzEgLSAwJ1xyXG5cdFx0XHRcdHJlc3VsdGF0W24rMV0gPSBcIjIwXCJcclxuXHRcdFx0YnV0dG9uc1szXS5wdXNoIG5ldyBCdXR0b24gJycsIG13KDUwMCkseSwgbXcoMjAwKSwzMCwgLT5cclxuXHRcdFx0XHRzZXRQcm9tcHQgYnV0dG9uc1szXVtuKzFdLCAnwr0gLSDCvSdcclxuXHRcdFx0XHRyZXN1bHRhdFtuKzFdID0gXCIxMVwiXHJcblx0XHRcdGJ1dHRvbnNbM10ucHVzaCBuZXcgQnV0dG9uIGIubixtdyg3MDApLHksIG13KDIwMCksMzAsIC0+XHJcblx0XHRcdFx0c2V0UHJvbXB0IGJ1dHRvbnNbM11bbisxXSwgJzAgLSAxJ1xyXG5cdFx0XHRcdHJlc3VsdGF0W24rMV0gPSBcIjAyXCJcclxuXHJcblx0YnV0dG9uc1s0XS5wdXNoIG5ldyBCdXR0b24gJ25leHQnLCBtdyg5NTApLDAuNDUqRFksIG13KDYwKSwwLjU1KkRZLCAtPlxyXG5cdFx0RFkgPSBtdyA1MFxyXG5cdFx0cmVzaXplQ2FudmFzIHdpbmRvd1dpZHRoLCBEWSAqIChOLy8yKzIpXHJcblx0XHRzID0gY3JlYXRlVVJMKClcclxuXHRcdHByaW50IHNcclxuXHRcdGNvcHlUb0NsaXBib2FyZCBzXHJcblx0XHRpZiByb25kIDwgUi0xXHJcblx0XHRcdHJvbmQgKz0gMVxyXG5cdFx0XHRsb3R0YSgpXHJcblxyXG5wcmludCBcIigje3dpbmRvdy5sb2NhdGlvbi5zZWFyY2h9KVwiXHJcbmlmIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2ggPT0gJydcclxuXHR0aXRsZSA9ICdFZGl0ZXJhIHVybGVuISdcclxuXHQjZGF0dW0gPSBuZXcgRGF0ZSgpXHJcblx0I2RhdHVtID0gZGF0dW0udG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdXHJcblx0dXJsID0gXCI/VD0je3RpdGxlLnJlcGxhY2UoXCIgXCIsXCJfXCIpfSZOPUFOREVSU1NPTl9BbmRlcnN8QkVOR1RTU09OX0JlcnRpbHxDQVJMU0VOX0NocmlzdGVyfERBTklFTFNTT05fRGFuaWVsfEVSSUtTU09OX0VyaWt8RlJBTlNTT05fRmVyZGluYW5kfEdSRUlERVJfR8O2cmFufEhBUkFMRFNTT05fSGVsZ2VcIlxyXG5cdHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdXJsXHJcbmVsc2VcclxuXHRmZXRjaFVSTCgpXHJcblx0cHJpbnQgJ3BlcnNvbnMgcmVhZCcscGVyc29uc1xyXG5cclxud2luZG93LnNldHVwID0gLT5cclxuXHRjcmVhdGVDYW52YXMgd2luZG93V2lkdGgsd2luZG93SGVpZ2h0XHJcblx0RFkgPSBtdyA1MFxyXG5cdHVwZGF0ZVNjcmVlblBhcmFtZXRlcnMoKVxyXG5cclxuXHRwcmludCBOICsgJyBwbGF5ZXJzICcgKyBSICsgJyByb3VuZHMnXHJcblx0dGV4dEFsaWduIENFTlRFUixDRU5URVJcclxuXHRsb3R0YSgpXHJcblxyXG53aW5kb3cuZHJhdyA9IC0+XHJcblx0YmFja2dyb3VuZCAnZ3JheSdcclxuXHRmb3IgYnV0dG9uIGluIGJ1dHRvbnNbc3RhdGVdXHJcblx0XHRidXR0b24uZHJhdygpXHJcblx0aWYgc3RhdGUgPD0gMSB0aGVuIHRleHQgXCJTdGF0ZSAje3N0YXRlfVwiLDEwMCwxMDBcclxuXHRlbHNlIGlmIHN0YXRlID09IDIgdGhlbiBzaG93TmFtZXMoKVxyXG5cdGVsc2UgaWYgc3RhdGUgPT0gMyB0aGVuIHNob3dUYWJsZXMoKVxyXG5cdGVsc2UgaWYgc3RhdGUgPT0gNCB0aGVuIHNob3dSZXN1bHQoKVxyXG5cclxud2luZG93Lm1vdXNlUHJlc3NlZCA9IChldmVudCkgLT5cclxuXHRldmVudC5wcmV2ZW50RGVmYXVsdCgpXHJcblx0aWYgbm90IHJlbGVhc2VkIHRoZW4gcmV0dXJuXHJcblx0cmVsZWFzZWQgPSBmYWxzZVxyXG5cdGZvciBidXR0b24gaW4gYnV0dG9uc1tzdGF0ZV1cclxuXHRcdGlmIGJ1dHRvbi5pbnNpZGUgbW91c2VYLG1vdXNlWSB0aGVuIGJ1dHRvbi5jbGljaygpXHJcblx0ZmFsc2VcclxuXHJcbndpbmRvdy5tb3VzZVJlbGVhc2VkID0gKGV2ZW50KSAtPlxyXG5cdGV2ZW50LnByZXZlbnREZWZhdWx0KClcclxuXHRyZWxlYXNlZCA9IHRydWVcclxuXHRmYWxzZVxyXG4iXX0=
//# sourceURL=c:\github\2023\044-Monrad\coffee\monrad.coffee