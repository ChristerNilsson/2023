// Generated by CoffeeScript 2.7.0
  // --- TODO ---
  // Parkera spelare
  // Hjälptexter
  // Ge perfekt felmeddelande för fel i URL-en.
  // Välj Monrad eller Swiss i URL-en
  // Ange färg för första bordet i URL-en
  // Hantera kontrollinmatning av resultat
  // Hantera 2 till 8 partier per team/person
  // Hantera WW, LB etc i URL-en
  // Print bordslista
  // localStorage (i princip urlen)
  // Repetition av piltangenter
  // Hastighetsjämförelser (javafo, swiss-manager, min kod, monrad, swiss)
var Button, DB, DW, DY, LB, LW, N, ROUNDS, WB, WW, adjustForColors, antal, assert, buttons, calcScore, calcT, colorize, copyToClipboard, createURL, currentTable, datum, fetchURL, getMet, invert, lightbulb, lotta, message, mw, myRound, pair, pairings, persons, prRes, print, range, released, resultat, round, scorex, setT0, showHeader, showResult, showTables, showType, state, sum, sumBW, title, txt, txtT, url,
  indexOf = [].indexOf,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

N = 0; // number of players

ROUNDS = 0; // number of rounds

DY = 75; // vertical line distance


// Fairer scoring, optional
WW = 0.9; // Win White (1)

LB = 0.1; // Lose Black (0)

WB = 1.0; // Win Black (1)

LW = 0.0; // Lose White (0)

DW = 0.4; // Draw White (0.5)

DB = 0.6; // Draw Black (0.5)

print = console.log;

range = _.range;

title = '';

datum = '';

currentTable = 0;

persons = []; // stabil, sorterad på id

pairings = []; // varierar med varje rond

state = 0; // 0=Tables 1=Result

round = 1;

resultat = []; // 012 sorterad på id

antal = 0;

showType = function(a) {
  if (typeof a === 'string') {
    return `'${a}'`;
  } else {
    return a;
  }
};

assert = function(a, b) {
  if (!_.isEqual(a, b)) {
    return print(`Assert failure: ${showType(a)} != ${showType(b)}`);
  }
};

buttons = [[], [], [], [], []];

released = true;

message = ''; //This is a tutorial tournament. Use it or edit the URL'

myRound = function(x, decs) {
  var s;
  s = (_.round(x, decs)).toString();
  if (indexOf.call(s, '.') < 0) {
    s += '.0';
  }
  return s;
};

assert("2.0", myRound(1.99, 1));

assert("0.6", myRound(0.6, 1));

fetchURL = function(url = location.search) {
  var R, i, j, len, ref, ref1, ref2, ref3, ref4, ref5, res, urlParams;
  res = {};
  urlParams = new URLSearchParams(url);
  persons = [];
  title = urlParams.get('TOUR').replace('_', ' ');
  datum = urlParams.get('DATE') || "";
  ROUNDS = parseInt(urlParams.get('ROUNDS'));
  round = parseInt(urlParams.get('ROUND'));
  res.NAME = urlParams.get('NAME').replaceAll('_', ' ').split('|');
  res.ELO = urlParams.get('ELO').split('|');
  res.ELO = _.map(res.ELO, function(r) {
    return parseInt(r);
  });
  N = res.NAME.length;
  if (N < 4) {
    print("Error: Number of players must be 4 or more!");
    return;
  }
  if (N > 64) {
    print("Error: Number of players must be 64 or less!");
    return;
  }
  if (res.OPP && res.COL && res.RES) {
    res.OPP = urlParams.get('OPP').split('|');
    res.COL = urlParams.get('COL').split('|');
    res.RES = urlParams.get('RES').split('|');
    if ((((res.NAME.length !== (ref2 = res.OPP.length) && ref2 !== (ref1 = res.COL.length)) && ref1 !== (ref = res.RES.length)) && ref !== res.ELO.length)) {
      print("Error: Illegal number of players in OPP, COL, ELO or RES!");
      return;
    }
    R = res.RES[0].length;
    res.OPP = _.map(res.OPP, function(r) {
      return _.map(r.split(',')); //, (ch) -> ALFABET.indexOf ch
    });
    res.COL = _.map(res.COL, function(r) {
      return _.map(r, function(ch) {
        return {
          B: -1,
          W: 1
        }[ch];
      });
    });
    res.RES = _.map(res.RES, function(r) {
      return _.map(r, function(ch) {
        return parseInt(ch);
      });
    });
    ref3 = range(N);
    for (j = 0, len = ref3.length; j < len; j++) {
      i = ref3[j];
      if (((R !== (ref5 = res.OPP[i].length) && ref5 !== (ref4 = res.COL[i].length)) && ref4 !== res.RES[i].length)) {
        print(`Error: Illegal number of rounds for player ${res.NAME[i]}!`);
        return;
      }
      persons.push({
        id: i,
        name: res.NAME[i],
        col: res.COL[i],
        res: res.RES[i],
        bal: 0,
        opp: res.OPP[i],
        T: [0, 0, 0],
        elo: res.ELO[i]
      });
    }
  } else {
    if (N % 2 === 1) {
      res.NAME.push('-frirond-');
      N += 1;
    }
    persons = _.map(range(N), function(i) {
      return {
        id: i,
        name: res.NAME[i],
        elo: res.ELO[i],
        col: '',
        res: '',
        bal: 0,
        opp: [],
        T: []
      };
    });
  }
  return print(persons);
};

copyToClipboard = function(text) {
  var textarea;
  if (!navigator.clipboard) {
    textarea = document.createElement('textarea');
    textarea.value = text;
    document.boF.appendChild(textarea);
    textarea.select();
    document.execCommand('copy');
    document.boF.removeChild(textarea);
    return message = 'Urlen har kopierats till klippbordet 1';
  } else {
    return navigator.clipboard.writeText(text).then(() => {
      return message = 'Urlen har kopierats till klippbordet 2';
    }).catch((err) => {
      return message('Kopiering till klippbordet misslyckades');
    });
  }
};

Button = class Button {
  constructor(prompt, fill1, click) {
    this.prompt = prompt;
    this.fill = fill1;
    this.click = click;
    this.active = true;
    this.align = CENTER;
  }

  setExtent(x1, y1, w1, h) {
    this.x = x1;
    this.y = y1;
    this.w = w1;
    this.h = h;
  }

  draw() {
    if (!this.active) {
      return;
    }
    textAlign(this.align, CENTER);
    if (this.prompt === 'next') {
      fill('black');
      rectMode(CENTER);
      rect(this.x, this.y, this.w, this.h);
    }
    fill(this.fill);
    return text(this.prompt, this.x, this.y + 0.5);
  }

  inside(mx, my) {
    return (this.x - this.w / 2 <= mx && mx <= this.x + this.w / 2) && (this.y - this.h / 2 <= my && my <= this.y + this.h / 2) && this.active;
  }

};

createURL = function() {
  var res;
  res = "https://christernilsson.github.io/2023/044-Monrad";
  res += "?TOUR=" + "Wasa SK KM blixt";
  res += "&DATE=" + "2023-11-25";
  res += "&NAME=" + (_.map(persons, function(person) {
    return person.name.replaceAll(" ", "_");
  })).join("|");
  if (persons[0].opp.length > 0) {
    res += "&OPP=" + (_.map(persons, function(person) {
      return (_.map(person.opp, function(opp) {
        return str(opp);
      })).join(",");
    })).join("|");
    res += "&COL=" + (_.map(persons, function(person) {
      return person.col;
    })).join("|");
    res += "&RES=" + (_.map(persons, function(person) {
      return person.res;
    })).join("|");
  }
  return res;
};

sum = function(s) {
  var item, j, len, res;
  res = 0;
  for (j = 0, len = s.length; j < len; j++) {
    item = s[j];
    res += parseInt(item);
  }
  return res;
};

assert(6, sum('012012'));

sumBW = function(s) {
  var item, j, len, res;
  res = 0;
  for (j = 0, len = s.length; j < len; j++) {
    item = s[j];
    res += item === 'B' ? -1 : 1;
  }
  return res;
};

assert(0, sumBW(''));

assert(0, sumBW('BWBWWB'));

assert(-6, sumBW('BBBBBB'));

assert(6, sumBW('WWWWWW'));

scorex = function(person) {
  var colors, i, j, len, n, ref, res, s, scores;
  res = 0;
  colors = person.col;
  scores = person.res;
  n = scores.length;
  ref = range(round);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    s = scores[i] + colors[i];
    if (s === '0W') {
      res += LW; // lose as white
    }
    if (s === '0B') {
      res += LB; // lose as black
    }
    if (s === '1W') {
      res += DW; // draw as white
    }
    if (s === '1B') {
      res += DB; // draw as blakc
    }
    if (s === '2W') {
      res += WW; // win as white
    }
    if (s === '2B') {
      res += WB; // win as black
    }
  }
  return res;
};

getMet = function(a, b) {
  var ref;
  return ref = b.id, indexOf.call(persons[a.id].opp, ref) >= 0;
};

colorize = function(persons) {
  var i, j, len, pa, pac, pb, pbc, ref, results;
  ref = range(Math.floor(persons.length / 2));
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    pa = persons[2 * i];
    pb = persons[2 * i + 1];
    pac = 'B W'[pa.mandatory + 1];
    pbc = 'B W'[pb.mandatory + 1];
    if (pac === pbc) {
      if (pa.colorComp <= pb.colorComp) {
        pac = 'W';
      } else {
        pac = 'B';
      }
    }
    pa.col += pac;
    results.push(pb.col += pac === 'W' ? 'B' : 'W');
  }
  return results;
};

pair = function(persons, pairing = []) {
  var a, b, j, len, mandatory, newPairing, newPersons, p, result;
  if (pairing.length === N) {
    return pairing;
  }
  antal += 1;
  a = persons[0];
  for (j = 0, len = persons.length; j < len; j++) {
    b = persons[j];
    if (a === b) {
      continue; // you can not meet yourself
    }
    if (getMet(a, b)) {
      continue; // a and b mst not have met before
    }
    mandatory = a.mandatory + b.mandatory;
    if (2 === Math.abs(mandatory)) {
      continue; // Players can not haave the same color
    }
    newPersons = (function() {
      var k, len1, results;
      results = [];
      for (k = 0, len1 = persons.length; k < len1; k++) {
        p = persons[k];
        if (p !== a && p !== b) {
          results.push(p);
        }
      }
      return results;
    })();
    newPairing = pairing.concat([a, b]);
    result = pair(newPersons, newPairing);
    if (result.length === N) {
      return result;
    }
  }
  return [];
};

adjustForColors = function(pairings) {
  var i, j, len, ref, res;
  res = [];
  ref = range(Math.floor(N / 2));
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    if (pairings[2 * i].col.length === 0 || 'W' === _.last(pairings[2 * i].col)) {
      res.push(pairings[2 * i]);
      res.push(pairings[2 * i + 1]);
    } else {
      res.push(pairings[2 * i + 1]);
      res.push(pairings[2 * i]);
    }
  }
  return res;
};

lotta = function() {
  var a, b, colorSum, i, j, k, l, latest, latest2, len, len1, len2, p, ref, start;
  print('Lottning av rond ', round);
  print(persons);
  for (j = 0, len = persons.length; j < len; j++) {
    p = persons[j];
    if (p.res.length !== p.col.length) {
      return;
    }
  }
  print('genomförs!');
  for (k = 0, len1 = persons.length; k < len1; k++) {
    p = persons[k];
    colorSum = sumBW(p.col);
    latest = p.col.length === 0 ? '' : _.last(p.col);
    latest2 = p.col.length < 2 ? '' : sumBW(_.slice(p.col, p.col.length - 2));
    p.mandatory = 0;
    if (colorSum <= -1 || latest2 === -2) {
      p.mandatory = 1;
    }
    if (colorSum >= 1 || latest2 === 2) {
      p.mandatory = -1;
    }
    p.colorComp = [
      colorSum,
      latest // fundera på ordningen här.
    ];
  }
  calcScore();
  if (round === 0) {
    pairings = persons;
    print('pairings', pairings);
    round = 1;
  } else {
    round += 1;
    pairings = _.sortBy(persons, ['score']);
    pairings = pairings.reverse();
    start = new Date();
    antal = 0;
    pairings = pair(pairings);
    print('pairings', pairings);
    print(round, `${antal} ${new Date() - start} milliseconds`);
  }
  colorize(pairings);
  pairings = adjustForColors(pairings);
  ref = range(Math.floor(N / 2));
  for (l = 0, len2 = ref.length; l < len2; l++) {
    i = ref[l];
    a = pairings[2 * i];
    b = pairings[2 * i + 1];
    a.opp.push(b.id);
    b.opp.push(a.id);
  }
  state = 0;
  return print({'pairings after pairing': 'pairings after pairing', pairings});
};

prRes = function(score) {
  var a, b;
  score = parseInt(score);
  if (score === 1) {
    return '½';
  }
  a = `${Math.floor(score / 2)}`;
  b = score % 2 === 1 ? '½' : '';
  return a + b;
};

assert('0', prRes('0'));

assert('½', prRes('1'));

assert('1', prRes('2'));

assert('1½', prRes(3));

assert('10', prRes(20));

assert('10½', prRes(21));

invert = function(arr) {
  var i, j, len, ref, res;
  res = [];
  ref = range(arr.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    res[arr[i]] = i;
  }
  return res;
};

assert([0, 1, 2, 3], invert([0, 1, 2, 3]));

assert([3, 2, 0, 1], invert([2, 3, 1, 0]));

calcScore = function() {
  var j, len, person, results;
  results = [];
  for (j = 0, len = persons.length; j < len; j++) {
    person = persons[j];
    results.push(person.score = scorex(person));
  }
  return results;
};

setT0 = function(p, q) {
  var r;
  if (indexOf.call(persons[p].opp, q) >= 0) {
    r = persons[p].opp.indexOf(q);
    return persons[p].T[0] = persons[p].res[r];
  }
};

calcT = function() {
  var i, j, k, key, len, len1, p, person, q, ref, results, scores;
  // T ska beräknas först när allt är klart!
  // Beräkna T1 bara för de poänggrupper som har exakt två personer och då enbart om de har mött varandra.
  // Oklart om detta används för grupper med t ex tre personer. Låg sannolikhet att alla mött varandra.
  scores = {};
  ref = range(persons.length);
  for (j = 0, len = ref.length; j < len; j++) {
    p = ref[j];
    person = persons[p];
    key = sum(person.res);
    if (key in scores) {
      scores[key].push(p);
    } else {
      scores[key] = [p];
    }
    person.T[0] = 0;
  }
  for (key in scores) {
    if (scores[key].length === 2) {
      [p, q] = scores[key];
      setT0(p, q);
      setT0(q, p);
    }
  }
  results = [];
  for (k = 0, len1 = persons.length; k < len1; k++) {
    p = persons[k];
    p.T[1] = p.res.split("").filter((x) => {
      return x === '2';
    }).length;
    p.T[2] = 0;
    results.push((function() {
      var l, len2, ref1, results1;
      ref1 = p.opp;
      results1 = [];
      for (l = 0, len2 = ref1.length; l < len2; l++) {
        i = ref1[l];
        results1.push(p.T[2] += sum(persons[i].res)); // Buchholz: the sum of opposition scores
      }
      return results1;
    })());
  }
  return results;
};

mw = function(x) {
  return x / 1000 * width;
};

//########## GUI ############
txtT = function(value, w, align = window.CENTER) {
  var diff, lt, res, rt;
  if (value.length > w) {
    value = value.substring(0, w);
  }
  if (align === window.LEFT) {
    res = value + _.repeat(' ', w - value.length);
  }
  if (align === window.RIGHT) {
    res = _.repeat(' ', w - value.length) + value;
  }
  if (align === window.CENTER) {
    diff = w - value.length;
    lt = _.repeat(' ', Math.floor((1 + diff) / 2));
    rt = _.repeat(' ', Math.floor(diff / 2));
    res = lt + value + rt;
  }
  return res;
};

assert("Sven      ", txtT("Sven", 10));

showHeader = function(header) {
  var s, y;
  y = DY / 2;
  textAlign(LEFT, CENTER);
  s = '';
  s += txtT(`${title} ${datum}`, 30, window.LEFT);
  s += ' ' + txtT(header, 22, window.CENTER);
  s += ' ' + txtT('Round ' + round, 30, window.RIGHT);
  fill('black');
  return text(s, 10, y);
};

txt = function(value, x, y, align = null, color = null) {
  if (align) {
    textAlign(align, CENTER);
  }
  if (color) {
    fill(color);
  }
  return text(value, x, y);
};

showTables = function() {
  var a, ar, b, br, i, j, len, nr, pa, pb, ref, results, s, y;
  showHeader('Tables');
  y = 1.5 * DY;
  s = "";
  s += txtT('#', 2, window.RIGHT);
  s += ' ' + txtT('Score', 5, window.RIGHT);
  s += ' ' + txtT('Elo', 4, window.LEFT);
  s += ' ' + txtT('White', 25, window.LEFT);
  s += ' ' + txtT('Result', 7, window.CENTER);
  s += ' ' + txtT('Black', 25, window.LEFT);
  s += ' ' + txtT('Elo', 4, window.LEFT);
  s += ' ' + txtT('Score', 5, window.RIGHT);
  fill('black');
  textAlign(window.LEFT);
  text(s, 10, y);
  ref = range(Math.floor(N / 2));
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    y += DY * 0.5;
    a = pairings[2 * i];
    b = pairings[2 * i + 1];
    pa = myRound(scorex(a), 1);
    pb = myRound(scorex(b), 1);
    ar = a.res.length === a.col.length ? prRes(_.last(a.res)) : " ";
    br = b.res.length === b.col.length ? prRes(_.last(b.res)) : " ";
    nr = i + 1;
    s = "";
    s += txtT(nr.toString(), 2, window.RIGHT);
    s += ' ' + txtT(pa, 5);
    s += ' ' + txtT(a.elo, 4);
    s += ' ' + txtT(a.name, 25, window.LEFT);
    s += ' ' + txtT(ar + ' - ' + br, 7, window.CENTER);
    s += ' ' + txtT(b.name, 25, window.LEFT);
    s += ' ' + txtT(b.elo, 4);
    s += ' ' + txtT(pb, 5, window.CENTER);
    fill(currentTable === i ? 'yellow' : 'black');
    results.push(text(s, 10, y));
  }
  return results;
};

lightbulb = function(color, x, y, result, opponent) {
  var strokeWeight;
  push();
  fill('red gray green'.split(' ')[result]);
  rectMode(CENTER);
  rect(x, y, 0.8 * DY, 0.45 * DY);
  fill({
    B: 'black',
    W: 'white'
  }[color]);
  //textSize DY * 0.5
  noStroke();
  strokeWeight = 0;
  txt(1 + opponent, x, y + 1, CENTER);
  return pop();
};

showResult = function() {
  var i, inv, j, len, p, person, r, results, rheader, s, score, temp, x, y;
  showHeader('Result');
  if (pairings.length === 0) {
    txt("This round can't be paired! (Too many rounds)", width / 2, height / 2, CENTER);
    return;
  }
  noStroke();
  calcT();
  calcScore();
  temp = _.sortBy(persons, ['score', 'T']);
  temp = temp.reverse();
  inv = (function() {
    var j, len, results;
    results = [];
    for (j = 0, len = temp.length; j < len; j++) {
      p = temp[j];
      results.push(p.id);
    }
    return results;
  })();
  inv = invert(inv);
  y = 1.5 * DY;
  textAlign(LEFT);
  rheader = _.map(range(1, ROUNDS + 1), function(i) {
    return `${i % 10} `;
  });
  rheader = rheader.join(' ');
  s = "";
  s += txtT("#", 2);
  s += ' ' + txtT("Elo", 4, window.LEFT);
  s += ' ' + txtT("Name", 25, window.LEFT);
  s += ' ' + txtT(rheader, 3 * ROUNDS, window.LEFT);
  s += ' ' + txtT("Score", 5, window.RIGHT);
  s += ' ' + txtT("D", 2, window.CENTER);
  s += ' ' + txtT("W", 1, window.CENTER);
  s += ' ' + txtT("B", 2, window.CENTER);
  text(s, 10, y);
  fill('white');

  //textSize DY * 0.5
  results = [];
  for (i = j = 0, len = temp.length; j < len; i = ++j) {
    person = temp[i];
    y += DY * 0.5;
    s = "";
    s += txtT((1 + i).toString(), 2, window.RIGHT);
    s += ' ' + txtT(person.elo, 4, window.LEFT);
    s += ' ' + txtT(person.name, 25, window.LEFT);
    s += ' ' + txtT('', 3 * ROUNDS, window.CENTER);
    score = scorex(person);
    score = myRound(score, 1);
    s += ' ' + txtT(score, 5, window.RIGHT);
    s += ' ' + txtT(prRes(person.T[0]), 2, window.CENTER);
    s += ' ' + txtT(person.T[1], 2, window.CENTER);
    s += ' ' + txtT(prRes(person.T[2]), 2, window.CENTER);
    text(s, 10, y);
    results.push((function() {
      var k, len1, ref, results1;
      ref = range(round);
      results1 = [];
      for (k = 0, len1 = ref.length; k < len1; k++) {
        r = ref[k];
        x = DY * (10.5 + 0.9 * r);
        results1.push(lightbulb(person.col[r][0], x, y, person.res[r], inv[person.opp[r]]));
      }
      return results1;
    })());
  }
  return results;
};

window.windowResized = function() {};

// DY = 30 # mw 50
// createCanvas windowWidth-30,windowHeight
// if state == 0 then resizeCanvas windowWidth, DY * (N//2+2)
// if state == 1 then resizeCanvas windowWidth, DY * (N+2)
if (location.search === '') {
  title = 'Tutorial Tournament';
  datum = new Date();
  datum = datum.toISOString().split('T')[0];
  url = `?T=${title.replace(" ", "_")}&NAME=ANDERSSON_Anders|BENGTSSON_Bertil|CARLSEN_Christer|DANIELSSON_Daniel|ERIKSSON_Erik|FRANSSON_Ferdinand|GREIDER_Göran|HARALDSSON_Helge`;
  location.href = url;
} else {
  fetchURL();
  pairings = persons;
}

window.setup = function() {
  createCanvas(windowWidth - 4, windowHeight - 4);
  textFont('Courier New');
  textAlign(CENTER, CENTER);
  return lotta();
};

window.draw = function() {
  background('gray');
  textSize(DY * 0.5);
  if (state === 0) {
    return showTables();
  } else if (state === 1) {
    return showResult();
  }
};

window.keyPressed = function() {
  var a, b, index, temp;
  print(keyCode, key);
  if (key === 'ArrowUp') {
    currentTable = modulo(currentTable - 1, 7);
  }
  if (key === 'ArrowDown') {
    currentTable = modulo(currentTable + 1, 7);
  }
  index = 2 * currentTable;
  a = pairings[index];
  b = pairings[index + 1];
  if (key === '0') {
    if (a.res.length < a.col.length) {
      a.res += '0';
    }
    if (b.res.length < b.col.length) {
      b.res += '2';
    }
  }
  if (key === ' ') {
    if (a.res.length < a.col.length) {
      a.res += '1';
    }
    if (b.res.length < b.col.length) {
      b.res += '1';
    }
  }
  if (key === '1') {
    if (a.res.length < a.col.length) {
      a.res += '2';
    }
    if (b.res.length < b.col.length) {
      b.res += '0';
    }
  }
  if (indexOf.call('1 0', key) >= 0) {
    currentTable = modulo(currentTable + 1, 7);
  }
  if (key === 'Enter') {
    state = 1 - state;
    if (state === 1) {
      calcT();
      calcScore();
      temp = _.sortBy(persons, ['score', 'T']);
      temp = temp.reverse();
      print(temp);
    }
  }
  if (indexOf.call('lL', key) >= 0) {
    lotta();
  }
  if (key === '=') {
    DY += 1;
    print(DY);
  }
  if (key === '-') {
    DY -= 1;
    return print(DY);
  }
};

//############################

// start = new Date()
// #for round in range 0 # N//2
// lotta()
// print 'persons',persons
// print "#{new Date() - start} milliseconds"

// calcT()
// temp = _.sortBy persons, ['score', 'T']
// temp = temp.reverse()
// print temp

//######################################

// selectRounds = (n) -> # antal ronder ska vara cirka 150% av antalet matcher i en cup. Samt jämnt.
// 	res = Math.floor 1.50 * Math.log2 n
// 	res += res % 2
// 	if 2*res > n then res -= 1
// 	if n==4 then res = 2
// 	res
// assert 2, selectRounds 4
// assert 3, selectRounds 6
// assert 4, selectRounds 10
// assert 6, selectRounds 12
// assert 6, selectRounds 24
// assert 8, selectRounds 26
// assert 8, selectRounds 60
// assert 10, selectRounds 64

// for i in range N//2
// a = pairings[2*i+0]
// b = pairings[2*i+1]
// z = random()
// if z < 0.1 then res = 1
// else if z < 0.5 then res =  0
// else res = 2
// a.res += res.toString()
// b.res += (2-res).toString()

// N = 16
// for i in range N
// 	persons.push { id:i, name:i, col:"", res:"", score:0, opp:[], T:[0,0,0] }

// showNames = ->
// 	showHeader 'Names'
// 	textSize 0.5 * DY
// 	txt 'Table Name',mw(  5),DY*1.5,LEFT
// 	txt 'Table Name',mw(505),DY*1.5,LEFT
// 	for person,i in pairings
// 		x = mw(500) * (person.id // (N//2))
// 		y = DY * (2.5 + person.id % (N//2))
// 		bord = 1 + i//2
// 		fill if 'B' == _.last person.col then 'black' else 'white'
// 		txt bord,0.75*DY+x,y,RIGHT
// 		txt person.name,DY+x,y,LEFT

// 	buttons[3][0].active = false

// seed = 14 # Math.random()
// random = ->
// 	seed++
// 	(((Math.sin(seed)/2+0.5)*10000)%100)/100

// lotta_inner = (pairings) -> # personer sorterade
// 	# denna funktion anpassar till maxWeightMatching
// 	arr = []
// 	#print 'aaa',pairings
// 	for a in pairings
// 		for b in pairings
// 			if a.id >= b.id then continue
// 			if getMet a, b then continue
// 			mandatory = a.mandatory + b.mandatory
// 			if Math.abs(mandatory) == 2 then continue # Spelarna kan inte ha samma färg.
// 			arr.push([a.id+1, b.id+1, 1000 - Math.abs(scorex(a) - scorex(b))])
// 	print('arr',arr)
// 	z = maxWeightMatching arr
// 	print 'z',z
// 	z = z.slice 1 #[1:N+1]
// 	res = []
// 	for i in range N
// 		if i < z[i]-1 then res.concat [i,z[i]-1]
// 	# res är ej sorterad i bordsordning ännu

// 	#print 'adam',res

// 	result = []
// 	for i in range(N//2)
// 		ia = res[2*i]
// 		ib = res[2*i+1]
// 		a = persons[ia]
// 		b = persons[ib]
// 		lst = [scorex(a),scorex(b)]
// 		lst.sort(reverse=True)
// 		result.append([lst,ia,ib])
// 	result.sort(reverse=True)

// 	resultat = []
// 	for i in range(N//2)
// 		[_,ia,ib] = result[i]
// 		resultat.concat [ia,ib]
// 		# a = persons[ia]
// 		# b = persons[ib]
// 		# pa = scorex(a) # sum(a['result'])/2
// 		# pb = scorex(b) # sum(b['result'])/2
// 		# print('',i+1,' ',pa,a["name"],'         ',b["name"],' ',pb)
// 	resultat

// moveAllButtons = ->
// 	buttons[2][0].setExtent mw(950),0.45*DY, mw(60),0.55*DY
// 	buttons[3][0].setExtent mw(950),0.45*DY, mw(60),0.55*DY
// 	buttons[4][0].setExtent mw(950),0.45*DY, mw(60),0.55*DY

// 	for i in range N//2
// 		y = DY * (i+2.5)
// 		buttons[3][3*i+1].setExtent mw(200),y, mw(200),30
// 		buttons[3][3*i+2].setExtent mw(500),y, mw(200),30
// 		buttons[3][3*i+3].setExtent mw(600),y, mw(200),30

// updateAllButtons = ->
// 	for i in range N//2
// 		white = pairings[2*i+0]
// 		black = pairings[2*i+1]
// 		buttons[3][3*i+1].prompt = white.name
// 		buttons[3][3*i+1].align = LEFT
// 		buttons[3][3*i+2].prompt = '-'
// 		buttons[3][3*i+3].prompt = black.name
// 		buttons[3][3*i+3].align = LEFT

// createAllButtons = ->

// 	buttons = [[],[],[],[],[]]

// 	buttons[2].push new Button 'next', 'yellow', ->
// 		state = 3
// 		print('state',state)

// 		updateAllButtons()

// 	buttons[3] = []
// 	buttons[3].push new Button 'next', 'yellow', ->
// 		state = 4
// 		print('state',state)

// 		transferResult()
// 		windowResized()
// 	for i in range N//2
// 		n = buttons[3].length
// 		do (n) ->
// 			buttons[3].push new Button 'white','white',     -> setPrompt buttons[3][n+1], '1 - 0'
// 			buttons[3].push new Button '-',    'lightgray', -> setPrompt buttons[3][n+1], '½ - ½'
// 			buttons[3].push new Button 'black', 'black',    -> setPrompt buttons[3][n+1], '0 - 1'

// 	buttons[4].push new Button 'next', 'yellow', ->
// 		resizeCanvas windowWidth, DY * (N//2+2)
// 		s = createURL()
// 		print s
// 		copyToClipboard s
// 		if rond < ROUNDS-1
// 			rond += 1
// 			for person in persons
// 				person.score = scorex person
// 			print persons
// 			lotta()
// 			print {pairings}
// 	print "#{buttons[3].length + 2} buttons created"

// window.mousePressed = (event) ->
// 	event.preventDefault()
// 	if not released then return
// 	released = false
// 	for button in buttons[state]
// 		if button.inside mouseX,mouseY then button.click()
// 	false

// window.mouseReleased = (event) ->
// 	event.preventDefault()
// 	released = true
// 	false

// setPrompt = (button,prompt) -> 
// 	button.prompt = if button.prompt == prompt then '-' else prompt
// 	for button in buttons[3].slice 1
// 		if button.prompt == '-'
// 			buttons[3][0].active = false
// 			return
// 	buttons[3][0].active = true

// transferResult = ->
// 	for i in range N//2
// 		button = buttons[3][2+3*i]
// 		white = {'1 - 0': 2,'½ - ½': 1,'0 - 1': 0}[button.prompt]
// 		pairings[2*i+0].res += "012"[white]
// 		pairings[2*i+1].res += "012"[2-white]
// 		button.prompt = '-'

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023\044-Monrad\coffee\monrad.coffee