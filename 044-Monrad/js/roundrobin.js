// Generated by CoffeeScript 2.7.0
var ASCII, HELP, N, Player, Tournament, ZOOM, assert, calcT, copyToClipboard, currentTable, datum, downloadFile, elo_probabilities, errors, initials, ints2strings, invert, message, mw, myRound, ok, other, prBoth, prRes, print, range, res2string, resultat, setT0, showHelp, showType, state, sum, tournament, xdraw, xxx,
  indexOf = [].indexOf,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

import {
  parseExpr
} from './parser.js';

HELP = `How to use Schwisch Manager:
	Enter = Switch between Tables and Result
	Home = Select First Table
	Up   = Select Previous Table
	Down = Select Next Table
	End  = Select Last Table
	0 = Enter a Loss for White Player
	space = Enter a Draw
	1 = Enter a Win for White Player
	Delete = Remove erroneous result
	P = Perform Pairing
	S = Make text smaller
	L = Make text larger
	? = Show this Help Page
	H = Show Help for constructing the URL`.split('\n');

ASCII = '0123456789abcdefg';

N = 0; // number of players

ZOOM = [
  40,
  40,
  40 // vertical line distance for three states
];

print = console.log;

range = _.range;

datum = '';

currentTable = 0;

tournament = null;

errors = []; // id för motsägelsefulla resultat. Tas bort med Delete

state = 0; // 0=Tables 1=Result 2=Help

resultat = []; // 012 sorterad på id

showType = function(a) {
  if (typeof a === 'string') {
    return `'${a}'`;
  } else {
    return a;
  }
};

assert = function(a, b) {
  if (!_.isEqual(a, b)) {
    return print(`Assert failure: ${showType(a)} != ${showType(b)}`);
  }
};

ok = function(p0, p1) {
  var ref;
  return p0.id !== p1.id && (ref = p0.id, indexOf.call(p1.opp, ref) < 0) && abs(p0.balans() + p1.balans()) <= 1;
};

other = function(col) {
  if (col === 'b') {
    return 'w';
  } else {
    return 'b';
  }
};

message = ''; //This is a tutorial tournament. Use it or edit the URL'

myRound = function(x, decs) {
  return x.toFixed(decs);
};

assert("2.0", myRound(1.99, 1));

assert("0.6", myRound(0.61, 1));

ints2strings = function(ints) {
  return `${ints}`;
};

assert("1,2,3", ints2strings([1, 2, 3]));

assert("1", ints2strings([1]));

assert("", ints2strings([]));

res2string = function(ints) {
  var i;
  return ((function() {
    var j, len, results;
    results = [];
    for (j = 0, len = ints.length; j < len; j++) {
      i = ints[j];
      results.push(i.toString());
    }
    return results;
  })()).join('');
};

assert("123", res2string([1, 2, 3]));

assert("1", res2string([1]));

assert("", res2string([]));

xxx = [[2, 1], [12, 2], [12, 1], [3, 4]];

xxx.sort(function(a, b) {
  var diff;
  diff = a[0] - b[0];
  if (diff === 0) {
    return a[1] - b[1];
  } else {
    return diff;
  }
});

assert([[2, 1], [3, 4], [12, 1], [12, 2]], xxx);

assert(true, [2] > [12]);

assert(true, "2" > "12");

assert(false, 2 > 12);

// xxx = [[2,1],[12,2],[12,1],[3,4]]
// assert [[2,1],[3,4],[12,2]], _.sortBy(xxx, (x) -> [x[0],x[1]])
// assert [[3,4],[2,1],[1,2]], _.sortBy(xxx, (x) -> -x[0])
// assert [[2,1],[1,2],[3,4]], _.sortBy(xxx, (x) -> x[1])
// assert [[3,4],[1,2],[2,1]], _.sortBy(xxx, (x) -> -x[1])
initials = function(name) {
  var arr, j, len, res, s;
  res = "";
  arr = name.replace('-', ' ').split(' ');
  for (j = 0, len = arr.length; j < len; j++) {
    s = arr[j];
    res += s[0];
  }
  return res;
};

assert('cn', initials('christer nilsson'));

assert('JLB', initials('JOHANSSON Lennart B.'));

// cdf = (x) -> # https://www.geeksforgeeks.org/javascript-program-for-normal-cdf-calculator/
//     T = 1 / (1 + 0.2316419 * Math.abs x)
//     D = 0.3989423 * Math.exp -x * x / 2
//     cd = D * T * (0.3193815 + T * (-0.3565638 + T * (1.781478 + T * (-1.821256 + T * 1.330274))))
//     if x > 0 then 1 - cd else cd

  // calc = (winner, loser, result, K) ->
//     diff = winner - loser
//     u = diff/400 * sqrt(2)
//     (result - cdf(u)) * K

  // elodiff = (games,K=20) -> [calc(a,b,res,K) for a,b,res in games]
Player = class Player {
  constructor(id, elo = "", opp = [], col2 = "", res1 = "", name1 = "") {
    this.id = id;
    this.elo = elo;
    this.opp = opp;
    this.col = col2;
    this.res = res1;
    this.name = name1;
  }

  toString() {
    return `${this.id} ${this.name} elo:${this.elo} ${this.col} res:${this.res} opp:[${this.opp}] score:${this.score().toFixed(1)} eloSum:${this.eloSum().toFixed(0)}`;
  }

  eloSum() {
    var i, j, key, len, ref, res, result, sp;
    result = 0;
    sp = tournament.sp;
    ref = range(this.res.length);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      key = this.col[i] + this.res[i];
      res = {
        'w2': 1,
        'b2': 1 + 2 * sp,
        'w1': 0.5 - sp,
        'b1': 0.5 + sp,
        'w0': 0,
        'b0': 0
      }[key];
      result += tournament.persons[this.opp[i]].elo * res;
    }
    return result;
  }

  balans() { // färgbalans
    var ch, j, len, ref, result;
    result = 0;
    ref = this.col;
    for (j = 0, len = ref.length; j < len; j++) {
      ch = ref[j];
      if (ch === 'b') {
        result -= 1;
      }
      if (ch === 'w') {
        result += 1;
      }
    }
    return result;
  }

  score() {
    var i, j, key, len, n, ref, res, result, sp;
    result = 0;
    n = tournament.round;
    sp = tournament.sp;
    ref = range(n);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      if (i < this.col.length && i < this.res.length) {
        key = this.col[i] + this.res[i];
        //result += {'w2': 1-sp, 'b2': 1, 'w1': 0.5-sp, 'b1': 0.5+sp, 'w0': 0, 'b0': sp}[key]
        res = {
          'w2': 1,
          'b2': 1 + 2 * sp,
          'w1': 0.5 - sp,
          'b1': 0.5 + sp,
          'w0': 0,
          'b0': 0
        }[key];
      }
    }
    //print 'id,score',@id, @res, result,n
    return result;
  }

  // weight_xxx : -> 
  // 	r = tournament.round
  // 	R = tournament.rounds
  // 	w = tournament.weights # t ex [0/7 1/7 2/7 3/7 4/7 5/7 6/7 7/7] vid åtta ronder
  // 	# N är antal spelare
  // 	#result = w[r] * @score()/R + w[R-1-r] * (N-@id)/N
  // 	result = w[r] * @score()/R + (1-w[r]) * (N-@id)/N
  // 	# print "w[r]=#{w[r]} score=#{@score()} R=#{R} w[R-1-r]=#{w[R-1-r]} (N-@id)/N=#{(N-@id)/N} result=#{result}"
  // 	result

    // weight : ->
  // 	@elo
  // 	#@score() # + (7-tournament.round) * (N-1-@id)/(N-1)
  // 	# print 'weight',@score(),@id,N,result
  // 	#result
  // 	# R = tournament.rounds
  // 	# for r in range R
  // 	# 	if r < @opp.length and r < @res.length
  // 	# 		result += tournament.persons[@opp[r]].score() * 0.5 * int @res[r]
  // 	# result
  read(player) {
    var arr, col, j, len, ocr, ocrs;
    
    // (1234|Christer|(12w0|23b½|14w)) 
    // (1234|Christer) 
    // print 'read',player
    this.elo = parseInt(player[0]);
    this.name = player[1];
    // print @elo 
    this.opp = [];
    this.col = "";
    this.res = "";
    if (player.length < 3) {
      return;
    }
    ocrs = player[2];
//print 'ocrs',ocrs
    for (j = 0, len = ocrs.length; j < len; j++) {
      ocr = ocrs[j];
      //print 'ocr',ocr
      if (indexOf.call(ocr, 'w') >= 0) {
        col = 'w';
      } else {
        col = 'b';
      }
      arr = ocr.split(col);
      this.opp.push(parseInt(arr[0]));
      this.col += col;
      if (arr.length === 2 && arr[1].length === 1) {
        //print 'arr',arr[1]
        this.res += {
          '0': '0',
          '½': '1',
          '1': '2'
        }[arr[1]];
      }
    }
    
    //print @res
    return print(this);
  }

  write() { // (1234|Christer|(12w0|23b½|14w)) Elo:1234 Name:Christer opponent:23 color:b result:½
    var i, nn, ocr, res;
    res = [];
    res.push(this.elo);
    res.push(this.name.replaceAll(' ', '_'));
    nn = this.opp.length;
    // ocr = ("#{@opp[i]}#{@col[i]}#{if i < nn-1 then "0½1"[@res[i]] else ''}" for i in range(nn)) 
    ocr = (function() {
      var j, len, ref, results;
      ref = range(nn);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        results.push(`${this.opp[i]}${this.col[i]}${i < nn ? "0½1"[this.res[i]] : ''}`);
      }
      return results;
    }).call(this);
    res.push('(' + ocr.join('|') + ')');
    return res.join('|');
  }

};

Tournament = class Tournament {
  constructor() {
    this.name = '';
    this.rounds = 0;
    this.round = 0;
    this.sp = 0.0; // 0.01
    this.tpp = 30;
    this.ppp = 60;
    // dessa tre listor pekar på samma objekt
    this.players = [];
    this.persons = []; // stabil, sorterad på id och elo
    this.pairings = []; // varierar med varje rond
    this.robin = range(N);
    this.fetchURL();
    this.mat = [];
  }

  // @round -= 1
  //@lotta()
  write() {}

  pair(persons, pairing = []) {
    var a, b, j, len, newPairing, newPersons, p, result;
    if (pairing.length === N) {
      return pairing;
    }
    a = persons[0];
    for (j = 0, len = persons.length; j < len; j++) {
      b = persons[j];
      if (!ok(a, b)) {
        continue;
      }
      newPersons = (function() {
        var k, len1, results;
        results = [];
        for (k = 0, len1 = persons.length; k < len1; k++) {
          p = persons[k];
          if (p !== a && p !== b) {
            results.push(p);
          }
        }
        return results;
      })();
      newPairing = pairing.concat([a, b]);
      result = this.pair(newPersons, newPairing);
      if (result.length === N) {
        return result;
      }
    }
    return [];
  }

  flip(p0, p1) { // p0 byter färg, p0 anpassar sig
    var col0, col1;
    //print 'flip',p0.col,p1.col
    col0 = _.last(p0.col);
    col1 = col0;
    col0 = other(col0);
    p0.col += col0;
    return p1.col += col1;
  }

  assignColors(p0, p1) {
    var b0, b1, balans, col0, col1, x;
    b0 = p0.balans();
    b1 = p1.balans();
    if (b0 < b1) {
      x = 0;
    } else if (b0 > b1) {
      x = 1;
    } else if (p0.id < p1.id) {
      x = 0;
    } else {
      x = 1;
    }
    p0.col += 'wb'[x];
    p1.col += 'bw'[x];
    return;
    if (p0.col.length === 0) {
      col1 = this.first[p0.id % 2];
      col0 = other(col1);
      print('assignColors', col0, col1);
      p0.col += col0;
      return p1.col += col1;
    } else {
      balans = p0.balans() + p1.balans();
      if (balans === 0) {
        return this.flip(p0, p1);
      } else if (2 === abs(balans)) {
        if (2 === abs(p0.balans())) {
          return this.flip(p0, p1);
        } else {
          return this.flip(p1, p0);
        }
      } else {
        return print('unexpected', balans);
      }
    }
  }

  lotta() {
    var a, b, col0, col1, i, j, k, l, len, len1, len2, len3, len4, len5, len6, len7, m, o, p, ref, ref1, ref2, ref3, ref4, ref5, ref6, t, temp, timestamp, u, v;
    ref = this.players;
    //print @players
    for (j = 0, len = ref.length; j < len; j++) {
      p = ref[j];
      if (p.res.length !== p.col.length) {
        print('avbrutet!');
        return;
      }
    }
    print('Lottning av rond ', this.round);
    document.title = 'Round ' + (this.round + 1);
    this.players = _.clone(this.players);
    this.players.sort(function(a, b) {
      return b.elo - a.elo;
    });
    print("");
    print('sorterat på elo');
    ref1 = this.players;
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      p = ref1[k];
      print(p.toString());
    }
    if (this.round % 2 === 1) {
      this.players = this.players.reverse(); // reverse verkar inte spela någon roll
    }
    print('sorterat på id');
    ref2 = this.persons;
    for (l = 0, len2 = ref2.length; l < len2; l++) {
      p = ref2[l];
      print(p.toString());
    }
    if (this.round === 7) {
      temp = _.clone(this.players);
      temp.sort(function(a, b) {
        var diff;
        diff = b.eloSum() - a.eloSum();
        if (diff !== 0) {
          return diff;
        }
        return b.score() - a.score();
      });
      print('sorterat på [eloSum,score]');
      for (m = 0, len3 = temp.length; m < len3; m++) {
        p = temp[m];
        print(p.toString());
      }
    }
    //print 'före pair',@players
    this.pairings = this.pair(this.players);
    ref3 = range(Math.floor(N / 2));
    for (o = 0, len4 = ref3.length; o < len4; o++) {
      i = ref3[o];
      a = this.pairings[2 * i];
      b = this.pairings[2 * i + 1];
      a.opp.push(b.id);
      b.opp.push(a.id);
    }
    ref4 = range(Math.floor(N / 2));
    for (t = 0, len5 = ref4.length; t < len5; t++) {
      i = ref4[t];
      a = this.pairings[2 * i];
      b = this.pairings[2 * i + 1];
      print(`${a.id}-${b.id} elo ${a.elo} vs ${b.elo}`);
    }
    if (this.round === 0) {
      ref5 = range(Math.floor(N / 2));
      for (u = 0, len6 = ref5.length; u < len6; u++) {
        i = ref5[u];
        a = this.pairings[2 * i];
        b = this.pairings[2 * i + 1];
        col1 = "bw"[i % 2];
        col0 = other(col1);
        // print 'assignColors',col0,col1
        a.col += col0;
        b.col += col1;
      }
    } else {
      ref6 = range(Math.floor(N / 2));
      for (v = 0, len7 = ref6.length; v < len7; v++) {
        i = ref6[v];
        a = this.pairings[2 * i];
        b = this.pairings[2 * i + 1];
        this.assignColors(a, b);
      }
    }
    timestamp = new Date().toLocaleString('se-SE');
    downloadFile(tournament.makeTableFile(" for " + this.name + ` in Round ${this.round}    ${timestamp}`), this.name + ` Round ${this.round}.txt`);
    downloadFile(this.createURL(), "URL for " + this.name + ` Round ${this.round}.txt`);
    this.round += 1;
    state = 0;
    return xdraw();
  }

  fetchURL(url = location.search) {
    var getParam, i, j, k, len, len1, p, player, players, ref, ref1, urlParams;
    print('fetchURL');
    print(url);
    getParam = function(name, def) {
      var res;
      res = urlParams.get(name);
      //if res then res else def
      return res || def;
    };
    urlParams = new URLSearchParams(url);
    this.players = [];
    this.name = urlParams.get('TOUR').replace('_', ' ');
    this.datum = urlParams.get('DATE') || "";
    this.rounds = parseInt(urlParams.get('ROUNDS'));
    this.round = parseInt(urlParams.get('ROUND'));
    this.first = getParam('FIRST', 'bw'); // Determines if first player has white or black in the first round
    this.sp = parseFloat(getParam('SP', 0.0)); // ScorePoints
    this.tpp = parseInt(getParam('TPP', 30)); // Tables Per Page
    this.ppp = parseInt(getParam('PPP', 60)); // Players Per Page
    players = urlParams.get('PLAYERS');
    print(players);
    players = players.replaceAll(')(', ')|(');
    players = players.replaceAll('_', ' ');
    players = '(' + players + ')';
    players = parseExpr(players);
    print('xxx', players);
    // players.sort (a,b) -> b.elo - a.elo
    N = players.length;
    if (N < 4) {
      print("Error: Number of players must be 4 or more!");
      return;
    }
    if (N > 100) {
      print("Error: Number of players must be 100 or less!");
      return;
    }
    ref = range(N);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      player = new Player(i);
      player.read(players[i]);
      this.players.push(player);
    }
    print(this.players);
    this.players = _.sortBy(this.players, function(player) {
      return player.elo;
    });
    this.players = this.players.reverse();
    this.persons = _.cloneDeep(this.players);
    ref1 = range(N);
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      i = ref1[k];
      this.players[i].id = i;
    }
    this.persons = _.clone(this.players);
    print((function() {
      var l, len2, ref2, results;
      ref2 = this.persons;
      results = [];
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        p = ref2[l];
        results.push(p.elo);
      }
      return results;
    }).call(this));
    print('sorted players', this.players);
    if (this.ROUND > 0) {

    } else {
      if (N % 2 === 1) {
        this.players.push(new Player(N, 0, '-frirond-'));
        return N += 1;
      }
    }
  }

  // persons = _.map range(N), (i) -> {id:i, name: res.NAME[i], elo: res.ELO[i], col:'', res:[], bal:0, opp:[], T:[]}
  txtT(value, w, align = window.CENTER) {
    var diff, lt, res, rt;
    if (value.length > w) {
      value = value.substring(0, w);
    }
    if (value.length < w && align === window.RIGHT) {
      value = value.padStart(w);
    }
    if (align === window.LEFT) {
      res = value + _.repeat(' ', w - value.length);
    }
    if (align === window.RIGHT) {
      res = _.repeat(' ', w - value.length) + value;
    }
    if (align === window.CENTER) {
      diff = w - value.length;
      lt = _.repeat(' ', Math.floor((1 + diff) / 2));
      rt = _.repeat(' ', Math.floor(diff / 2));
      res = lt + value + rt;
    }
    return res;
  }

  //assert "   Sven   ", txtT "Sven",10
  showHeader(header) {
    var s, y;
    y = ZOOM[state] / 2;
    textAlign(LEFT, CENTER);
    s = '';
    s += this.txtT(`${this.name} ${this.datum}`, 30, window.LEFT);
    s += ' ' + this.txtT(header, 22, window.CENTER);
    s += ' ' + this.txtT('Round ' + this.round, 30, window.RIGHT);
    fill('black');
    return text(s, 10, y);
  }

  txt(value, x, y, align = null, color = null) {
    if (align) {
      textAlign(align, CENTER);
    }
    if (color) {
      fill(color);
    }
    return text(value, x, y);
  }

  showTables() {
    var a, b, both, i, j, len, nr, pa, pb, ref, results, s, y;
    this.showHeader('Tables');
    y = 1.5 * ZOOM[state];
    s = "";
    s += this.txtT('#', 2, window.RIGHT);
    s += ' ' + this.txtT('Score', 5, window.RIGHT);
    s += ' ' + this.txtT('Elo', 4, window.RIGHT);
    s += ' ' + this.txtT('White', 25, window.LEFT);
    s += ' ' + this.txtT('Result', 7, window.CENTER);
    s += ' ' + this.txtT('Black', 25, window.LEFT);
    s += ' ' + this.txtT('Elo', 4, window.LEFT);
    s += ' ' + this.txtT('Score', 5, window.RIGHT);
    fill('black');
    textAlign(window.LEFT);
    text(s, 10, y);
    ref = range(Math.floor(N / 2));
    //print 'pairings.length',@pairings.length
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      y += ZOOM[state] * 0.5;
      a = this.pairings[2 * i];
      b = this.pairings[2 * i + 1];
      pa = myRound(a.score(), 1);
      pb = myRound(b.score(), 1);
      both = a.res.length === a.col.length ? prBoth(_.last(a.res)) : "   -   ";
      nr = i + 1;
      s = "";
      s += this.txtT(nr.toString(), 2, window.RIGHT);
      s += ' ' + this.txtT(pa, 5);
      s += ' ' + this.txtT(a.elo.toString(), 4, window.RIGHT);
      s += ' ' + this.txtT(a.name, 25, window.LEFT);
      s += ' ' + this.txtT(both, 7, window.CENTER);
      s += ' ' + this.txtT(b.name, 25, window.LEFT);
      s += ' ' + this.txtT(b.elo.toString(), 4, window.RIGHT);
      s += ' ' + this.txtT(pb, 5, window.CENTER);
      if (i === currentTable) {
        fill('yellow');
        noStroke();
        rect(0, y - 0.25 * ZOOM[state], width, 0.5 * ZOOM[state]);
        fill('black');
      } else {
        if (indexOf.call(errors, i) >= 0) {
          fill('red');
        } else {
          fill('black');
        }
      }
      results.push(text(s, 10, y));
    }
    return results;
  }

  lightbulb(color, x, y, result, opponent) {
    var strokeWeight;
    // print 'lightbulb',color, x, y, result, opponent
    push();
    //print 'lightbulb',result
    // result = 2 * '0½1'.indexOf result
    result = '012'.indexOf(result);
    //print 'lightbulb',result
    fill('red gray green'.split(' ')[result]);
    rectMode(CENTER);
    rect(x, y, 0.84 * ZOOM[state], 0.45 * ZOOM[state]);
    fill({
      b: 'black',
      w: 'white'
    }[color]);
    noStroke();
    strokeWeight = 0;
    //		@txt 1+opponent,x,y+1,CENTER
    this.txt(opponent, x, y + 1, CENTER);
    return pop();
  }

  createURL() {
    var j, len, player, players, ref, res, s;
    res = [];
    //res.push "https://christernilsson.github.io/2023/044-Monrad"
    res.push("http://127.0.0.1:5500");
    res.push("?TOUR=" + this.name.replace(' ', '_'));
    res.push("&DATE=" + "2023-11-25");
    res.push("&ROUNDS=" + this.rounds);
    res.push("&ROUND=" + this.round);
    res.push("&PLAYERS=");
    players = [];
    ref = this.players;
    for (j = 0, len = ref.length; j < len; j++) {
      player = ref[j];
      s = player.write();
      players.push('(' + s + ')');
    }
    players = players.join("\n");
    res = res.concat(players);
    return res.join('\n');
  }

  makeTableFile(header) {
    var a, b, i, j, k, len, len1, p, players, ref, res;
    res = [];
    //print header
    //print 'makeTableFile',@pairings
    players = (function() {
      var j, len, ref, results;
      ref = range(N);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        results.push([this.pairings[i], i]);
      }
      return results;
    }).call(this);
    players = _.sortBy(players, function(p) {
      return p[0].name;
    });
    players = (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = players.length; j < len; j++) {
        [p, i] = players[j];
        results.push(`${_.pad((1 + Math.floor(i / 2)).toString() + 'wb'[i % 2], 5)} ${p.name}`);
      }
      return results;
    })();
    res.push("NAMES" + header);
    res.push("");
    for (i = j = 0, len = players.length; j < len; i = ++j) {
      p = players[i];
      if (i % this.ppp === 0) {
        res.push("Table Name");
      }
      res.push(p);
      if (i % this.ppp === this.ppp - 1) {
        res.push("\f");
      }
    }
    res.push("\f");
    res.push("TABLES" + header);
    res.push("");
    ref = range(Math.floor(N / 2));
    for (k = 0, len1 = ref.length; k < len1; k++) {
      i = ref[k];
      if (i % this.tpp === 0) {
        res.push("Table White".padEnd(6 + 25) + _.pad("", 20) + 'Black'.padEnd(25));
      }
      a = this.pairings[2 * i];
      b = this.pairings[2 * i + 1];
      res.push("");
      res.push(_.pad(i + 1, 6) + a.name.padEnd(25) + _.pad("|____| - |____|", 20) + b.name.padEnd(25));
      if (i % this.tpp === this.tpp - 1) {
        res.push("\f");
      }
    }
    return res.join("\n");
  }

  showResult() {
    var i, j, len, person, r, ref, results, rheader, s, score, x, y;
    this.showHeader('Result');
    print('showResult');
    if (this.pairings.length === 0) {
      txt("This ROUND can't be paired! (Too many rounds)", width / 2, height / 2, CENTER);
      return;
    }
    noStroke();
    // calcT()

    // _.sortBy på [score, elo] verkar inte fungera pga array jämförs som sträng?

    // temp = _.clone @players
    // temp.sort (a,b) -> 
    // 	return a.id - b.id 

    // 	diff = b.eloSum() - a.eloSum()
    // 	if diff != 0 then return diff
    // 	return b.elo - a.elo

    // print 'tempA',temp
    //temp.reverse()

    // inv = (p.id for p in temp)
    // inv = invert inv
    y = 1.5 * ZOOM[state];
    textAlign(LEFT);
    rheader = _.map(range(1, this.rounds + 1), function(i) {
      return `${i % 10} `;
    });
    rheader = rheader.join(' ');
    s = "";
    s += this.txtT("#", 2);
    s += ' ' + this.txtT("Elo", 4, window.RIGHT);
    s += ' ' + this.txtT("Name", 25, window.LEFT);
    s += ' ' + this.txtT(rheader, 3 * this.rounds, window.LEFT);
    
    // s += ' ' + @txtT "Score",5,window.RIGHT
    s += ' ' + this.txtT("EloSum", 6, window.RIGHT);
    s += ' ' + this.txtT("D", 2, window.CENTER);
    s += ' ' + this.txtT("W", 1, window.CENTER);
    s += ' ' + this.txtT("B", 2, window.CENTER);
    text(s, 10, y);
    fill('white');
    ref = tournament.persons;
    results = [];
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      person = ref[i];
      y += ZOOM[state] * 0.5;
      s = "";
      s += this.txtT((1 + i).toString(), 2, window.RIGHT);
      s += ' ' + this.txtT(person.elo.toString(), 4, window.RIGHT);
      s += ' ' + this.txtT(person.name, 25, window.LEFT);
      s += ' ' + this.txtT('', 3 * this.rounds, window.CENTER);
      print(person);
      score = person.score();
      score = myRound(score, 1);
      // s += ' ' + @txtT score,             5, window.RIGHT
      s += ' ' + this.txtT(person.eloSum().toFixed(0), 6, window.RIGHT);
      // s += ' ' + @txtT prRes(person.tie[0]),2,window.CENTER
      // s += ' ' + @txtT       person.tie[1], 2,window.CENTER
      // s += ' ' + @txtT prRes(person.tie[2]),2,window.CENTER
      text(s, 10, y);
      results.push((function() {
        var k, len1, ref1, results1;
        ref1 = range(this.round - 1);
        //print('round',round)
        results1 = [];
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          r = ref1[k];
          x = ZOOM[state] * (10.5 + 0.9 * r);
          // print r,person.col[r][0], x, y, person.res[r], inv[person.opp[r]]
          // @lightbulb person.col[r][0], x, y, person.res[r], initials @players[inv[person.opp[r]]].name
          results1.push(this.lightbulb(person.col[r][0], x, y, person.res[r], person.opp[r]));
        }
        return results1;
      }).call(this));
    }
    return results;
  }

};

copyToClipboard = function(text) {
  var textarea;
  if (!navigator.clipboard) {
    textarea = document.createElement('textarea');
    textarea.value = text;
    document.boF.appendChild(textarea);
    textarea.select();
    document.execCommand('copy');
    document.boF.removeChild(textarea);
    return message = 'Urlen har kopierats till klippbordet 1';
  } else {
    return navigator.clipboard.writeText(text).then(() => {
      return message = 'Urlen har kopierats till klippbordet 2';
    }).catch((err) => {
      return message('Kopiering till klippbordet misslyckades');
    });
  }
};

sum = function(s) {
  var item, j, len, res;
  res = 0;
  for (j = 0, len = s.length; j < len; j++) {
    item = s[j];
    res += parseInt(item);
  }
  return res;
};

assert(6, sum('012012'));

// getMet = (a,b) -> b.id in persons[a.id].opp
downloadFile = function(txt, filename) {
  var a, blob, url;
  //print 'filename',filename
  blob = new Blob([txt], {
    type: 'text/plain'
  });
  url = URL.createObjectURL(blob);
  a = document.createElement('a');
  a.href = url;
  a.download = filename;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  return URL.revokeObjectURL(url);
};

prBoth = function(score) {
  var a, ax, b, bx;
  a = ASCII.indexOf(score);
  b = 2 - a;
  ax = prRes(score);
  bx = prRes(ASCII[b]);
  if (ax.length === 1) {
    ax = ' ' + ax;
  }
  if (bx.length === 1) {
    bx = bx + ' ';
  }
  return ax + ' - ' + bx;
};

prRes = function(score) {
  var a, b;
  score = ASCII.indexOf(score);
  a = `${Math.floor(score / 2)}`;
  if (a === "0") {
    a = "";
  }
  b = score % 2 === 1 ? '½' : '';
  if (a + b === "") {
    return '0';
  }
  return a + b;
};

assert('0', prRes('0'));

assert('½', prRes('1'));

assert('1', prRes('2'));

assert('1½', prRes('3'));

assert('4', prRes('8'));

assert('5', prRes('a'));

assert('5½', prRes('b'));

invert = function(arr) {
  var i, j, len, ref, res;
  res = [];
  ref = range(arr.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    res[arr[i]] = i;
  }
  return res;
};

assert([0, 1, 2, 3], invert([0, 1, 2, 3]));

assert([3, 2, 0, 1], invert([2, 3, 1, 0]));

setT0 = function(p, q) {
  var r;
  if (indexOf.call(persons[p].opp, q) >= 0) {
    return r = persons[p].opp.indexOf(q);
  }
};

// persons[p].tie[0] = persons[p].res[r]
calcT = function() {
  var j, key, len, p, person, q, ref, results, scores;
  // T ska beräknas först när allt är klart!
  // Beräkna T1 bara för de poänggrupper som har exakt två personer och då enbart om de har mött varandra.
  // Oklart om detta används för grupper med t ex tre personer. Låg sannolikhet att alla mött varandra.
  scores = {};
  ref = range(persons.length);
  for (j = 0, len = ref.length; j < len; j++) {
    p = ref[j];
    person = persons[p];
    key = sum(person.res);
    if (key in scores) {
      scores[key].push(p);
    } else {
      scores[key] = [p];
    }
  }
// person.tie[0] = 0
  results = [];
  for (key in scores) {
    if (scores[key].length === 2) {
      [p, q] = scores[key];
      setT0(p, q);
      results.push(setT0(q, p));
    } else {
      results.push(void 0);
    }
  }
  return results;
};

// for p in persons
// 	p.tie[1] = p.res.split("").filter((x) => x == '2').length
// 	p.tie[2] = 0
// 	for i in p.opp
// 		p.tie[2] += sum persons[i].res # Buchholz: the sum of opposition scores
mw = function(x) {
  return x / 1000 * width;
};

//########## GUI ############
// if location.search == ''
// 	title = 'Tutorial Tournament'
// 	datum = new Date()
// 	datum = datum.toISOString().split('T')[0]
// 	url = "?T=#{title.replace(" ","_")}&NAME=ANDERSSON_Anders|BENGTSSON_Bertil|CARLSEN_Christer|DANIELSSON_Daniel|ERIKSSON_Erik|FRANSSON_Ferdinand|GREIDER_Göran|HARALDSSON_Helge"
// 	location.href = url
// else
// 	fetchURL()
// 	pairings = persons
showHelp = function() {
  var i, j, len, ref, results;
  textAlign(LEFT);
  ref = range(HELP.length);
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    results.push(text(HELP[i], 100, 50 + 50 * i));
  }
  return results;
};

window.windowResized = function() {
  resizeCanvas(windowWidth - 4, windowHeight - 4);
  return xdraw();
};

window.setup = function() {
  createCanvas(windowWidth - 4, windowHeight - 4);
  textFont('Courier New');
  textAlign(CENTER, CENTER);
  tournament = new Tournament();
  tournament.lotta();
  state = 0;
  return xdraw();
};

xdraw = function() {
  background('gray');
  textSize(ZOOM[state] * 0.5);
  if (state === 0) {
    tournament.showTables();
  }
  if (state === 1) {
    tournament.showResult();
  }
  if (state === 2) {
    return tournament.showHelp();
  }
};

elo_probabilities = function(R_W, R_B, draw = 0.2) {
  var E_W, index, loss, win, x;
  E_W = 1 / (1 + 10 ** ((R_B - R_W) / 400));
  win = E_W - draw / 2;
  loss = (1 - E_W) - draw / 2;
  x = _.random(0, 1, true);
  index = 2;
  if (x < loss + draw) {
    index = 1;
  }
  if (x < loss) {
    index = 0;
  }
  // print 'elo_prob',R_W,R_B,x.toFixed(2),loss.toFixed(2),draw.toFixed(2),win.toFixed(2),index
  return index;
};

// p = elo_probabilities(1200, 1400)
// print(p)  # Output should be close to [0.44, 0.2, 0.26]
window.keyPressed = function() {
  var a, b, ch, e, i, index, j, k, l, len, len1, len2, matrix, player, r, ref, ref1, ref2, res, x;
  // print key
  if (key === 'Home') {
    currentTable = 0;
  }
  if (key === 'ArrowUp') {
    currentTable = modulo(currentTable - 1, Math.floor(N / 2));
  }
  if (key === 'ArrowDown') {
    currentTable = modulo(currentTable + 1, Math.floor(N / 2));
  }
  if (key === 'End') {
    currentTable = (Math.floor(N / 2)) - 1;
  }
  index = 2 * currentTable;
  a = tournament.pairings[index];
  b = tournament.pairings[index + 1];
  if (indexOf.call('0 1', key) >= 0) {
    index = '0 1'.indexOf(key);
    ch = "012"[index];
    if (a.res.length === a.col.length) {
      if (ch !== _.last(a.res)) {
        errors.push(currentTable);
        print('errors', errors);
      }
    } else {
      if (a.res.length < a.col.length) {
        a.res += "012"[index];
      }
      if (b.res.length < b.col.length) {
        b.res += "210"[index];
      }
    }
    currentTable = modulo(currentTable + 1, Math.floor(N / 2));
  }
  if (key === 'Enter') {
    state = 1 - state;
  }
  // if state == 1
  // 	calcT()
  if (indexOf.call('pP', key) >= 0) {
    tournament.lotta();
  }
  if (indexOf.call('l', key) >= 0) {
    ZOOM[state] += 1;
  }
  if (indexOf.call('s', key) >= 0) {
    ZOOM[state] -= 1;
  }
  if (indexOf.call('L', key) >= 0) {
    ZOOM[state] += 4;
  }
  if (indexOf.call('S', key) >= 0) {
    ZOOM[state] -= 4;
  }
  if (key === 'x') {
    ref = range(Math.floor(tournament.pairings.length / 2));
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      a = tournament.pairings[2 * i];
      b = tournament.pairings[2 * i + 1];
      x = 1;
      if (x === 0) { // Utan slump
        if (abs(a.elo - b.elo) <= 5) {
          res = 1;
        } else if (a.elo > b.elo) {
          res = 2;
        } else {
          res = 0;
        }
      } else if (x === 1) { // elo_prob
        res = elo_probabilities(a.elo, b.elo);
      } else if (x === 2) { // ren slump [0.4,0.2,0.4]
        r = _.random(1, true);
        res = 2;
        if (r < 0.6) {
          res = 1;
        }
        if (r < 0.4) {
          res = 0;
        }
      }
      if (a.res.length < a.col.length) {
        a.res += "012"[res];
      }
      if (b.res.length < b.col.length) {
        b.res += "012"[2 - res];
      }
    }
    matrix = [];
    ref1 = range(tournament.round);
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      r = ref1[k];
      res = [];
      ref2 = tournament.players;
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        player = ref2[l];
        res.push([player.id, player.opp[r]]);
      }
      matrix.push(res);
    }
    print('dump', JSON.stringify(matrix));
  }
  //@players.sort (a,b) -> b.elo - a.elo

  // if key == 'x'
  // 	for i in range tournament.pairings.length // 2
  // 		a = tournament.pairings[2*i]
  // 		b = tournament.pairings[2*i+1]
  // 		index = i % 3
  // 		if a.res.length < a.col.length then a.res += "012"[index]
  // 		if b.res.length < b.col.length then b.res += "012"[2 - index]
  if (key === 'Delete') {
    i = currentTable;
    errors = (function() {
      var len3, m, results;
      results = [];
      for (m = 0, len3 = errors.length; m < len3; m++) {
        e = errors[m];
        if (e !== i) {
          results.push(e);
        }
      }
      return results;
    })();
    if (a.res.length === b.res.length) {
      a = tournament.pairings[2 * i];
      b = tournament.pairings[2 * i + 1];
      a.res = a.res.substring(0, a.res.length - 1);
      b.res = b.res.substring(0, b.res.length - 1);
    }
    currentTable = modulo(currentTable + 1, Math.floor(N / 2));
  }
  return xdraw();
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023\044-Monrad\coffee\roundrobin.coffee