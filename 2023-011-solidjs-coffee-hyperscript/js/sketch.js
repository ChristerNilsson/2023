// Generated by CoffeeScript 2.5.1
var H, KNIGHT, QUEEN, QUEENS, R, Rect, W, arrClicks, clicks, illegals, intro, knight, makeState, moveKnight, placeQueen, queen, reSize, rects, results, setIllegals, setKnight, setQUEENS, setQueen, setRects, setState, setTargets, start, state, state0, taken, targets,
  indexOf = [].indexOf;

import _ from 'https://cdn.skypack.dev/lodash';

import {
  abs,
  circle,
  col,
  color,
  logg,
  N,
  row,
  sum,
  svg,
  makeIllegals,
  makeQueens,
  Position,
  range,
  rect,
  text,
  signal,
  effect,
  r4r
} from '/js/utils.js';

W = 0;

H = 0;

R = Math.floor(W / 10);

QUEEN = '♛';

KNIGHT = '♘';

[state, setState] = signal(0);

[QUEENS, setQUEENS] = signal([]);

[queen, setQueen] = signal(42);

[knight, setKnight] = signal(10);

[illegals, setIllegals] = signal(makeIllegals(queen())); // indexes of squares taken by queen

[rects, setRects] = signal([]); // Rect objects

[targets, setTargets] = signal([]); // indexes of squares that knight must visit

makeState = (nextState) => {
  logg('makeState');
  if (nextState === 0) {
    state0();
  }
  // else if nextState==1 then makeGame()
  // else if nextState==2 then makeResults()
  // else if nextState==3 then makeEnd()
  // else logg 'makeState error'
  return setState(nextState);
};

// setQueen 42
// setKnight 10
// setIllegals makeIllegals queen()
// setRects []
// setTargets []
// setState 1
intro = `Click on a square to place the queen.
Avoid the dots and the queen.
The ring will move when taken.
Repeat for all squares.
Qa8 is an easy starter, 118 moves.
Qd5 is a good challenge, 158 moves.`.split('\n');

setState(0);

clicks = 0;

arrClicks = []; // number of clicks for each target

taken = 0;

results = ['Move the knight to the ring'];

start = 0;

Rect = class Rect {
  constructor(index1, x1, y1, w, h, col1) {
    this.index = index1;
    this.x = x1;
    this.y = y1;
    this.w = w;
    this.h = h;
    this.col = col1;
  }

  // draw : ->
  // 	fill @col
  // 	rect @x, @y, @w, @h
  // inside : (x, y) -> abs(x-@x) <= W/2 and abs(y-@y) <= H/2
  click() {
    if (state() === 0) {
      return placeQueen(this.index);
    } else {
      return moveKnight(this.index);
    }
  }

  //	drawDot : -> if @index != queen() and (row(queen())+col(queen())) % 2 == 0 then circle {cx:@x, cy:@y, r:2*R}
  drawDot() {
    return circle({
      cx: this.x + this.w / 2,
      cy: this.y + this.h / 2,
      r: 2 * R
    });
  }

};

// drawPiece : (name) ->
// 	textSize 1.1 * W
// 	fill "black"
// 	text name,@x,@y
// text : (txt) ->
// 	textAlign CENTER, CENTER
// 	textSize 0.5*W
// 	fill 'black'
// 	text txt, @x, @y
// coin : =>
// 	noFill()
// 	push()
// 	strokeWeight 3
// 	ellipse @x, @y, 5*R
// 	pop()
placeQueen = (index) => {
  logg('Q' + Position(index));
  if (!QUEENS().includes(index)) {
    logg('No queen here');
    return;
  }
  setQUEENS([]);
  setQueen(index);
  setIllegals(makeIllegals(queen()));
  setTargets(range(N * N).filter((i) => {
    return !illegals().includes(i);
  }));
  setKnight(() => {
    return targets()[0];
  });
  logg('illegals', illegals());
  logg('targets', targets());
  logg('knight', knight());
  // setRects rects
  arrClicks.push(0);
  taken++;
  setState(1);
  return logg('state', state());
};

state0 = function() {
  logg('state', state());
  setQUEENS(() => {
    return makeQueens();
  });
  logg('QUEENS', QUEENS());
  reSize();
  // setQueen 0
  // setIllegals []
  // setTargets []
  // setState 0
  // setKnight 0
  clicks = 0;
  arrClicks = [];
  taken = 0;
  return start = new Date();
};

moveKnight = (index) => {
  var c, dx, dy, r;
  if (illegals().includes(index)) {
    return;
  }
  c = col(index);
  r = row(index);
  dx = abs(c - col(knight()));
  dy = abs(r - row(knight()));
  if (dx * dx + dy * dy === 5) {
    logg('knight moves to', Position(index));
    setKnight(index);
    clicks++;
    if (targets()[taken] === knight()) {
      taken++;
      arrClicks.push(clicks);
      clicks = 0;
    }
  }
  if (taken === targets().length) {
    results.push(`Q${Position(queen())}: ${sum(arrClicks)} moves took ${(new Date() - start) / 1000} seconds`);
    return setState(2);
  }
};

reSize = function() {
  var ci, clr, index, j, len, margin, ref, res, ri, x, y;
  H = 40; // Math.min innerHeight//13,innerWidth//9
  W = H;
  H = W;
  R = Math.floor(W / 10);
  setRects([]);
  margin = 0; // (innerWidth-8*W)//2
  res = [];
  ref = range(N * N);
  for (j = 0, len = ref.length; j < len; j++) {
    index = ref[j];
    ri = row(index);
    ci = col(index);
    clr = (ri + ci) % 2 ? 'brown' : 'yellow';
    x = W / 2 + W * col(index);
    y = H / 2 + H * row(index);
    res.push(new Rect(index, margin + x, y, W, H, clr));
  }
  return setRects(res);
};

// logg 'rects',rects()

// reSize()
// logg rects()
//newGame()
makeState(0);

r4r(() => {
  var sq;
  effect(() => {
    return logg('r4r', QUEENS.length);
  });
  return svg({
    viewBox: "0 0 400 400",
    width: 320,
    height: 320
  }, (function() {
    var j, len, ref, results1;
    ref = rects();
    results1 = [];
    for (j = 0, len = ref.length; j < len; j++) {
      sq = ref[j];
      results1.push(((sq) => {
        var c, fill, height, onClick, r, width, x, y;
        r = row(sq.index);
        c = col(sq.index);
        x = sq.x; //40*r
        y = sq.y; // 40*c
        width = sq.w; //40
        height = sq.h; //40
        fill = color(r, c);
        onClick = () => {
          return sq.click();
        };
        return rect({x, y, width, height, fill, onClick});
      })(sq));
    }
    return results1;
  }).call(this), (function() {
    var j, len, ref, results1;
    // if sq.index == queen()
    // 	text {x, y}, QUEEN
    // if sq.index == knight()
    // 	text {x, y}, KNIGHT
    //logg sq
    if (state() === 0) {
      ref = rects();
      results1 = [];
      for (j = 0, len = ref.length; j < len; j++) {
        sq = ref[j];
        results1.push(((sq) => {
          var onClick, ref1, x, y;
          if (ref1 = sq.index, indexOf.call(QUEENS(), ref1) >= 0) {
            x = sq.x + W / 2;
            y = sq.y + W / 2 + 5;
            onClick = () => {
              return sq.click();
            };
            return text({x, y, onClick}, QUEEN);
          }
        })(sq));
      }
      return results1;
    }
  }).call(this));
});

// sq = rects()[queen()]
// x = ()=> 20+sq.x #40*row queen()
// y = ()=> 25+sq.y #40*col queen()
// text {x,y},QUEEN

// sq = rects()[knight()]
// x = ()=> 20+sq.x #*row knight()
// y = ()=> 25+sq.y #40*col knight()
// text {x,y},KNIGHT

// rects()[13].drawDot()
// rects()[14].drawDot()
// rects()[15].drawDot()
// rects()[16].drawDot()

// for index in illegals()
// 	logg 'illegals',index
// 	# rects()[index].drawDot()
// 	sq = rects()[index]
// 	circle {cx:sq.x+sq.w/2, cy:sq.y+sq.h/2, r:2*R}
// 	# logg 'illegals',index
// 	# # rects()[index].drawDot()
// 	# sq = rects()[index]
// 	# circle {cx:sq.x+sq.w/2, cy:sq.y+sq.h/2, r:2*R}

// render Board, document.body
window.onresize = function() {
  return reSize();
};

//###############################

// setup = =>
// 	reSize()
// 	newGame()
// 	rectMode CENTER
// 	textAlign CENTER, CENTER
// 	createCanvas innerWidth, innerHeight

// info = ->
// 	fill 'black'
// 	textAlign CENTER, CENTER
// 	textSize 0.5*W
// 	temp = if state==0 then intro else results
// 	for result,i in temp
// 		text result,innerWidth//2, 9*H + i*H/2

// drawBoard = =>
// 	for rect in rects
// 		rect.draw()

// draw = =>
// 	background 128
// 	drawBoard()
// 	info()

// 	textAlign CENTER, CENTER
// 	if state > 0
// 		rects[queen].drawPiece Queen
// 		rects[knight].drawPiece Knight

// 	for i in illegal
// 		rects[i].drawDot()

// 	textSize 0.55*W
// 	for i in range taken
// 		if targets[i] != knight
// 			rects[targets[i]].text arrClicks[i]

// 	if state == 1
// 		rects[targets[taken]].coin()

// mousePressed = ->
// 	if state==2
// 		newGame()
// 		return
// 	for rect in rects
// 		if rect.inside mouseX, mouseY then rect.click()

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023-011-solidjs-coffee-hyperscript\coffee\sketch.coffee