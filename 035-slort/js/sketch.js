// Generated by CoffeeScript 2.5.1
var ALFABET, Button, ass, buffer, button, buttons, click, clickLow, clickNew, clickOdd, clickRotate, clickSolve, clickSwap, clickTurn, clickUndo, clicks, data, evaluate, i, increment, j, len, level, levels, op, prompts, range, ref, released, setActiveButtons, showHelp, showTable, skala, solution, start, state, x0, x1, xoff, y0, y1,
  indexOf = [].indexOf;

ALFABET = "SLORT";

range = _.range;

ass = (a, b) => {
  if (a !== b) {
    return console.log('Assert failed', a, '!=', b);
  }
};

op = (s, selection) => {
  var a, b;
  a = _.filter(s, function(x) {
    return indexOf.call(selection, x) >= 0;
  });
  b = _.filter(s, function(x) {
    return indexOf.call(selection, x) < 0;
  });
  return a.concat(b).join("");
};

evaluate = (a, cmd) => {
  var res;
  res = a;
  if (cmd === 'S') {
    res = a[1] + a[0] + a[3] + a[2] + a[5] + a[4];
  }
  if (cmd === 'L') {
    res = op(a, '123');
  }
  if (cmd === 'O') {
    res = op(a, '135');
  }
  if (cmd === 'R') {
    res = a[1] + a[2] + a[3] + a[4] + a[5] + a[0];
  }
  if (cmd === 'T') {
    res = a[5] + a[4] + a[3] + a[2] + a[1] + a[0];
  }
  return res;
};

start = 0;

state = 0; // 0=Help 1=Normal 2=Solution

skala = 1;

xoff = 0;

data = null;

solution = [];

buffer = ''; // SLORTSLORT

levels = [];

level = 1;

increment = -1;

window.preload = function() {
  return data = loadJSON("./data.json");
};

window.setup = function() {
  var keys;
  createCanvas(windowWidth, windowHeight);
  keys = _.keys(data);
  levels = _.groupBy(keys, function(key) {
    return data[key].length;
  });
  console.log(levels);
  skala = height / 100;
  textFont("Courier New");
  return strokeWeight(0.5);
};

showHelp = function(x, y) {
  var i, j, len, ref, results, texts;
  textSize(4);
  texts = [];
  texts.push('SLORT');
  texts.push('');
  texts.push('Find the steps!');
  texts.push('');
  texts.push('Target: 123456');
  texts.push('');
  texts.push('Max 7 steps');
  texts.push('  necessary');
  texts.push('');
  texts.push('Example:');
  texts.push('    123654');
  texts.push('  R 236541');
  texts.push('  O 351264');
  texts.push('  S 532146');
  texts.push('  T 641235');
  texts.push('  R 412356');
  texts.push('  L 123456 ok');
  ref = range(texts.length);
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    results.push(text(texts[i], x - 8, y + 5 * i));
  }
  return results;
};

showTable = function(table, x, y, showStart) { // table = 'SLORT'
  var cmd, current, i, j, len, ref, results;
  textSize(6);
  current = start;
  if (showStart) {
    text('  ' + start + ' ' + level, 24, y);
  }
  ref = range(table.length);
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    cmd = table[i];
    current = evaluate(current, cmd);
    if (current === '123456' && buffer === table) {
      text(cmd + ' ' + current + ' ok', 24, y + 5 * (i + 1));
      increment = 1;
      buttons[5].active = true;
      buttons[6].active = false;
      buttons[7].active = true;
    }
    results.push(text(cmd + ' ' + current, 24, y + 5 * (i + 1)));
  }
  return results;
};

window.draw = function() {
  var button, j, len;
  background("lightgray");
  translate(xoff, 0);
  scale(skala);
  textAlign(CENTER, CENTER);
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    button.draw();
  }
  textAlign(LEFT, TOP);
  if (state === 0) {
    showHelp(x1, y0);
  }
  if (state === 1 || state === 2) {
    showTable(buffer, x1, y0, true);
  }
  if (state === 2) {
    return showTable(solution, x1, y1, false);
  }
};

setActiveButtons = () => {};

Button = class Button {
  constructor(prompt, x2, y2, w, h, ts, click1) {
    this.prompt = prompt;
    this.x = x2;
    this.y = y2;
    this.w = w;
    this.h = h;
    this.ts = ts;
    this.click = click1;
    this.active = true;
  }

  draw() {
    push();
    textSize(this.ts);
    fill('gray');
    rect(this.x, this.y, this.w, this.h);
    fill(this.active ? 'yellow' : 'lightgray');
    text(this.prompt, this.x + this.w / 2, this.y + this.h * 0.5 + 0.5);
    return pop();
  }

  inside(mx, my) {
    return (this.x <= mx && mx <= this.x + this.w) && (this.y <= my && my <= this.y + this.h) && this.active;
  }

};

click = function(ltr) {
  if (buffer.length < 10) {
    buffer += ltr;
    return buttons[6].active = true;
  }
};

clickSwap = function() {
  return click('S');
};

clickLow = function() {
  return click('L');
};

clickOdd = function() {
  return click('O');
};

clickRotate = function() {
  return click('R');
};

clickTurn = function() {
  return click('T');
};

clickNew = function() {
  var i, j, len, ref;
  state = 1;
  buffer = '';
  level += increment;
  if (level < 1) {
    level = 1;
  }
  if (level > 7) {
    level = 7;
  }
  increment = -1;
  start = _.sample(levels[level]);
  solution = data[start];
  ref = range(8);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    buttons[i].active = true;
  }
  return buttons[6].active = false;
};

clickUndo = function() {
  if (buffer.length === 0) {
    return;
  }
  buffer = buffer.substring(0, buffer.length - 1);
  return buttons[6].active = buffer.length > 0;
};

clickSolve = function() {
  return state = 2;
};

buttons = [];

x0 = 1; // %

x1 = 30;

y0 = 0;

y1 = 55;

ref = range(8);
for (j = 0, len = ref.length; j < len; j++) {
  i = ref[j];
  prompts = 'Swap Low Odd Rotate Turn new undo solve'.split(' ');
  clicks = [clickSwap, clickLow, clickOdd, clickRotate, clickTurn, clickNew, clickUndo, clickSolve];
  button = new Button(prompts[i], x0, y0 + i * 10, 20, 10, 6, clicks[i]);
  button.ts = 5;
  if (i >= 5) {
    button.y += 5;
  }
  button.active = i === 5;
  buttons.push(button);
}

released = true;

window.mousePressed = function(event) {
  var k, len1;
  event.preventDefault();
  if (!released) {
    return;
  }
  released = false;
  for (k = 0, len1 = buttons.length; k < len1; k++) {
    button = buttons[k];
    if (button.inside(mouseX / skala, mouseY / skala)) {
      button.click();
    }
  }
  return false;
};

window.mouseReleased = function(event) {
  event.preventDefault();
  released = true;
  return false;
};

window.keyPressed = function() {
  var s;
  s = '' + key;
  s = s.toUpperCase();
  if (indexOf.call(ALFABET, s) >= 0 && buffer.length < 40) {
    buffer += s;
    setActiveButtons();
  }
  if (keyCode === BACKSPACE) {
    return clickUndo();
  }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023-035-slort\coffee\sketch.coffee